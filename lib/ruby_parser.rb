#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-503,8,66,67,68,10,54,-503,-503,-503,60,61,-503,-503,-503,64,-503,62',
'63,65,26,27,69,70,315,-503,-503,-503,3,25,31,30,92,91,93,94,-503,-503',
'20,-503,-503,-503,-503,-503,9,44,11,12,96,95,86,53,88,87,89,562,90,97',
'98,567,84,85,563,41,42,40,-503,-503,-503,-503,-503,-503,-503,-503,-503',
'-503,-503,-503,-503,-503,773,103,-503,-503,-503,39,102,-503,33,264,-503',
'55,56,-503,57,-503,35,-503,773,-503,43,-503,-503,-503,-503,-503,-503',
'-503,21,-503,-503,-503,769,82,76,78,79,80,81,569,568,570,77,83,-503',
'-503,-503,-503,314,-503,-430,59,66,67,68,-503,54,-430,-430,-430,60,61',
'-430,-430,-430,64,-430,62,63,65,251,252,69,70,-430,264,-430,-430,758',
'250,281,285,92,91,93,94,-430,-430,-85,-430,-430,-430,-430,-430,263,44',
'781,-87,96,95,86,53,88,87,89,254,90,97,98,701,84,85,538,41,42,40,-430',
'-430,-430,-430,-430,-430,-430,-430,-430,-430,-430,-430,-430,-430,200',
'201,-430,-430,-430,205,-430,-430,209,579,-430,55,56,-430,57,-430,892',
'-430,248,-430,43,-430,-430,-430,-430,-430,-430,-430,212,-430,263,-430',
'-79,82,76,78,79,80,81,782,567,608,77,83,-430,-430,-430,-430,538,-430',
'-276,59,567,-430,-86,-430,499,-276,-276,-276,-64,-90,-276,-276,-276',
'766,-276,-84,465,680,-85,578,-85,608,607,-85,-276,-276,264,-87,103,-87',
'786,700,-87,102,-276,-276,297,-276,-276,-276,-276,-276,103,765,537,-72',
'-79,102,569,568,103,-89,200,201,607,102,740,709,200,201,569,568,565',
'-79,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276',
'-276,76,-497,-276,-276,-276,-79,763,-276,77,-437,-276,-79,-353,-276',
'-90,-276,-437,-276,608,-276,-84,-276,-276,-276,-276,-276,-276,-276,755',
'-276,103,-276,537,263,-82,102,-86,103,-86,679,-76,-86,102,103,-276,-276',
'-276,-276,102,-276,-433,607,66,67,68,-276,54,-433,-433,-433,60,61,-433',
'-433,-433,64,-433,62,63,65,251,252,69,70,-433,512,-433,-433,517,250',
'281,285,92,91,93,94,-433,-433,-85,-433,-433,-433,-433,-433,758,44,538',
'538,96,95,86,53,88,87,89,692,90,97,98,693,84,85,538,41,42,40,-433,-433',
'-433,-433,-433,-433,-433,-433,-433,-433,-433,-433,-433,-433,220,-442',
'-433,-433,-433,205,-433,-433,209,680,-433,55,56,-433,57,-433,544,-433',
'545,-433,43,-433,-433,-433,-433,-433,-433,-433,212,-433,220,-433,-77',
'82,76,78,79,80,81,608,266,-85,77,83,-433,-433,-433,-433,-83,-433,-502',
'59,758,-433,545,-433,-442,-502,-502,-502,266,-77,-502,-502,-502,680',
'-502,-83,512,103,567,514,607,572,102,-502,-502,-502,103,103,537,537',
'512,102,102,514,-502,-502,-87,-502,-502,-502,-502,-502,103,-89,537,-75',
'-77,102,103,-88,754,-83,-329,102,-284,103,749,679,748,-329,102,-284',
'744,-77,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502',
'-502,-502,569,568,-502,-502,-502,-77,428,-502,742,-283,-502,-77,248',
'-502,-495,-502,-283,-502,728,-502,-83,-502,-502,-502,-502,-502,-502',
'-502,567,-502,-502,-502,-329,103,-284,679,-498,465,102,465,-75,-87,567',
'-282,-502,-502,-502,-502,-89,-502,-282,-282,-282,-90,-88,-502,-282,-282',
'391,-282,727,-79,-436,393,392,-87,-433,-283,-81,-436,502,-494,512,-433',
'-80,511,103,503,-495,-282,-282,102,-282,-282,-282,-282,-282,737,569',
'568,580,257,809,697,-86,200,201,730,258,-495,695,-501,569,568,574,-501',
'471,-85,-264,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-430,-433,-282,-282,-282,426,598,-430,197,471,-282,547',
'-494,424,713,198,-84,-282,548,-282,425,-282,-282,-282,-282,-282,-282',
'-282,696,-282,-501,-282,-283,-494,-501,711,-497,-501,683,-283,717,-501',
'-497,-501,-282,-282,-497,-80,590,-282,-501,-501,-501,-88,-86,-282,-501',
'-501,-430,-501,499,589,545,-501,675,-282,196,-501,-501,546,297,426,-282',
'662,-78,497,498,-498,661,-501,-501,-76,-501,-501,-501,-501,-501,-84',
'-501,-79,-283,637,-501,-282,199,-87,-435,-275,638,899,-282,-81,-77,-435',
'-275,-498,900,-89,-85,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501',
'-501,-501,-501,-501,-282,-438,-501,-501,-501,297,595,-275,-438,493,-501',
'315,-82,-284,-275,297,494,-501,-90,-501,-284,-501,-501,-501,-501,-501',
'-501,-501,-282,-501,-501,-501,-275,325,898,-439,323,322,656,324,810',
'-441,-439,655,-501,-501,618,-78,-441,-501,-290,200,201,-86,-441,-501',
'505,-290,-290,-290,618,-441,-290,-290,-290,-275,-290,492,-433,200,201',
'-284,316,220,642,-433,-290,-290,-283,329,328,332,331,777,758,-283,-290',
'-290,-282,-290,-290,-290,-290,-290,637,-282,-430,-72,-440,-441,-498',
'638,618,-430,217,-440,290,291,219,218,215,216,-441,777,758,314,-290',
'-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,822',
'220,-290,-290,-290,641,-283,-290,640,269,-290,297,266,-290,266,-290',
'-282,-290,239,-290,239,-290,-290,-290,-290,-290,-290,-290,639,-290,827',
'-290,217,297,-263,831,219,218,215,216,634,618,220,220,-290,-290,-290',
'-290,220,-290,-282,838,66,67,68,-290,54,-282,-282,-282,60,61,-282,-282',
'-282,64,-282,62,63,65,251,252,69,70,220,840,-282,-282,266,250,281,285',
'92,91,93,94,-282,-282,588,-282,-282,-282,-282,-282,843,44,-263,586,96',
'95,86,53,88,87,89,584,90,97,98,577,84,85,771,41,42,40,-282,-282,-282',
'-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,573,847,-282',
'-282,-282,205,598,-282,209,550,-282,55,56,-282,57,-282,549,-282,384',
'-282,43,-282,-282,-282,-282,-282,-282,-282,212,-282,851,-282,852,82',
'76,78,79,80,81,854,855,534,77,83,-282,-282,-282,-282,533,-282,-501,59',
'856,-88,532,-282,531,-501,-501,-501,860,528,-501,-501,-501,672,-501',
'220,323,322,863,324,526,865,866,-501,-501,-501,105,106,107,108,109,234',
'235,867,-501,-501,519,-501,-501,-501,-501,-501,516,297,876,773,217,773',
'223,773,219,218,215,216,220,881,221,882,222,501,500,332,331,886,-501',
'-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,266',
'297,-501,-501,-501,269,729,-501,891,495,-501,618,489,-501,618,-501,488',
'-501,487,-501,-63,-501,-501,-501,-501,-501,-501,-501,901,-501,-501,-501',
'672,220,266,323,322,471,324,105,106,107,108,109,-501,-501,-501,-501',
'325,-501,465,323,322,-86,324,-501,8,66,67,68,10,54,462,459,217,60,61',
'430,219,218,64,429,62,63,65,26,27,69,70,427,332,331,395,913,25,31,30',
'92,91,93,94,394,220,20,329,328,332,331,655,9,44,11,12,96,95,86,53,88',
'87,89,374,90,97,98,371,84,85,350,41,42,40,297,773,217,289,923,672,219',
'218,323,322,924,324,801,802,925,618,803,97,98,39,288,618,33,929,239',
'55,56,195,57,194,35,193,192,99,43,325,618,,323,322,,324,21,,,,,82,76',
'78,79,80,81,332,331,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63',
'65,26,27,69,70,329,328,332,331,,25,31,30,92,91,93,94,,,20,105,106,107',
'108,109,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,',
',,,,672,,,323,322,,324,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,325,,,323',
'322,,324,21,,,,,82,76,78,79,80,81,332,331,,77,83,8,66,67,68,10,54,,59',
',60,61,,,,64,,62,63,65,26,27,69,70,329,328,332,331,,25,31,30,92,91,93',
'94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,672,,,323,322,,324,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,325',
',,323,322,,324,21,,,,,82,76,78,79,80,81,332,331,,77,83,8,66,67,68,10',
'54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,329,328,332,331,,25,31,30',
'92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,220,224,229,230,231,226,228,236,,232,233,,,,,,234,235,',
'39,,,33,,,55,56,,57,,35,217,,223,43,219,218,215,216,227,225,221,21,222',
',,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62',
'63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96',
'95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,220,-519,-519,-519,-519',
'226,228,,,-519,-519,,,,,,234,235,,39,,,33,,,55,56,,57,,35,217,,223,43',
'219,218,215,216,227,225,221,21,222,,,,82,76,78,79,80,81,,,,77,83,8,66',
'67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92',
'91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85',
',41,42,40,220,224,229,230,231,226,228,,,232,233,,,,,,234,235,,39,,,33',
',,55,56,,57,,35,217,,223,43,219,218,215,216,227,225,221,21,222,,,,82',
'76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65',
'26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86',
'53,88,87,89,,90,97,98,,84,85,,41,42,40,220,-519,-519,-519,-519,226,228',
',,-519,-519,,,,,,234,235,,39,,,271,,,55,56,,57,,35,217,,223,43,219,218',
'215,216,227,225,221,21,222,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68',
'10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93',
'94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,220,-519,-519,-519,-519,226,228,,,-519,-519,,,,,,234,235,,39,,,33',
',,55,56,,57,,35,217,,223,43,219,218,215,216,227,225,221,21,222,,,,82',
'76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65',
'26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86',
'53,88,87,89,,90,97,98,,84,85,,41,42,40,220,224,229,230,231,226,228,236',
'237,232,233,,-519,-519,,,234,235,,39,,,271,,,55,56,,57,,35,217,,223',
'43,219,218,215,216,227,225,221,21,222,,,,82,76,78,79,80,81,,,,77,83',
'8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30',
'92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,220,224,229,230,231,226,228,236,237,232,233,,-519,-519',
',,234,235,,39,,,33,,,55,56,,57,,35,217,,223,43,219,218,215,216,227,225',
'221,21,222,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61',
',,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44',
'11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,220,,,,,,,,,,',
',,,,,234,235,,39,,,33,,,55,56,,57,,35,217,,223,43,219,218,215,216,,',
'221,21,222,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61',
',,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44',
'11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,220,-519,-519',
'-519,-519,226,228,,,-519,-519,,,,,,234,235,,39,,,33,,,55,56,,57,,35',
'217,,223,43,219,218,215,216,227,225,221,21,222,,,,82,76,78,79,80,81',
',,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,',
',,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,220,,,,,,,,,,,,,,,,234,235,,39,,,33,,,55,56,',
'57,,35,217,,223,43,219,218,215,216,,,221,21,222,,,,82,76,78,79,80,81',
',,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,',
',,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,220,-519,-519,-519,-519,226,228,,,-519,-519,',
',,,,234,235,,39,,,33,,,55,56,,57,,35,217,,223,43,219,218,215,216,227',
'225,221,21,222,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60',
'61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9',
'44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,220,,,,,,,',
',,,,,,,,234,235,,39,,,33,,,55,56,,57,,35,217,,223,43,219,218,215,216',
',,221,21,222,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60',
'61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9',
'44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,220,-519,-519',
'-519,-519,226,228,,,-519,-519,,,,,,234,235,,39,,,271,,,55,56,,57,,35',
'217,,223,43,219,218,215,216,227,225,221,21,222,,,,82,76,78,79,80,81',
',,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,',
',,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,220,,,,,,,,,,,,,,,,234,235,,39,,,33,,,55,56,',
'57,,35,217,,223,43,219,218,215,216,,,,21,,,,,82,76,78,79,80,81,,,,77',
'83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31',
'30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,',
'84,85,,41,42,40,220,,,,,,,,,,,,,,,,234,235,,39,,,33,,,55,56,,57,,35',
'217,,223,43,219,218,215,216,,,,21,,,,,82,76,78,79,80,81,,,,77,83,8,66',
'67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92',
'91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85',
',41,42,40,220,,,,,,,,,,,,,,,,234,235,,39,,,33,,,55,56,,57,,35,217,,',
'43,219,218,215,216,,,,21,,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10',
'54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94',
',,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,82,76',
'78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26',
'27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53',
'88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68',
'10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93',
'94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,82',
'76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65',
'26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86',
'53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,',
'55,56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,8,66,67',
'68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91',
'93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41',
'42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,',
',82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62,63',
'65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33',
',,55,56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,8,66',
'67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92',
'91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21',
',,,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64,,62',
'63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96',
'95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,',
',33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,8',
'66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30',
'92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,',
',21,,,,,82,76,78,79,80,81,,,,77,83,8,66,67,68,10,54,,59,,60,61,,,,64',
',62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12',
'96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,39',
',,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83',
'8,66,67,68,10,54,,59,,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30',
'92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,',
',21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86',
'53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68',
',54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94',
',,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,',
',,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78',
'79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70',
',,,,,25,31,30,92,91,93,94,,,20,,,,,585,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,220,224,229,230,231,226,228,236,237,232,233,',
'213,214,,,234,235,,205,,,209,,,55,56,,57,,,217,,223,43,219,218,215,216',
'227,225,221,21,222,,,,82,76,78,79,80,81,,,,77,83,103,238,66,67,68,102',
'54,59,,,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93',
'94,,,,,,,,,,282,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,325,,286,323',
'322,,324,,,,,,,,,,,,,,,,344,,,33,,,55,56,,57,,35,,,,,,316,,,,,,,329',
'328,332,331,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64',
',62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96',
'95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205',
',,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83',
'66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285',
'92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41',
'42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,',
',,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65',
'251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53',
'88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,610,,248,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83',
'66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,31,30',
'92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98,,84,85,',
'41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,304,,,,43,,,,,,,',
'212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86',
'53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,304,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66',
'67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,31,30,92',
'91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98,,84,85,,41',
'42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,304,,,,43,,,,,,,,212',
',,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63',
'65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53',
'88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55',
'56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54',
',,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,31,30,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,',
',,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,610,,248,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,10,54,,,59,60,61,,,,64,,62,63,65,26',
'27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86,53',
'88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,',
'54,384,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93',
'94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,',
',,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76',
'78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69',
'70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,,44',
',,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,',
',205,,,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77',
'83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30',
'92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41',
'42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,',
',82,76,78,79,80,81,,,,77,83,66,67,68,10,54,,,59,60,61,,,,64,,62,63,65',
'26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,9,44,11,12,96,95,86',
'53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,',
'55,56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68',
',54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,31,30,92,91,93',
'94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40',
',,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,304,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88',
'87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56',
',57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,',
',59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,',
',,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25',
'31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85',
',41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,402,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53',
'88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55',
'56,,57,,402,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68',
',54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,304',
',,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60',
'61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,',
',,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,',
',,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81',
',,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,',
'250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98',
',84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,',
',,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64',
',62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67',
'68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93',
'94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,',
',,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76',
'78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69',
'70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,',
',,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205',
',,209,,,55,56,,57,,813,,248,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,',
'77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98',
',84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,927,,248',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'282,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,325,,286,323,322,,324,',
',,,,,,,,,,,,,,279,,,209,,,55,56,,57,,,,,,,,316,,,,,,,329,328,332,331',
'82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,282,,,96,95,86,53,88',
'87,89,,90,97,98,,84,85,,,,286,,,,,,,,,,,,,,,,,,,,279,,,276,,,55,56,',
'57,,275,,,,,,,,,,,,,,,,,82,76,78,79,80,81,,,,77,83,-253,-253,-253,,-253',
',,59,-253,-253,,,,-253,,-253,-253,-253,-253,-253,-253,-253,,,,,,-253',
'-253,-253,-253,-253,-253,-253,,,,,,,,,,-253,,,-253,-253,-253,-253,-253',
'-253,-253,-253,-253,-253,-253,,-253,-253,,-253,-253,-253,,,,,,,,,,,',
',,,,,,,,-253,,,-253,266,,-253,-253,,-253,,-253,,-253,,-253,,,,,,,,-253',
',,,,-253,-253,-253,-253,-253,-253,,,,-253,-253,66,67,68,,54,,,-253,60',
'61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,',
',,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,',
',,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81',
',,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,',
'250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98',
',84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,',
',,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64',
',62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96',
'95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205',
',,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83',
'66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285',
'92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41',
'42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,',
',,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65',
'251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53',
'88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55',
'56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54',
',,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,',
',,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67',
'68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92',
'91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88',
'87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56',
',57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,',
',59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,',
',,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67',
'68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92',
'91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88',
'87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56',
',57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,',
',59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,',
',,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67',
'68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92',
'91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88',
'87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56',
',57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,',
',59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,',
',,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97',
'98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43',
',,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,',
'64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44',
',,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,',
',205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77',
'83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281',
'285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85',
',41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212',
',,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63',
'65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86',
'53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67',
'68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92',
'91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87',
'89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56',
',57,,304,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54',
',,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,',
',,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97',
'98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43',
',,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,',
'64,,62,63,65,251,252,69,70,,,,,,250,31,30,92,91,93,94,,,,,,,,,,44,,',
'96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,',
',,205,,,209,,,55,56,,57,,246,,248,,43,,,,,,,,212,,,,,82,76,78,79,80',
'81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,',
',,,250,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97',
'98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,246,,248',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,31,30,92,91,93,94,,,,,,,,,,44',
',,96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,475,56,,57,,246,,248,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,31,30,92,91,93,94,,,,,,,,,,44',
',,96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,246,,248,,43,,,,,,,,212,,,,,82,76,78,79,80',
'81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,',
',,,250,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97',
'98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,485,55,56,,57,,246',
',248,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59',
'60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,',
',,,,,,282,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,,,286,,,,,,,,,,,',
',,,,,,,,344,,,33,,,55,56,,57,,35,,,,,,,,,,,732,,,,,,82,76,78,79,80,81',
',,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,',
'250,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98',
',84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,246,,248',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,',
',,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98',
',84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,818,,248',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,',
',,,,,,,205,,,209,,,55,56,,57,,895,,248,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,282,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,,,286,,,,,,,,,,,,,,,,,,,,279,,,209,,,55,56,,57,,,,,,,',
',,,,,,,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64',
',62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68',
',54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91',
'93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40',
',,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,658,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27',
'69,70,,,,,,25,31,30,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,',
'90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,',
',,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60',
'61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,',
',,,44,,,96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,',
',,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80',
'81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,',
',25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98',
',84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,',
',,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64',
',62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96',
'95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205',
',,209,,,55,56,,57,,820,,248,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,',
'77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67',
'68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93',
'94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,',
',,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78',
'79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69',
'70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,',
'90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,',
',,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60',
'61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,,,,,,,,44',
',,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,',
',205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77',
'83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281',
'285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85',
',41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,402,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,883,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66',
'67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91',
'93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40',
',,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76',
'78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252',
'69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89',
',90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57',
',,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59',
'60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,',
',,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,',
',,,,,,,,,,205,,,209,505,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,',
',,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,254,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,628',
',248,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59',
'60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,',
',,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,',
',,,,,,,,,,205,,,209,,,55,56,,57,,716,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,282,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,,,286,,,,,,,,,,,,,,,,,,,,872,,,209,,,55,56,,57,,,,,,,',
',,,,,,,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64',
',62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96',
'95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205',
',,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83',
'66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92',
'91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88',
'87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56',
',57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,',
',59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254',
'90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,',
',,,,43,,,,,,,,212,,,,-517,82,76,78,79,80,81,-517,-517,-517,77,83,-517',
'-517,-517,,-517,,,59,,,,,,,-517,,,,,,,,,,-517,-517,,-517,-517,-517,-517',
'-517,,,,,919,418,,,920,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128',
',,,-517,145,146,133,134,,,-517,,,,,266,-517,,,,138,137,,124,142,140',
'139,135,136,131,129,122,,123,,,147,-517,,,,,,,,66,67,68,,54,-517,,-517',
'60,61,-517,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,212,,,,-517,82,76,78,79,80,81,-517,-517,-517,77,83,-517,-517',
'-517,,-517,,,59,,,,,,,-517,,,,,,,,,,-517,-517,,-517,-517,-517,-517,-517',
',,,,917,412,,,918,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128,,',
',-517,145,146,133,134,,,-517,,,,,266,-517,,,,138,137,,124,142,140,139',
'135,136,131,129,122,,123,,,147,-517,,,,,,,,66,67,68,10,54,-517,,-517',
'60,61,-517,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20',
',,,,,9,44,11,12,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,',
',,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,82,76,78',
'79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70',
',,,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97',
'98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43',
',,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,',
'64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20,,,,,,,44,,,96',
'95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205',
',,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66',
'67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285',
'92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41',
'42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,',
',,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65',
'251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53',
'88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55',
'56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54',
',,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94',
',,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,',
',,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79',
'80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70',
',,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90',
'97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,',
',43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61',
',,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,',
'44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,',
',,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,',
',,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250',
'281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,',
',212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95',
'86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209',
',,55,56,,57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67',
'68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281,285,92',
'91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42',
'40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,212,,,,,82',
'76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251',
'252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88',
'87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56',
',57,,,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,',
',59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20',
',,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,',
',,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78,79,80',
'81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,',
',25,31,30,92,91,93,94,,,20,,,,,,,44,,,96,95,86,53,88,87,89,,90,97,98',
',84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,',
',,,,,21,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64',
',62,63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,44,,,96',
'95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,,,,,205',
',,209,,,55,56,,57,,785,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81,,,,77',
'83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,,250,281',
'285,92,91,93,94,,,,,,,,,,44,,,96,95,86,53,88,87,89,254,90,97,98,,84',
'85,,41,42,40,,,,,,,,,,,,,,,,,,,,205,,,209,,,55,56,,57,,614,,248,,43',
',,,,,,,212,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,',
',64,,62,63,65,251,252,69,70,,,,,,250,31,30,92,91,93,94,,,,,,,,,,44,',
',96,95,86,53,88,87,89,254,90,97,98,,84,85,,41,42,40,,,,,,,,,,,,,,,,',
',,,205,,,209,,,55,56,,57,,304,,,,43,,,,,,,,212,,,,,82,76,78,79,80,81',
',,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62,63,65,251,252,69,70,,,,,',
'250,281,285,92,91,93,94,,,,,,,,,,282,,,96,95,551,53,88,87,552,,90,97',
'98,,84,85,,,,286,,,,,,,,,,,,,,,,,,,,553,,,209,,,55,56,,57,,,,,,,,,,',
',,,,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54,,,59,60,61,,,,64,,62',
'63,65,251,252,69,70,,,,,,250,281,285,92,91,93,94,,,,,,,,,,282,,,96,95',
'551,53,88,87,552,,90,97,98,,84,85,,,,286,,,,,,,,,,,,,,,,,,,,553,,,209',
',,55,56,,57,,,,,,,,,,,,,,,,,,,82,76,78,79,80,81,,,,77,83,66,67,68,,54',
',,59,60,61,,,,64,,62,63,65,26,27,69,70,,,,,,25,31,30,92,91,93,94,,,20',
',,,,,,44,,,96,95,86,53,88,87,89,,90,97,98,,84,85,,41,42,40,,,,,,,,,',
',,,,,,,,,,205,,,209,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,82,76,78,79,80',
'81,,,,77,83,-253,-253,-253,,-253,,,59,-253,-253,,,,-253,,-253,-253,-253',
'-253,-253,-253,-253,,,,,,-253,-253,-253,-253,-253,-253,-253,,,,,,,,585',
',-253,,,-253,-253,-253,-253,-253,-253,-253,-253,-253,-253,-253,,-253',
'-253,,-253,-253,-253,220,224,229,230,231,226,228,236,237,232,233,,213',
'214,,,234,235,,-253,,,-253,266,,-253,-253,,-253,,-253,217,-253,223,-253',
'219,218,215,216,227,225,221,-253,222,,,,-253,-253,-253,-253,-253,-253',
',,,-253,-253,,238,,-219,,,,-253,157,168,158,181,154,174,164,163,,,179',
'162,161,156,182,,,166,155,169,173,175,167,160,,,,176,183,178,177,170',
'180,165,153,172,171,184,185,186,187,188,152,159,150,151,148,149,113',
'115,112,,114,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,,,145',
'146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136,131,129,122',
',123,,,147,82,157,168,158,181,154,174,164,163,,83,179,162,161,156,182',
',,166,155,169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172',
'171,184,185,186,187,188,152,159,150,151,148,149,113,115,,,114,,,,,,',
',,143,144,,141,125,126,127,,130,132,,,128,,,,,145,146,133,134,,,,,,',
',,,,,,138,137,,124,142,140,139,135,136,131,129,122,,123,,,147,82,157',
'168,158,181,154,174,164,163,,83,179,162,161,156,182,,,166,155,169,173',
'175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187',
'188,152,159,150,151,148,149,113,115,,,114,,,,,,,,,143,144,,141,125,126',
'127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142',
'140,139,135,136,131,129,122,,123,,,147,82,157,168,158,181,154,174,164',
'163,,83,179,162,161,156,182,,,166,155,169,173,175,167,160,,,,176,183',
'178,177,170,180,165,153,172,171,184,185,186,187,188,152,159,150,151',
'148,149,113,115,,,114,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128',
',,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136,131',
'129,122,,123,,,147,82,157,168,158,181,154,174,164,163,,83,179,162,161',
'156,182,,,166,155,169,173,175,167,160,,,,176,183,178,358,357,359,356',
'153,172,171,184,185,186,187,188,152,159,150,151,354,355,352,115,88,87',
'353,,90,,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,,,145,146,133',
'134,,,,,,364,,,,,,,138,137,,124,142,140,139,135,136,131,129,122,,123',
',,147,157,168,158,181,154,174,164,163,,,179,162,161,156,182,,,166,155',
'169,173,175,167,160,,,,176,183,178,177,170,180,165,153,172,171,184,185',
'186,187,188,152,159,150,151,148,149,113,115,381,380,114,,382,,,,,,,143',
'144,,141,125,126,127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,',
'138,137,,124,142,140,139,135,136,131,129,122,,123,,,147,157,168,158',
'181,154,174,164,163,,,179,162,161,156,182,,,166,155,169,173,175,167',
'160,,,,176,183,178,177,170,180,165,153,172,171,184,185,186,187,188,152',
'159,150,151,148,149,113,115,,,114,,,,,,,,,143,144,,141,125,126,127,',
'130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139',
'135,136,131,129,122,,123,468,412,147,,469,,,,,,,,,143,144,,141,125,126',
'127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142',
'140,139,135,136,131,129,122,,123,601,418,147,,602,,,,,,,,,143,144,,141',
'125,126,127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,',
'124,142,140,139,135,136,131,129,122,,123,599,412,147,,600,,,,,,,,,143',
'144,,141,125,126,127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,',
'138,137,,124,142,140,139,135,136,131,129,122,,123,788,418,147,,789,',
',,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,,,145,146,133,134,',
',,,,,,,,,,,138,137,,124,142,140,139,135,136,131,129,122,,123,601,418',
'147,,602,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,,,145,146',
'133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136,131,129,122,,123',
'647,418,147,,648,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,',
',145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136,131,129',
'122,,123,644,412,147,,645,,,,,,,,,143,144,,141,125,126,127,,130,132',
',,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136',
'131,129,122,,123,468,412,147,,469,,,,,,,,,143,144,,141,125,126,127,',
'130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139',
'135,136,131,129,122,,123,468,412,147,,469,,,,,,,,,143,144,,141,125,126',
'127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142',
'140,139,135,136,131,129,122,,123,409,412,147,,410,,,,,,,,,143,144,,141',
'125,126,127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,',
'124,142,140,139,135,136,131,129,122,,123,414,418,147,,416,,,,,,,,,143',
'144,,141,125,126,127,,130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,',
'138,137,,124,142,140,139,135,136,131,129,122,,123,689,418,147,,690,',
',,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,,,145,146,133,134,',
',,,,,,,,,,,138,137,,124,142,140,139,135,136,131,129,122,,123,468,412',
'147,,469,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,,,145,146',
'133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136,131,129,122,,123',
'468,412,147,,469,,,,,,,,,143,144,,141,125,126,127,,130,132,,,128,,,',
',145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136,131,129',
'122,,123,687,412,147,,688,,,,,,,,,143,144,,141,125,126,127,,130,132',
',,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139,135,136',
'131,129,122,,123,599,412,147,,600,,,,,,,,,143,144,,141,125,126,127,',
'130,132,,,128,,,,,145,146,133,134,,,,,,,,,,,,,138,137,,124,142,140,139',
'135,136,131,129,122,,123,,,147,220,224,229,230,231,226,228,236,237,232',
'233,,213,214,,,234,235,,,,,,,,,,,,,,217,,223,,219,218,215,216,227,225',
'221,,222,,,,,,,,,,,,,,,,238,,618,220,224,229,230,231,226,228,236,237',
'232,233,,213,214,,,234,235,,,,-219,,,,,,,,,,217,,223,,219,218,215,216',
'227,225,221,,222,,,,,,,,,,,,,,,,238,,-219,220,224,229,230,231,226,228',
'236,237,232,233,,213,214,,,234,235,,,,,,,,,,,,,,217,,223,,219,218,215',
'216,227,225,221,,222,,220,224,229,230,231,226,228,236,237,232,233,,213',
'214,238,605,234,235,,,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221',
',222,220,224,229,230,231,226,228,236,237,232,233,,213,214,,238,234,235',
',,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221,,222,220,224,229',
'230,231,226,228,236,237,232,233,,213,214,,238,234,235,,,,,,,,,,,,,,217',
',223,,219,218,215,216,227,225,221,,222,220,224,229,230,231,226,228,236',
'237,232,233,,213,214,,238,234,235,,,,,,,,,,,,,,217,,223,,219,218,215',
'216,227,225,221,,222,220,224,229,230,231,226,228,236,237,232,233,,213',
'214,,238,234,235,,,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221',
',222,220,224,229,230,231,226,228,236,237,232,233,,213,214,,238,234,235',
',,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221,,222,220,224,229',
'230,231,226,228,236,237,232,233,,213,214,,238,234,235,,,,,,,,,,,,,,217',
',223,,219,218,215,216,227,225,221,,222,220,224,229,230,231,226,228,236',
'237,232,233,,213,214,,238,234,235,,,,,,,,,,,,,,217,,223,,219,218,215',
'216,227,225,221,,222,220,224,229,230,231,226,228,236,237,232,233,,213',
'214,297,238,234,235,,,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221',
',222,220,224,229,230,231,226,228,236,237,232,233,,213,214,,238,234,235',
',,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221,,222,220,224,229',
'230,231,226,228,236,237,232,233,,213,214,,238,234,235,,,,,,,,,,,,,,217',
',223,,219,218,215,216,227,225,221,,222,220,224,229,230,231,226,228,236',
'237,232,233,,213,214,,238,234,235,,,,,,,,,,,,,,217,,223,,219,218,215',
'216,227,225,221,,222,220,224,229,230,231,226,228,236,237,232,233,,213',
'214,,238,234,235,,,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221',
',222,220,224,229,230,231,226,228,236,237,232,233,,213,214,,238,234,235',
',,,,,,,,,,,,,217,,223,,219,218,215,216,227,225,221,,222,220,224,229',
'230,231,226,228,236,237,232,233,,213,214,297,238,234,235,,,,,,,,,,,',
',,217,,223,,219,218,215,216,227,225,221,,222,,,,,,,,,,,,,,,,238' ]
        racc_action_table = arr = Array.new(24018, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'419,780,780,780,780,780,780,419,419,419,780,780,419,419,419,780,419',
'780,780,780,780,780,780,780,313,419,419,419,1,780,780,780,780,780,780',
'780,419,419,780,419,419,419,419,419,780,780,780,780,780,780,780,780',
'780,780,780,361,780,780,780,368,780,780,361,780,780,780,419,419,419',
'419,419,419,419,419,419,419,419,419,419,419,669,701,419,419,419,780',
'701,419,780,58,419,780,780,419,780,419,780,419,671,419,780,419,419,419',
'419,419,419,419,780,419,419,419,665,780,780,780,780,780,780,368,368',
'368,780,780,419,419,419,419,313,419,86,780,860,860,860,419,860,86,86',
'86,860,860,86,86,86,860,86,860,860,860,860,860,860,860,86,283,86,86',
'676,860,860,860,860,860,860,860,86,86,917,86,86,86,86,86,58,860,682',
'918,860,860,860,860,860,860,860,860,860,860,860,557,860,860,336,860',
'860,860,86,86,86,86,86,86,86,86,86,86,86,86,86,86,706,706,86,86,86,860',
'86,86,860,375,86,860,860,86,860,86,860,86,860,86,860,86,86,86,86,86',
'86,86,860,86,283,86,645,860,860,860,860,860,860,684,575,624,860,860',
'86,86,86,86,784,86,53,860,366,86,919,86,427,53,53,53,641,345,53,53,53',
'664,53,786,626,787,917,375,917,478,624,917,53,53,29,918,795,918,686',
'557,918,795,53,53,706,53,53,53,53,53,336,663,336,641,645,336,575,575',
'557,427,653,653,478,557,626,575,18,18,366,366,366,645,53,53,53,53,53',
'53,53,53,53,53,53,53,53,53,74,919,53,53,53,645,657,53,74,359,53,645',
'29,53,345,53,359,53,477,53,786,53,53,53,53,53,53,53,653,53,784,53,784',
'29,345,784,919,787,919,787,786,919,787,849,53,53,53,53,849,53,89,477',
'501,501,501,53,501,89,89,89,501,501,89,89,89,501,89,501,501,501,501',
'501,501,501,89,306,89,89,306,501,501,501,501,501,501,501,89,89,687,89',
'89,89,89,89,654,501,830,839,501,501,501,501,501,501,501,553,501,501',
'501,553,501,501,335,501,501,501,89,89,89,89,89,89,89,89,89,89,89,89',
'89,89,652,204,89,89,89,501,89,89,501,540,89,501,501,89,501,89,340,89',
'340,89,501,89,89,89,89,89,89,89,501,89,651,89,644,501,501,501,501,501',
'501,457,649,687,501,501,89,89,89,89,204,89,418,501,884,89,884,89,38',
'418,418,418,646,687,418,418,418,541,418,342,303,5,370,303,457,370,5',
'418,418,418,830,839,830,839,309,830,839,309,418,418,688,418,418,418',
'418,418,335,549,335,38,644,335,317,690,643,38,45,317,754,540,636,540',
'635,45,540,754,630,644,418,418,418,418,418,418,418,418,418,418,418,418',
'418,418,370,370,418,418,418,644,206,418,627,901,418,644,618,418,552',
'418,901,418,600,418,342,418,418,418,418,418,418,418,377,418,418,418',
'45,541,754,541,690,616,541,613,342,688,372,416,418,418,418,418,549,418',
'416,416,416,206,690,418,416,416,112,416,599,688,358,112,112,600,552',
'901,549,358,292,551,302,552,690,302,339,292,552,416,416,339,416,416',
'416,416,416,611,377,377,377,28,730,555,689,299,299,603,28,552,555,647',
'372,372,372,788,596,599,715,416,416,416,416,416,416,416,416,416,416',
'416,416,416,416,551,552,416,416,416,292,416,551,16,591,416,343,551,203',
'583,16,730,416,343,416,203,416,416,416,416,416,416,416,555,416,647,416',
'495,551,788,579,689,647,543,495,588,788,647,414,416,416,788,416,410',
'416,414,414,414,416,689,416,414,414,551,414,289,409,542,647,536,920',
'16,788,414,343,524,203,920,523,689,286,286,920,522,414,414,588,414,414',
'414,414,414,588,647,410,495,752,788,648,17,410,357,873,752,871,648,289',
'409,357,873,648,871,289,409,414,414,414,414,414,414,414,414,414,414',
'414,414,414,414,920,356,414,414,414,508,414,280,356,278,414,59,17,929',
'280,752,278,414,17,414,929,414,414,414,414,414,414,414,648,414,414,414',
'873,59,871,355,59,59,507,59,733,277,355,506,414,414,735,414,277,414',
'31,334,334,414,870,414,496,31,31,31,738,870,31,31,31,280,31,278,353',
'702,702,929,59,452,491,353,31,31,693,59,59,59,59,903,903,693,31,31,789',
'31,31,31,31,31,481,789,352,487,354,277,789,481,743,352,452,354,40,40',
'452,452,452,452,870,674,674,59,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,745,453,31,31,31,486,693,31,484,31,31,481,750,31,751,31,789,31,483',
'31,753,31,31,31,31,31,31,31,482,31,756,31,453,480,759,760,453,453,453',
'453,479,463,438,437,31,31,31,31,436,31,602,775,430,430,430,31,430,602',
'602,602,430,430,602,602,602,430,602,430,430,430,430,430,430,430,435',
'778,602,602,415,430,430,430,430,430,430,430,602,602,408,602,602,602',
'602,602,783,430,404,401,430,430,430,430,430,430,430,396,430,430,430',
'374,430,430,668,430,430,430,602,602,602,602,602,602,602,602,602,602',
'602,602,602,602,371,791,602,602,602,430,602,602,430,346,602,430,430',
'602,430,602,344,602,341,602,430,602,602,602,602,602,602,602,430,602',
'796,602,797,430,430,430,430,430,430,799,805,333,430,430,602,602,602',
'602,330,602,601,430,811,602,325,602,320,601,601,601,816,319,601,601',
'601,773,601,443,773,773,819,773,318,823,824,601,601,601,110,110,110',
'110,110,443,443,825,601,601,307,601,601,601,601,601,305,301,834,835',
'443,836,443,837,443,443,443,443,294,841,443,842,443,291,290,773,773',
'848,601,601,601,601,601,601,601,601,601,601,601,601,601,601,285,282',
'601,601,601,281,601,601,858,279,601,861,274,601,864,601,273,601,272',
'601,270,601,601,601,601,601,601,601,872,601,601,601,771,434,262,771',
'771,259,771,383,383,383,383,383,601,601,601,601,528,601,249,528,528',
'601,528,601,747,747,747,747,747,747,245,244,434,747,747,208,434,434',
'747,207,747,747,747,747,747,747,747,205,771,771,191,893,747,747,747',
'747,747,747,747,189,433,747,528,528,528,528,897,747,747,747,747,747',
'747,747,747,747,747,747,81,747,747,747,80,747,747,66,747,747,747,44',
'902,433,39,908,876,433,433,876,876,909,876,707,707,910,911,707,707,707',
'747,37,914,747,916,23,747,747,15,747,14,747,13,12,3,747,766,930,,766',
'766,,766,747,,,,,747,747,747,747,747,747,876,876,,747,747,844,844,844',
'844,844,844,,747,,844,844,,,,844,,844,844,844,844,844,844,844,766,766',
'766,766,,844,844,844,844,844,844,844,,,844,7,7,7,7,7,844,844,844,844',
'844,844,844,844,844,844,844,,844,844,844,,844,844,,844,844,844,,,,,',
'531,,,531,531,,531,,,,,,,,844,,,844,,,844,844,,844,,844,,,,844,316,',
',316,316,,316,844,,,,,844,844,844,844,844,844,531,531,,844,844,746,746',
'746,746,746,746,,844,,746,746,,,,746,,746,746,746,746,746,746,746,316',
'316,316,316,,746,746,746,746,746,746,746,,,746,,,,,,746,746,746,746',
'746,746,746,746,746,746,746,,746,746,746,,746,746,,746,746,746,,,,,',
'769,,,769,769,,769,,,,,,,,746,,,746,,,746,746,,746,,746,,,,746,526,',
',526,526,,526,746,,,,,746,746,746,746,746,746,769,769,,746,746,298,298',
'298,298,298,298,,746,,298,298,,,,298,,298,298,298,298,298,298,298,526',
'526,526,526,,298,298,298,298,298,298,298,,,298,,,,,,298,298,298,298',
'298,298,298,298,298,298,298,,298,298,298,,298,298,,298,298,298,455,455',
'455,455,455,455,455,455,,455,455,,,,,,455,455,,298,,,298,,,298,298,',
'298,,298,455,,455,298,455,455,455,455,455,455,455,298,455,,,,298,298',
'298,298,298,298,,,,298,298,395,395,395,395,395,395,,298,,395,395,,,',
'395,,395,395,395,395,395,395,395,,,,,,395,395,395,395,395,395,395,,',
'395,,,,,,395,395,395,395,395,395,395,395,395,395,395,,395,395,395,,395',
'395,,395,395,395,449,449,449,449,449,449,449,,,449,449,,,,,,449,449',
',395,,,395,,,395,395,,395,,395,449,,449,395,449,449,449,449,449,449',
'449,395,449,,,,395,395,395,395,395,395,,,,395,395,708,708,708,708,708',
'708,,395,,708,708,,,,708,,708,708,708,708,708,708,708,,,,,,708,708,708',
'708,708,708,708,,,708,,,,,,708,708,708,708,708,708,708,708,708,708,708',
',708,708,708,,708,708,,708,708,708,454,454,454,454,454,454,454,,,454',
'454,,,,,,454,454,,708,,,708,,,708,708,,708,,708,454,,454,708,454,454',
'454,454,454,454,454,708,454,,,,708,708,708,708,708,708,,,,708,708,276',
'276,276,276,276,276,,708,,276,276,,,,276,,276,276,276,276,276,276,276',
',,,,,276,276,276,276,276,276,276,,,276,,,,,,276,276,276,276,276,276',
'276,276,276,276,276,,276,276,276,,276,276,,276,276,276,442,442,442,442',
'442,442,442,,,442,442,,,,,,442,442,,276,,,276,,,276,276,,276,,276,442',
',442,276,442,442,442,442,442,442,442,276,442,,,,276,276,276,276,276',
'276,,,,276,276,869,869,869,869,869,869,,276,,869,869,,,,869,,869,869',
'869,869,869,869,869,,,,,,869,869,869,869,869,869,869,,,869,,,,,,869',
'869,869,869,869,869,869,869,869,869,869,,869,869,869,,869,869,,869,869',
'869,448,448,448,448,448,448,448,,,448,448,,,,,,448,448,,869,,,869,,',
'869,869,,869,,869,448,,448,869,448,448,448,448,448,448,448,869,448,',
',,869,869,869,869,869,869,,,,869,869,271,271,271,271,271,271,,869,,271',
'271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271,271,271,271',
'271,,,271,,,,,,271,271,271,271,271,271,271,271,271,271,271,,271,271',
'271,,271,271,,271,271,271,432,432,432,432,432,432,432,432,432,432,432',
',432,432,,,432,432,,271,,,271,,,271,271,,271,,271,432,,432,271,432,432',
'432,432,432,432,432,271,432,,,,271,271,271,271,271,271,,,,271,271,758',
'758,758,758,758,758,,271,,758,758,,,,758,,758,758,758,758,758,758,758',
',,,,,758,758,758,758,758,758,758,,,758,,,,,,758,758,758,758,758,758',
'758,758,758,758,758,,758,758,758,,758,758,,758,758,758,431,431,431,431',
'431,431,431,431,431,431,431,,431,431,,,431,431,,758,,,758,,,758,758',
',758,,758,431,,431,758,431,431,431,431,431,431,431,758,431,,,,758,758',
'758,758,758,758,,,,758,758,734,734,734,734,734,734,,758,,734,734,,,',
'734,,734,734,734,734,734,734,734,,,,,,734,734,734,734,734,734,734,,',
'734,,,,,,734,734,734,734,734,734,734,734,734,734,734,,734,734,734,,734',
'734,,734,734,734,444,,,,,,,,,,,,,,,,444,444,,734,,,734,,,734,734,,734',
',734,444,,444,734,444,444,444,444,,,444,734,444,,,,734,734,734,734,734',
'734,,,,734,734,880,880,880,880,880,880,,734,,880,880,,,,880,,880,880',
'880,880,880,880,880,,,,,,880,880,880,880,880,880,880,,,880,,,,,,880',
'880,880,880,880,880,880,880,880,880,880,,880,880,880,,880,880,,880,880',
'880,447,447,447,447,447,447,447,,,447,447,,,,,,447,447,,880,,,880,,',
'880,880,,880,,880,447,,447,880,447,447,447,447,447,447,447,880,447,',
',,880,880,880,880,880,880,,,,880,880,792,792,792,792,792,792,,880,,792',
'792,,,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792',
'792,,,792,,,,,,792,792,792,792,792,792,792,792,792,792,792,,792,792',
'792,,792,792,,792,792,792,446,,,,,,,,,,,,,,,,446,446,,792,,,792,,,792',
'792,,792,,792,446,,446,792,446,446,446,446,,,446,792,446,,,,792,792',
'792,792,792,792,,,,792,792,209,209,209,209,209,209,,792,,209,209,,,',
'209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,',
'209,,,,,,209,209,209,209,209,209,209,209,209,209,209,,209,209,209,,209',
'209,,209,209,209,451,451,451,451,451,451,451,,,451,451,,,,,,451,451',
',209,,,209,,,209,209,,209,,209,451,,451,209,451,451,451,451,451,451',
'451,209,451,,,,209,209,209,209,209,209,,,,209,209,827,827,827,827,827',
'827,,209,,827,827,,,,827,,827,827,827,827,827,827,827,,,,,,827,827,827',
'827,827,827,827,,,827,,,,,,827,827,827,827,827,827,827,827,827,827,827',
',827,827,827,,827,827,,827,827,827,445,,,,,,,,,,,,,,,,445,445,,827,',
',827,,,827,827,,827,,827,445,,445,827,445,445,445,445,,,445,827,445',
',,,827,827,827,827,827,827,,,,827,827,33,33,33,33,33,33,,827,,33,33',
',,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33',
'33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,,33,33,33,450,450,450,450',
'450,450,450,,,450,450,,,,,,450,450,,33,,,33,,,33,33,,33,,33,450,,450',
'33,450,450,450,450,450,450,450,33,450,,,,33,33,33,33,33,33,,,,33,33',
'885,885,885,885,885,885,,33,,885,885,,,,885,,885,885,885,885,885,885',
'885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,885,885,885,885,885',
'885,885,885,885,885,885,,885,885,885,,885,885,,885,885,885,439,,,,,',
',,,,,,,,,,439,439,,885,,,885,,,885,885,,885,,885,439,,439,885,439,439',
'439,439,,,,885,,,,,885,885,885,885,885,885,,,,885,885,888,888,888,888',
'888,888,,885,,888,888,,,,888,,888,888,888,888,888,888,888,,,,,,888,888',
'888,888,888,888,888,,,888,,,,,,888,888,888,888,888,888,888,888,888,888',
'888,,888,888,888,,888,888,,888,888,888,440,,,,,,,,,,,,,,,,440,440,,888',
',,888,,,888,888,,888,,888,440,,440,888,440,440,440,440,,,,888,,,,,888',
'888,888,888,888,888,,,,888,888,704,704,704,704,704,704,,888,,704,704',
',,,704,,704,704,704,704,704,704,704,,,,,,704,704,704,704,704,704,704',
',,704,,,,,,704,704,704,704,704,704,704,704,704,704,704,,704,704,704',
',704,704,,704,704,704,441,,,,,,,,,,,,,,,,441,441,,704,,,704,,,704,704',
',704,,704,441,,,704,441,441,441,441,,,,704,,,,,704,704,704,704,704,704',
',,,704,704,889,889,889,889,889,889,,704,,889,889,,,,889,,889,889,889',
'889,889,889,889,,,,,,889,889,889,889,889,889,889,,,889,,,,,,889,889',
'889,889,889,889,889,889,889,889,889,,889,889,889,,889,889,,889,889,889',
',,,,,,,,,,,,,,,,,,,889,,,889,,,889,889,,889,,889,,,,889,,,,,,,,889,',
',,,889,889,889,889,889,889,,,,889,889,703,703,703,703,703,703,,889,',
'703,703,,,,703,,703,703,703,703,703,703,703,,,,,,703,703,703,703,703',
'703,703,,,703,,,,,,703,703,703,703,703,703,703,703,703,703,703,,703',
'703,703,,703,703,,703,703,703,,,,,,,,,,,,,,,,,,,,703,,,703,,,703,703',
',703,,703,,,,703,,,,,,,,703,,,,,703,703,703,703,703,703,,,,703,703,314',
'314,314,314,314,314,,703,,314,314,,,,314,,314,314,314,314,314,314,314',
',,,,,314,314,314,314,314,314,314,,,314,,,,,,314,314,314,314,314,314',
'314,314,314,314,314,,314,314,314,,314,314,,314,314,314,,,,,,,,,,,,,',
',,,,,,314,,,314,,,314,314,,314,,314,,,,314,,,,,,,,314,,,,,314,314,314',
'314,314,314,,,,314,314,779,779,779,779,779,779,,314,,779,779,,,,779',
',779,779,779,779,779,779,779,,,,,,779,779,779,779,779,779,779,,,779',
',,,,,779,779,779,779,779,779,779,779,779,779,779,,779,779,779,,779,779',
',779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,,,779,779,,779,,779,,,,779',
',,,,,,,779,,,,,779,779,779,779,779,779,,,,779,779,192,192,192,192,192',
'192,,779,,192,192,,,,192,,192,192,192,192,192,192,192,,,,,,192,192,192',
'192,192,192,192,,,192,,,,,,192,192,192,192,192,192,192,192,192,192,192',
',192,192,192,,192,192,,192,192,192,,,,,,,,,,,,,,,,,,,,192,,,192,,,192',
'192,,192,,192,,,,192,,,,,,,,192,,,,,192,192,192,192,192,192,,,,192,192',
'315,315,315,315,315,315,,192,,315,315,,,,315,,315,315,315,315,315,315',
'315,,,,,,315,315,315,315,315,315,315,,,315,,,,,,315,315,315,315,315',
'315,315,315,315,315,315,,315,315,315,,315,315,,315,315,315,,,,,,,,,',
',,,,,,,,,,315,,,315,,,315,315,,315,,315,,,,315,,,,,,,,315,,,,,315,315',
'315,315,315,315,,,,315,315,815,815,815,815,815,815,,315,,815,815,,,',
'815,,815,815,815,815,815,815,815,,,,,,815,815,815,815,815,815,815,,',
'815,,,,,,815,815,815,815,815,815,815,815,815,815,815,,815,815,815,,815',
'815,,815,815,815,,,,,,,,,,,,,,,,,,,,815,,,815,,,815,815,,815,,815,,',
',815,,,,,,,,815,,,,,815,815,815,815,815,815,,,,815,815,535,535,535,535',
'535,535,,815,,535,535,,,,535,,535,535,535,535,535,535,535,,,,,,535,535',
'535,535,535,535,535,,,535,,,,,,535,535,535,535,535,535,535,535,535,535',
'535,,535,535,535,,535,535,,535,535,535,,,,,,,,,,,,,,,,,,,,535,,,535',
',,535,535,,535,,535,,,,535,,,,,,,,535,,,,,535,535,535,535,535,535,,',
',535,535,539,539,539,539,539,539,,535,,539,539,,,,539,,539,539,539,539',
'539,539,539,,,,,,539,539,539,539,539,539,539,,,539,,,,,,539,539,539',
'539,539,539,539,539,539,539,539,,539,539,539,,539,539,,539,539,539,',
',,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,539,,539,,,,539,,,,,,,,539,,',
',,539,539,539,539,539,539,,,,539,539,544,544,544,544,544,544,,539,,544',
'544,,,,544,,544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544',
'544,,,544,,,,,,544,544,544,544,544,544,544,544,544,544,544,,544,544',
'544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,544',
',544,,,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,2,2,2',
'2,2,2,,544,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2',
'2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2',
',2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,60,60,60,,60,,,2,60,60,,',
',60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,',
'60,60,60,60,60,60,60,,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60',
',,60,,,60,60,,60,,,,,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,61',
'61,61,,61,,,60,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61',
'61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61,61',
',,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,61,,,,,,61,,,,,,,,61,,,,,61,61,61',
'61,61,61,,,,61,61,64,64,64,,64,,,61,64,64,,,,64,,64,64,64,64,64,64,64',
',,,,,64,64,64,64,64,64,64,,,64,,,,,604,,64,,,64,64,64,64,64,64,64,,64',
'64,64,,64,64,,64,64,64,604,604,604,604,604,604,604,604,604,604,604,',
'604,604,,,604,604,,64,,,64,,,64,64,,64,,,604,,604,64,604,604,604,604',
'604,604,604,64,604,,,,64,64,64,64,64,64,,,,64,64,64,604,65,65,65,64',
'65,64,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65',
',,,,,,,,,65,,,65,65,65,65,65,65,65,,65,65,65,,65,65,,853,,65,853,853',
',853,,,,,,,,,,,,,,,,65,,,65,,,65,65,,65,,65,,,,,,853,,,,,,,853,853,853',
'853,65,65,65,65,65,65,,,,65,65,429,429,429,,429,,,65,429,429,,,,429',
',429,429,429,429,429,429,429,,,,,,429,429,429,429,429,429,429,,,,,,',
',,,429,,,429,429,429,429,429,429,429,,429,429,429,,429,429,,429,429',
'429,,,,,,,,,,,,,,,,,,,,429,,,429,,,429,429,,429,,,,,,429,,,,,,,,429',
',,,,429,429,429,429,429,429,,,,429,429,428,428,428,,428,,,429,428,428',
',,,428,,428,428,428,428,428,428,428,,,,,,428,428,428,428,428,428,428',
',,,,,,,,,428,,,428,428,428,428,428,428,428,,428,428,428,,428,428,,428',
'428,428,,,,,,,,,,,,,,,,,,,,428,,,428,,,428,428,,428,,,,,,428,,,,,,,',
'428,,,,,428,428,428,428,428,428,,,,428,428,459,459,459,,459,,,428,459',
'459,,,,459,,459,459,459,459,459,459,459,,,,,,459,459,459,459,459,459',
'459,,,,,,,,,,459,,,459,459,459,459,459,459,459,459,459,459,459,,459',
'459,,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,459,,459,,459',
',459,,,,,,,,459,,,,,459,459,459,459,459,459,,,,459,459,426,426,426,',
'426,,,459,426,426,,,,426,,426,426,426,426,426,426,426,,,,,,426,426,426',
'426,426,426,426,,,,,,,,,,426,,,426,426,426,426,426,426,426,426,426,426',
'426,,426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426,,,426,426,,426',
',426,,,,426,,,,,,,,426,,,,,426,426,426,426,426,426,,,,426,426,898,898',
'898,,898,,,426,898,898,,,,898,,898,898,898,898,898,898,898,,,,,,898',
'898,898,898,898,898,898,,,,,,,,,,898,,,898,898,898,898,898,898,898,898',
'898,898,898,,898,898,,898,898,898,,,,,,,,,,,,,,,,,,,,898,,,898,,,898',
'898,,898,,898,,,,898,,,,,,,,898,,,,,898,898,898,898,898,898,,,,898,898',
'56,56,56,,56,,,898,56,56,,,,56,,56,56,56,56,56,56,56,,,,,,56,56,56,56',
'56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56',
'56,,,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,,56,,56,,,,56,,,,,,,,56,,,,,56',
'56,56,56,56,56,,,,56,56,55,55,55,,55,,,56,55,55,,,,55,,55,55,55,55,55',
'55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55,55',
',55,55,55,,55,55,,55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,55,,',
',,,55,,,,,,,,55,,,,,55,55,55,55,55,55,,,,55,55,639,639,639,,639,,,55',
'639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639,639,639,639',
'639,639,,,,,,,,,,639,,,639,639,639,639,639,639,639,639,639,639,639,',
'639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639,639,,639,,639',
',639,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,,,639,639,101,101',
'101,101,101,,,639,101,101,,,,101,,101,101,101,101,101,101,101,,,,,,101',
'101,101,101,101,101,101,,,101,,,,,,101,101,101,101,101,101,101,101,101',
'101,101,,101,101,101,,101,101,,101,101,101,,,,,,,,,,,,,,,,,,,,101,,',
'101,,,101,101,,101,,101,,,,101,,,,,,,,101,,,,,101,101,101,101,101,101',
',,,101,101,105,105,105,,105,101,,101,105,105,,,,105,,105,105,105,105',
'105,105,105,,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105',
'105,105,105,105,105,,105,105,105,,105,105,,105,105,105,,,,,,,,,,,,,',
',,,,,,105,,,105,,,105,105,,105,,,,,,105,,,,,,,,105,,,,,105,105,105,105',
'105,105,,,,105,105,106,106,106,,106,,,105,106,106,,,,106,,106,106,106',
'106,106,106,106,,,,,,106,106,106,106,106,106,106,,,106,,,,,,,106,,,106',
'106,106,106,106,106,106,,106,106,106,,106,106,,106,106,106,,,,,,,,,',
',,,,,,,,,,106,,,106,,,106,106,,106,,,,,,106,,,,,,,,106,,,,,106,106,106',
'106,106,106,,,,106,106,107,107,107,,107,,,106,107,107,,,,107,,107,107',
'107,107,107,107,107,,,,,,107,107,107,107,107,107,107,,,107,,,,,,,107',
',,107,107,107,107,107,107,107,,107,107,107,,107,107,,107,107,107,,,',
',,,,,,,,,,,,,,,,107,,,107,,,107,107,,107,,,,,,107,,,,,,,,107,,,,,107',
'107,107,107,107,107,,,,107,107,108,108,108,,108,,,107,108,108,,,,108',
',108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108',
',,,,,,108,,,108,108,108,108,108,108,108,,108,108,108,,108,108,,108,108',
'108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,108,,,,,,108,,,,,,,,108',
',,,,108,108,108,108,108,108,,,,108,108,109,109,109,109,109,,,108,109',
'109,,,,109,,109,109,109,109,109,109,109,,,,,,109,109,109,109,109,109',
'109,,,109,,,,,,109,109,109,109,109,109,109,109,109,109,109,,109,109',
'109,,109,109,,109,109,109,,,,,,,,,,,,,,,,,,,,109,,,109,,,109,109,,109',
',109,,,,109,,,,,,,,109,,,,,109,109,109,109,109,109,,,,109,109,696,696',
'696,,696,,,109,696,696,,,,696,,696,696,696,696,696,696,696,,,,,,696',
'696,696,696,696,696,696,,,,,,,,,,696,,,696,696,696,696,696,696,696,696',
'696,696,696,,696,696,,696,696,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696',
'696,,696,,696,,,,696,,,,,,,,696,,,,,696,696,696,696,696,696,,,,696,696',
'43,43,43,,43,,,696,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43',
'43,43,43,,,,,,,,,,43,,,43,43,43,43,43,43,43,,43,43,43,,43,43,,43,43',
'43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,43,,,,,,43,,,,,,,,43,,,,,43,43',
'43,43,43,43,,,,43,43,895,895,895,,895,,,43,895,895,,,,895,,895,895,895',
'895,895,895,895,,,,,,895,895,895,895,895,895,895,,,,,,,,,,895,,,895',
'895,895,895,895,895,895,,895,895,895,,895,895,,895,895,895,,,,,,,,,',
',,,,,,,,,,895,,,895,,,895,895,,895,,,,,,895,,,,,,,,895,,,,,895,895,895',
'895,895,895,,,,895,895,892,892,892,,892,,,895,892,892,,,,892,,892,892',
'892,892,892,892,892,,,,,,892,892,892,892,892,892,892,,,,,,,,,,892,,',
'892,892,892,892,892,892,892,,892,892,892,,892,892,,892,892,892,,,,,',
',,,,,,,,,,,,,,892,,,892,,,892,892,,892,,,,,,892,,,,,,,,892,,,,,892,892',
'892,892,892,892,,,,892,892,42,42,42,,42,,,892,42,42,,,,42,,42,42,42',
'42,42,42,42,,,,,,42,42,42,42,42,42,42,,,,,,,,,,42,,,42,42,42,42,42,42',
'42,,42,42,42,,42,42,,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,42',
',,,,,42,,,,,,,,42,,,,,42,42,42,42,42,42,,,,42,42,193,193,193,,193,,',
'42,193,193,,,,193,,193,193,193,193,193,193,193,,,,,,193,193,193,193',
'193,193,193,,,,,,,,,,193,,,193,193,193,193,193,193,193,,193,193,193',
',193,193,,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193,,,193,193,,193,,193',
',,,193,,,,,,,,193,,,,,193,193,193,193,193,193,,,,193,193,194,194,194',
',194,,,193,194,194,,,,194,,194,194,194,194,194,194,194,,,,,,194,194',
'194,194,194,194,194,,,,,,,,,,194,,,194,194,194,194,194,194,194,,194',
'194,194,,194,194,,194,194,194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194',
',194,,194,,,,194,,,,,,,,194,,,,,194,194,194,194,194,194,,,,194,194,195',
'195,195,,195,,,194,195,195,,,,195,,195,195,195,195,195,195,195,,,,,',
'195,195,195,195,195,195,195,,,,,,,,,,195,,,195,195,195,195,195,195,195',
',195,195,195,,195,195,,195,195,195,,,,,,,,,,,,,,,,,,,,195,,,195,,,195',
'195,,195,,,,,,195,,,,,,,,195,,,,,195,195,195,195,195,195,,,,195,195',
'196,196,196,,196,,,195,196,196,,,,196,,196,196,196,196,196,196,196,',
',,,,196,196,196,196,196,196,196,,,,,,,,,,196,,,196,196,196,196,196,196',
'196,196,196,196,196,,196,196,,196,196,196,,,,,,,,,,,,,,,,,,,,196,,,196',
',,196,196,,196,,196,,,,196,,,,,,,,196,,,,,196,196,196,196,196,196,,',
',196,196,41,41,41,,41,,,196,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41',
'41,41,41,41,41,41,,,,,,,,,,41,,,41,41,41,41,41,41,41,,41,41,41,,41,41',
',41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,41,,,,,,41,,,,,,,,41,',
',,,41,41,41,41,41,41,,,,41,41,500,500,500,,500,,,41,500,500,,,,500,',
'500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500,,,,,,,',
',,500,,,500,500,500,500,500,500,500,,500,500,500,,500,500,,500,500,500',
',,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,500,,,,,,500,,,,,,,,500,,,,',
'500,500,500,500,500,500,,,,500,500,199,199,199,,199,,,500,199,199,,',
',199,,199,199,199,199,199,199,199,,,,,,199,199,199,199,199,199,199,',
',,,,,,,,199,,,199,199,199,199,199,199,199,,199,199,199,,199,199,,199',
'199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,199,,,,,,199,,,,,,,',
'199,,,,,199,199,199,199,199,199,,,,199,199,200,200,200,,200,,,199,200',
'200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200,200,200,200',
'200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,,200,200,200,,200',
'200,,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200,,,200,200,,200,,,,,,200',
',,,,,,,200,,,,,200,200,200,200,200,200,,,,200,200,201,201,201,,201,',
',200,201,201,,,,201,,201,201,201,201,201,201,201,,,,,,201,201,201,201',
'201,201,201,,,201,,,,,,,201,,,201,201,201,201,201,201,201,,201,201,201',
',201,201,,201,201,201,,,,,,,,,,,,,,,,,,,,201,,,201,,,201,201,,201,,',
',,,201,,,,,,,,201,,,,,201,201,201,201,201,201,,,,201,201,628,628,628',
',628,,,201,628,628,,,,628,,628,628,628,628,628,628,628,,,,,,628,628',
'628,628,628,628,628,,,,,,,,,,628,,,628,628,628,628,628,628,628,,628',
'628,628,,628,628,,628,628,628,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,628',
',628,,,,,,628,,,,,,,,628,,,,,628,628,628,628,628,628,,,,628,628,499',
'499,499,,499,,,628,499,499,,,,499,,499,499,499,499,499,499,499,,,,,',
'499,499,499,499,499,499,499,,,,,,,,,,499,,,499,499,499,499,499,499,499',
',499,499,499,,499,499,,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499',
'499,,499,,,,,,499,,,,,,,,499,,,,,499,499,499,499,499,499,,,,499,499',
'737,737,737,,737,,,499,737,737,,,,737,,737,737,737,737,737,737,737,',
',,,,737,737,737,737,737,737,737,,,,,,,,,,737,,,737,737,737,737,737,737',
'737,737,737,737,737,,737,737,,737,737,737,,,,,,,,,,,,,,,,,,,,737,,,737',
',,737,737,,737,,737,,737,,737,,,,,,,,737,,,,,737,737,737,737,737,737',
',,,737,737,913,913,913,,913,,,737,913,913,,,,913,,913,913,913,913,913',
'913,913,,,,,,913,913,913,913,913,913,913,,,,,,,,,,913,,,913,913,913',
'913,913,913,913,913,913,913,913,,913,913,,913,913,913,,,,,,,,,,,,,,',
',,,,,913,,,913,,,913,913,,913,,913,,913,,913,,,,,,,,913,,,,,913,913',
'913,913,913,913,,,,913,913,35,35,35,,35,,,913,35,35,,,,35,,35,35,35',
'35,35,35,35,,,,,,35,35,35,35,35,35,35,,,,,,,,,,35,,,35,35,35,35,35,35',
'35,,35,35,35,,35,35,,560,,35,560,560,,560,,,,,,,,,,,,,,,,35,,,35,,,35',
'35,,35,,,,,,,,560,,,,,,,560,560,560,560,35,35,35,35,35,35,,,,35,35,34',
'34,34,,34,,,35,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34',
'34,34,,,,,,,,,,34,,,34,34,34,34,34,34,34,,34,34,34,,34,34,,,,34,,,,',
',,,,,,,,,,,,,,,34,,,34,,,34,34,,34,,34,,,,,,,,,,,,,,,,,34,34,34,34,34',
'34,,,,34,34,30,30,30,,30,,,34,30,30,,,,30,,30,30,30,30,30,30,30,,,,',
',30,30,30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30',
',30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,30,,30,30,,30,,30,,30,,30',
',,,,,,,30,,,,,30,30,30,30,30,30,,,,30,30,212,212,212,,212,,,30,212,212',
',,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212,212',
',,,,,,,,,212,,,212,212,212,212,212,212,212,,212,212,212,,212,212,,212',
'212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,212,,,,,,212,,,,,,,',
'212,,,,,212,212,212,212,212,212,,,,212,212,213,213,213,,213,,,212,213',
'213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213,213',
'213,,,,,,,,,,213,,,213,213,213,213,213,213,213,,213,213,213,,213,213',
',213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,213,,,,,,213,,',
',,,,,213,,,,,213,213,213,213,213,213,,,,213,213,214,214,214,,214,,,213',
'214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214',
'214,214,,,,,,,,,,214,,,214,214,214,214,214,214,214,,214,214,214,,214',
'214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,214,,,,,,214',
',,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,215,215,215,,215,',
',214,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215',
'215,215,215,,,,,,,,,,215,,,215,215,215,215,215,215,215,,215,215,215',
',215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,215,,',
',,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215,215,216,216,216',
',216,,,215,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216',
'216,216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216,216,216,,216',
'216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216',
',216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,217',
'217,217,,217,,,216,217,217,,,,217,,217,217,217,217,217,217,217,,,,,',
'217,217,217,217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217,217,217',
',217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
'218,218,218,,218,,,217,218,218,,,,218,,218,218,218,218,218,218,218,',
',,,,218,218,218,218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218,218',
'218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218',
',,218,218,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218',
'218,219,219,219,,219,,,218,219,219,,,,219,,219,219,219,219,219,219,219',
',,,,,219,219,219,219,219,219,219,,,,,,,,,,219,,,219,219,219,219,219',
'219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,',
'219,,,219,219,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,',
',,219,219,220,220,220,,220,,,219,220,220,,,,220,,220,220,220,220,220',
'220,220,,,,,,220,220,220,220,220,220,220,,,,,,,,,,220,,,220,220,220',
'220,220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,',
',,220,,,220,,,220,220,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220',
'220,,,,220,220,221,221,221,,221,,,220,221,221,,,,221,,221,221,221,221',
'221,221,221,,,,,,221,221,221,221,221,221,221,,,,,,,,,,221,,,221,221',
'221,221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,',
',,,,,,221,,,221,,,221,221,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221',
'221,221,,,,221,221,222,222,222,,222,,,221,222,222,,,,222,,222,222,222',
'222,222,222,222,,,,,,222,222,222,222,222,222,222,,,,,,,,,,222,,,222',
'222,222,222,222,222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,',
',,,,,,,,,,222,,,222,,,222,222,,222,,,,,,222,,,,,,,,222,,,,,222,222,222',
'222,222,222,,,,222,222,223,223,223,,223,,,222,223,223,,,,223,,223,223',
'223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,,,,,,,,223,,',
'223,223,223,223,223,223,223,,223,223,223,,223,223,,223,223,223,,,,,',
',,,,,,,,,,,,,,223,,,223,,,223,223,,223,,,,,,223,,,,,,,,223,,,,,223,223',
'223,223,223,223,,,,223,223,224,224,224,,224,,,223,224,224,,,,224,,224',
'224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,,,,,,,,224',
',,224,224,224,224,224,224,224,,224,224,224,,224,224,,224,224,224,,,',
',,,,,,,,,,,,,,,,224,,,224,,,224,224,,224,,,,,,224,,,,,,,,224,,,,,224',
'224,224,224,224,224,,,,224,224,225,225,225,,225,,,224,225,225,,,,225',
',225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225,,,,,,',
',,,225,,,225,225,225,225,225,225,225,,225,225,225,,225,225,,225,225',
'225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,225,,,,,,225,,,,,,,,225',
',,,,225,225,225,225,225,225,,,,225,225,226,226,226,,226,,,225,226,226',
',,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226',
',,,,,,,,,226,,,226,226,226,226,226,226,226,,226,226,226,,226,226,,226',
'226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,226,,,,,,226,,,,,,,',
'226,,,,,226,226,226,226,226,226,,,,226,226,227,227,227,,227,,,226,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,,,,,,,,227,,,227,227,227,227,227,227,227,,227,227,227,,227,227',
',227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,227,,,,,,227,,',
',,,,,227,,,,,227,227,227,227,227,227,,,,227,227,228,228,228,,228,,,227',
'228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228,228',
'228,228,,,,,,,,,,228,,,228,228,228,228,228,228,228,,228,228,228,,228',
'228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,228,,,,,,228',
',,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,229,229,229,,229,',
',228,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229',
'229,229,229,,,,,,,,,,229,,,229,229,229,229,229,229,229,,229,229,229',
',229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,229,,',
',,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230',
',230,,,229,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230',
'230,230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230,230,230,,230',
'230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230',
',230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,231',
'231,231,,231,,,230,231,231,,,,231,,231,231,231,231,231,231,231,,,,,',
'231,231,231,231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231,231,231',
',231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231',
'231,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231',
'232,232,232,,232,,,231,232,232,,,,232,,232,232,232,232,232,232,232,',
',,,,232,232,232,232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232,232',
'232,,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232',
',,232,232,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232',
'232,233,233,233,,233,,,232,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,,233,233,233,233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233',
'233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,',
'233,,,233,233,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,',
',,233,233,234,234,234,,234,,,233,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,,,,,,,,234,,,234,234,234',
'234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,',
',,234,,,234,,,234,234,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234',
'234,,,,234,234,235,235,235,,235,,,234,235,235,,,,235,,235,235,235,235',
'235,235,235,,,,,,235,235,235,235,235,235,235,,,,,,,,,,235,,,235,235',
'235,235,235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,',
',,,,,,235,,,235,,,235,235,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235',
'235,235,,,,235,235,236,236,236,,236,,,235,236,236,,,,236,,236,236,236',
'236,236,236,236,,,,,,236,236,236,236,236,236,236,,,,,,,,,,236,,,236',
'236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,',
',,,,,,,,,,236,,,236,,,236,236,,236,,,,,,236,,,,,,,,236,,,,,236,236,236',
'236,236,236,,,,236,236,237,237,237,,237,,,236,237,237,,,,237,,237,237',
'237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,,,,,,,,237,,',
'237,237,237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,',
',,,,,,,,,,,,,,237,,,237,,,237,237,,237,,,,,,237,,,,,,,,237,,,,,237,237',
'237,237,237,237,,,,237,237,238,238,238,,238,,,237,238,238,,,,238,,238',
'238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,,,,,,,,238',
',,238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,',
',,,,,,,,,,,,,,,,238,,,238,,,238,238,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,777,777,777,,777,,,238,777,777,,,,777',
',777,777,777,777,777,777,777,,,,,,777,777,777,777,777,777,777,,,777',
',,,,,,777,,,777,777,777,777,777,777,777,,777,777,777,,777,777,,777,777',
'777,,,,,,,,,,,,,,,,,,,,777,,,777,,,777,777,,777,,,,,,777,,,,,,,,777',
',,,,777,777,777,777,777,777,,,,777,777,614,614,614,,614,,,777,614,614',
',,,614,,614,614,614,614,614,614,614,,,,,,614,614,614,614,614,614,614',
',,,,,,,,,614,,,614,614,614,614,614,614,614,,614,614,614,,614,614,,614',
'614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,614,,,,,,614,,,,,,,',
'614,,,,,614,614,614,614,614,614,,,,614,614,883,883,883,,883,,,614,883',
'883,,,,883,,883,883,883,883,883,883,883,,,,,,883,883,883,883,883,883',
'883,,,,,,,,,,883,,,883,883,883,883,883,883,883,,883,883,883,,883,883',
',883,883,883,,,,,,,,,,,,,,,,,,,,883,,,883,,,883,883,,883,,,,,,883,,',
',,,,,883,,,,,883,883,883,883,883,883,,,,883,883,246,246,246,,246,,,883',
'246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246',
'246,246,,,,,,,,,,246,,,246,246,246,246,246,246,246,,246,246,246,,246',
'246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,246,,,,,,246',
',,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,248,248,248,,248,',
',246,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248',
'248,248,248,,,,,,,,,,248,,,248,248,248,248,248,248,248,,248,248,248',
',248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,248,,',
',,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,492,492,492',
',492,,,248,492,492,,,,492,,492,492,492,492,492,492,492,,,,,,492,492',
'492,492,492,492,492,,,,,,,,,,492,,,492,492,492,492,492,492,492,492,492',
'492,492,,492,492,,492,492,492,,,,,,,,,,,,,,,,,,,,492,,,492,,,492,492',
',492,,492,,,,492,,,,,,,,492,,,,,492,492,492,492,492,492,,,,492,492,254',
'254,254,,254,,,492,254,254,,,,254,,254,254,254,254,254,254,254,,,,,',
'254,254,254,254,254,254,254,,,,,,,,,,254,,,254,254,254,254,254,254,254',
',254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254',
'254,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254',
'505,505,505,,505,,,254,505,505,,,,505,,505,505,505,505,505,505,505,',
',,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505,505,505,505',
'505,505,,505,505,505,,505,505,,505,505,505,,,,,,,,,,,,,,,,,,,,505,,',
'505,,,505,505,,505,,,,,,505,,,,,,,,505,,,,,505,505,505,505,505,505,',
',,505,505,27,27,27,,27,,,505,27,27,,,,27,,27,27,27,27,27,27,27,,,,,',
'27,27,27,27,27,27,27,,,,,,,,,,27,,,27,27,27,27,27,27,27,27,27,27,27',
',27,27,,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,,27,,27,,27,,27',
',,,,,,,27,,,,,27,27,27,27,27,27,,,,27,27,26,26,26,,26,,,27,26,26,,,',
'26,,26,26,26,26,26,26,26,,,,,,26,26,26,26,26,26,26,,,,,,,,,,26,,,26',
'26,26,26,26,26,26,26,26,26,26,,26,26,,26,26,26,,,,,,,,,,,,,,,,,,,,26',
',,26,,,26,26,,26,,26,,26,,26,,,,,,,,26,,,,,26,26,26,26,26,26,,,,26,26',
'260,260,260,,260,,,26,260,260,,,,260,,260,260,260,260,260,260,260,,',
',,,260,260,260,260,260,260,260,,,,,,,,,,260,,,260,260,260,260,260,260',
'260,260,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260',
',,260,260,,260,,260,,260,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,610,610,610,,610,,,260,610,610,,,,610,,610,610,610,610,610',
'610,610,,,,,,610,610,610,610,610,610,610,,,,,,,,,,610,,,610,610,610',
'610,610,610,610,,610,610,610,,610,610,,610,610,610,,,,,,,,,,,,,,,,,',
',,610,,,610,,,610,610,,610,,,,,,610,,,,,,,,610,,,,,610,610,610,610,610',
'610,,,,610,610,266,266,266,,266,,,610,266,266,,,,266,,266,266,266,266',
'266,266,266,,,,,,266,266,266,266,266,266,266,,,,,,,,,,266,,,266,266',
'266,266,266,266,266,266,266,266,266,,266,266,,266,266,266,,,,,,,,,,',
',,,,,,,,,266,,,266,,,266,266,,266,,266,,266,,266,,,,,,,,266,,,,,266',
'266,266,266,266,266,,,,266,266,269,269,269,,269,,,266,269,269,,,,269',
',269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269,,,,,,',
',,,269,,,269,269,269,269,269,269,269,269,269,269,269,,269,269,,269,269',
'269,,,,,,,,,,,,,,,,,,,,269,,,269,,269,269,269,,269,,269,,269,,269,,',
',,,,,269,,,,,269,269,269,269,269,269,,,,269,269,607,607,607,,607,,,269',
'607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607,607,607',
'607,607,,,,,,,,,,607,,,607,607,607,607,607,607,607,,607,607,607,,607',
'607,,,,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,607,,607,,,,,,,,',
',,607,,,,,,607,607,607,607,607,607,,,,607,607,25,25,25,,25,,,607,25',
'25,,,,25,,25,25,25,25,25,25,25,,,,,,25,25,25,25,25,25,25,,,,,,,,,,25',
',,25,25,25,25,25,25,25,25,25,25,25,,25,25,,25,25,25,,,,,,,,,,,,,,,,',
',,,25,,,25,,,25,25,,25,,25,,25,,25,,,,,,,,25,,,,,25,25,25,25,25,25,',
',,25,25,605,605,605,,605,,,25,605,605,,,,605,,605,605,605,605,605,605',
'605,,,,,,605,605,605,605,605,605,605,,,,,,,,,,605,,,605,605,605,605',
'605,605,605,,605,605,605,,605,605,,605,605,605,,,,,,,,,,,,,,,,,,,,605',
',,605,,,605,605,,605,,,,,,605,,,,,,,,605,,,,,605,605,605,605,605,605',
',,,605,605,740,740,740,,740,,,605,740,740,,,,740,,740,740,740,740,740',
'740,740,,,,,,740,740,740,740,740,740,740,,,,,,,,,,740,,,740,740,740',
'740,740,740,740,740,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,,',
',,,,,740,,,740,,,740,740,,740,,740,,740,,740,,,,,,,,740,,,,,740,740',
'740,740,740,740,,,,740,740,863,863,863,,863,,,740,863,863,,,,863,,863',
'863,863,863,863,863,863,,,,,,863,863,863,863,863,863,863,,,,,,,,,,863',
',,863,863,863,863,863,863,863,863,863,863,863,,863,863,,863,863,863',
',,,,,,,,,,,,,,,,,,,863,,,863,,,863,863,,863,,863,,863,,863,,,,,,,,863',
',,,,863,863,863,863,863,863,,,,863,863,275,275,275,,275,,,863,275,275',
',,,275,,275,275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275',
',,,,,,,,,275,,,275,275,275,275,275,275,275,,275,275,275,,275,275,,,',
'275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,275,,,,,,,,,,,,,,,,,,,275',
'275,275,275,275,275,,,,275,275,691,691,691,,691,,,275,691,691,,,,691',
',691,691,691,691,691,691,691,,,,,,691,691,691,691,691,691,691,,,691',
',,,,,,691,,,691,691,691,691,691,691,691,,691,691,691,,691,691,,691,691',
'691,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,691,,691,,,,,,691,,,,,,,,691',
',,,,691,691,691,691,691,691,,,,691,691,511,511,511,,511,,,691,511,511',
',,,511,,511,511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511',
',,,,,,,,,511,,,511,511,511,511,511,511,511,,511,511,511,,511,511,,511',
'511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,511,,511,,,,511,,,,',
',,,511,,,,,511,511,511,511,511,511,,,,511,511,21,21,21,,21,,,511,21',
'21,,,,21,,21,21,21,21,21,21,21,,,,,,21,21,21,21,21,21,21,,,,,,,,,,21',
',,21,21,21,21,21,21,21,,21,21,21,,21,21,,21,21,21,,,,,,,,,,,,,,,,,,',
',21,,,21,,,21,21,,21,,,,,,21,,,,,,,,21,,,,,21,21,21,21,21,21,,,,21,21',
'57,57,57,,57,,,21,57,57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57',
'57,57,57,,,,,,,,,,57,,,57,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57',
'57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,57,,57,,,,,,57,,,,,,,,57,,,,,57,57',
'57,57,57,57,,,,57,57,20,20,20,,20,,,57,20,20,,,,20,,20,20,20,20,20,20',
'20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,,20',
'20,20,,20,20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,20,,,,,,20',
',,,,,,,20,,,,,20,20,20,20,20,20,,,,20,20,742,742,742,,742,,,20,742,742',
',,,742,,742,742,742,742,742,742,742,,,,,,742,742,742,742,742,742,742',
',,,,,,,,,742,,,742,742,742,742,742,742,742,742,742,742,742,,742,742',
',742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,742,,742,,742,',
'742,,,,,,,,742,,,,,742,742,742,742,742,742,,,,742,742,598,598,598,,598',
',,742,598,598,,,,598,,598,598,598,598,598,598,598,,,,,,598,598,598,598',
'598,598,598,,,,,,,,,,598,,,598,598,598,598,598,598,598,,598,598,598',
',598,598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,598,,',
',,,598,,,,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,402,402,402',
',402,,,598,402,402,,,,402,,402,402,402,402,402,402,402,,,,,,402,402',
'402,402,402,402,402,,,,,,,,,,402,,,402,402,402,402,402,402,402,,402',
'402,402,,402,402,,402,402,402,,,,,,,,,,,,,,,,,,,,402,,,402,,,402,402',
',402,,,,,,402,,,,,,,,402,,,,,402,402,402,402,402,402,,,,402,402,595',
'595,595,,595,,,402,595,595,,,,595,,595,595,595,595,595,595,595,,,,,',
'595,595,595,595,595,595,595,,,,,,,,,,595,,,595,595,595,595,595,595,595',
',595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595',
'595,,595,,,,,,595,,,,,,,,595,,,,,595,595,595,595,595,595,,,,595,595',
'716,716,716,,716,,,595,716,716,,,,716,,716,716,716,716,716,716,716,',
',,,,716,716,716,716,716,716,716,,,,,,,,,,716,,,716,716,716,716,716,716',
'716,,716,716,716,,716,716,,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716',
',,716,716,,716,,,,,,716,,,,,,,,716,,,,,716,716,716,716,716,716,,,,716',
'716,590,590,590,,590,,,716,590,590,,,,590,,590,590,590,590,590,590,590',
',,,,,590,590,590,590,590,590,590,,,,,,,,,,590,,,590,590,590,590,590',
'590,590,,590,590,590,,590,590,,590,590,590,,,,,,,,,,,,,,,,,,,,590,,',
'590,,,590,590,,590,,,,,,590,,,,,,,,590,,,,,590,590,590,590,590,590,',
',,590,590,655,655,655,,655,,,590,655,655,,,,655,,655,655,655,655,655',
'655,655,,,,,,655,655,655,655,655,655,655,,,,,,,,,,655,,,655,655,655',
'655,655,655,655,,655,655,655,,655,655,,655,655,655,,,,,,,,,,,,,,,,,',
',,655,,,655,,,655,655,,655,,655,,,,655,,,,,,,,655,,,,,655,655,655,655',
'655,655,,,,655,655,843,843,843,,843,,,655,843,843,,,,843,,843,843,843',
'843,843,843,843,,,,,,843,843,843,843,843,843,843,,,,,,,,,,843,,,843',
'843,843,843,843,843,843,,843,843,843,,843,843,,843,843,843,,,,,,,,,',
',,,,,,,,,,843,,,843,,,843,843,,843,,843,,,,843,,,,,,,,843,,,,,843,843',
'843,843,843,843,,,,843,843,589,589,589,,589,,,843,589,589,,,,589,,589',
'589,589,589,589,589,589,,,,,,589,589,589,589,589,589,589,,,,,,,,,,589',
',,589,589,589,589,589,589,589,,589,589,589,,589,589,,589,589,589,,,',
',,,,,,,,,,,,,,,,589,,,589,,,589,589,,589,,,,,,589,,,,,,,,589,,,,,589',
'589,589,589,589,589,,,,589,589,785,785,785,,785,,,589,785,785,,,,785',
',785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,,,,,',
',,,785,,,785,785,785,785,785,785,785,,785,785,785,,785,785,,785,785',
'785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,785,,,,,,785,,,,,,,,785',
',,,,785,785,785,785,785,785,,,,785,785,296,296,296,,296,,,785,296,296',
',,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296',
',,,,,,,,,296,,,296,296,296,296,296,296,296,,296,296,296,,296,296,,296',
'296,296,,,,,,,,,,,,,,,,,,,,296,,,296,296,,296,296,,296,,,,,,296,,,,',
',,,296,,,,,296,296,296,296,296,296,,,,296,296,475,475,475,,475,,,296',
'475,475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475,475,475,475',
'475,475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475,475,475,475',
',475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475,475,,475,,475',
',475,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475,475,586,586',
'586,,586,,,475,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586',
'586,586,586,586,586,586,,,,,,,,,,586,,,586,586,586,586,586,586,586,',
'586,586,586,,586,586,,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586',
'586,,586,,586,,,,586,,,,,,,,586,,,,,586,586,586,586,586,586,,,,586,586',
'831,831,831,,831,,,586,831,831,,,,831,,831,831,831,831,831,831,831,',
',,,,831,831,831,831,831,831,831,,,,,,,,,,831,,,831,831,831,831,831,831',
'831,,831,831,831,,831,831,,,,831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831',
'831,,831,,,,,,,,,,,,,,,,,,,831,831,831,831,831,831,,,,831,831,585,585',
'585,,585,,,831,585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585',
'585,585,585,585,585,585,,,,,,,,,,585,,,585,585,585,585,585,585,585,',
'585,585,585,,585,585,,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585,,,585',
'585,,585,,,,,,585,,,,,,,,585,,,,,585,585,585,585,585,585,,,,585,585',
'717,717,717,,717,,,585,717,717,,,,717,,717,717,717,717,717,717,717,',
',,,,717,717,717,717,717,717,717,,,,,,,,,,717,,,717,717,717,717,717,717',
'717,,717,717,717,,717,717,,717,717,717,,,,,,,,,,,,,,,,,,,,717,,,717',
',,717,717,,717,,,,,,717,,,,,,,,717,,,,,717,717,717,717,717,717,,,,717',
'717,304,304,304,,304,,,717,304,304,,,,304,,304,304,304,304,304,304,304',
',,,,,304,304,304,304,304,304,304,,,,,,,,,,304,,,304,304,304,304,304',
'304,304,,304,304,304,,304,304,,304,304,304,,,,,,,,,,,,,,,,,,,,304,,',
'304,,,304,304,,304,,,,,,304,,,,,,,,304,,,,,304,304,304,304,304,304,',
',,304,304,927,927,927,,927,,,304,927,927,,,,927,,927,927,927,927,927',
'927,927,,,,,,927,927,927,927,927,927,927,,,,,,,,,,927,,,927,927,927',
'927,927,927,927,,927,927,927,,927,927,,927,927,927,,,,,,,,,,,,,,,,,',
',,927,,,927,,,927,927,,927,,,,,,927,,,,,,,,927,,,,,927,927,927,927,927',
'927,,,,927,927,514,514,514,,514,,,927,514,514,,,,514,,514,514,514,514',
'514,514,514,,,,,,514,514,514,514,514,514,514,,,,,,,,,,514,,,514,514',
'514,514,514,514,514,514,514,514,514,,514,514,,514,514,514,,,,,,,,,,',
',,,,,,,,,514,,,514,,,514,514,,514,,,,,,514,,,,,,,,514,,,,470,514,514',
'514,514,514,514,470,470,470,514,514,470,470,470,,470,,,514,,,,,,,470',
',,,,,,,,,470,470,,470,470,470,470,470,,,,,900,900,,,900,,,,,,,,,900',
'900,,900,900,900,900,,900,900,,,900,,,,470,900,900,900,900,,,470,,,',
',470,470,,,,900,900,,900,900,900,900,900,900,900,900,900,,900,,,900',
'470,,,,,,,,517,517,517,,517,470,,470,517,517,470,,,517,,517,517,517',
'517,517,517,517,,,,,,517,517,517,517,517,517,517,,,,,,,,,,517,,,517',
'517,517,517,517,517,517,,517,517,517,,517,517,,517,517,517,,,,,,,,,',
',,,,,,,,,,517,,,517,,,517,517,,517,,,,,,517,,,,,,,,517,,,,,517,517,517',
'517,517,517,,,,517,517,729,729,729,,729,,,517,729,729,,,,729,,729,729',
'729,729,729,729,729,,,,,,729,729,729,729,729,729,729,,,,,,,,,,729,,',
'729,729,729,729,729,729,729,,729,729,729,,729,729,,729,729,729,,,,,',
',,,,,,,,,,,,,,729,,,729,,,729,729,,729,,,,,,729,,,,,,,,729,,,,467,729',
'729,729,729,729,729,467,467,467,729,729,467,467,467,,467,,,729,,,,,',
',467,,,,,,,,,,467,467,,467,467,467,467,467,,,,,899,899,,,899,,,,,,,',
',899,899,,899,899,899,899,,899,899,,,899,,,,467,899,899,899,899,,,467',
',,,,467,467,,,,899,899,,899,899,899,899,899,899,899,899,899,,899,,,899',
'467,,,,,,,,8,8,8,8,8,467,,467,8,8,467,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8',
'8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,',
',,,,,,,,,8,,,8,,,8,8,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,564',
'564,564,,564,,,8,564,564,,,,564,,564,564,564,564,564,564,564,,,,,,564',
'564,564,564,564,564,564,,,564,,,,,,,564,,,564,564,564,564,564,564,564',
',564,564,564,,564,564,,564,564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564',
'564,,564,,,,,,564,,,,,,,,564,,,,,564,564,564,564,564,564,,,,564,564',
'558,558,558,,558,,,564,558,558,,,,558,,558,558,558,558,558,558,558,',
',,,,558,558,558,558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558',
'558,558,,558,558,558,,558,558,,558,558,558,,,,,,,,,,,,,,,,,,,,558,,',
'558,,,558,558,,558,,,,,,558,,,,,,,,558,,,,,558,558,558,558,558,558,',
',,558,558,820,820,820,,820,,,558,820,820,,,,820,,820,820,820,820,820',
'820,820,,,,,,820,820,820,820,820,820,820,,,,,,,,,,820,,,820,820,820',
'820,820,820,820,,820,820,820,,820,820,,820,820,820,,,,,,,,,,,,,,,,,',
',,820,,,820,,,820,820,,820,,,,,,820,,,,,,,,820,,,,,820,820,820,820,820',
'820,,,,820,820,818,818,818,,818,,,820,818,818,,,,818,,818,818,818,818',
'818,818,818,,,,,,818,818,818,818,818,818,818,,,,,,,,,,818,,,818,818',
'818,818,818,818,818,,818,818,818,,818,818,,818,818,818,,,,,,,,,,,,,',
',,,,,,818,,,818,,,818,818,,818,,,,,,818,,,,,,,,818,,,,,818,818,818,818',
'818,818,,,,818,818,658,658,658,,658,,,818,658,658,,,,658,,658,658,658',
'658,658,658,658,,,,,,658,658,658,658,658,658,658,,,,,,,,,,658,,,658',
'658,658,658,658,658,658,,658,658,658,,658,658,,658,658,658,,,,,,,,,',
',,,,,,,,,,658,,,658,,,658,658,,658,,,,,,658,,,,,,,,658,,,,,658,658,658',
'658,658,658,,,,658,658,813,813,813,,813,,,658,813,813,,,,813,,813,813',
'813,813,813,813,813,,,,,,813,813,813,813,813,813,813,,,,,,,,,,813,,',
'813,813,813,813,813,813,813,,813,813,813,,813,813,,813,813,813,,,,,',
',,,,,,,,,,,,,,813,,,813,,,813,813,,813,,,,,,813,,,,,,,,813,,,,,813,813',
'813,813,813,813,,,,813,813,809,809,809,,809,,,813,809,809,,,,809,,809',
'809,809,809,809,809,809,,,,,,809,809,809,809,809,809,809,,,,,,,,,,809',
',,809,809,809,809,809,809,809,,809,809,809,,809,809,,809,809,809,,,',
',,,,,,,,,,,,,,,,809,,,809,,,809,809,,809,,,,,,809,,,,,,,,809,,,,,809',
'809,809,809,809,809,,,,809,809,728,728,728,,728,,,809,728,728,,,,728',
',728,728,728,728,728,728,728,,,,,,728,728,728,728,728,728,728,,,,,,',
',,,728,,,728,728,728,728,728,728,728,,728,728,728,,728,728,,728,728',
'728,,,,,,,,,,,,,,,,,,,,728,,,728,,,728,728,,728,,,,,,728,,,,,,,,728',
',,,,728,728,728,728,728,728,,,,728,728,727,727,727,,727,,,728,727,727',
',,,727,,727,727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727',
',,,,,,,,,727,,,727,727,727,727,727,727,727,,727,727,727,,727,727,,727',
'727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,727,,,,,,727,,,,,,,',
'727,,,,,727,727,727,727,727,727,,,,727,727,532,532,532,,532,,,727,532',
'532,,,,532,,532,532,532,532,532,532,532,,,,,,532,532,532,532,532,532',
'532,,,,,,,,,,532,,,532,532,532,532,532,532,532,,532,532,532,,532,532',
',532,532,532,,,,,,,,,,,,,,,,,,,,532,,,532,,,532,532,,532,,,,,,532,,',
',,,,,532,,,,,532,532,532,532,532,532,,,,532,532,465,465,465,,465,,,532',
'465,465,,,,465,,465,465,465,465,465,465,465,,,,,,465,465,465,465,465',
'465,465,,,,,,,,,,465,,,465,465,465,465,465,465,465,,465,465,465,,465',
'465,,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,465,,,,,,465',
',,,,,,,465,,,,,465,465,465,465,465,465,,,,465,465,337,337,337,,337,',
',465,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337,337,337,337',
'337,337,337,,,337,,,,,,,337,,,337,337,337,337,337,337,337,,337,337,337',
',337,337,,337,337,337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,337,,337,,',
',,,337,,,,,,,,337,,,,,337,337,337,337,337,337,,,,337,337,338,338,338',
',338,,,337,338,338,,,,338,,338,338,338,338,338,338,338,,,,,,338,338',
'338,338,338,338,338,,,338,,,,,,,338,,,338,338,338,338,338,338,338,,338',
'338,338,,338,338,,338,338,338,,,,,,,,,,,,,,,,,,,,338,,,338,,,338,338',
',338,,,,,,338,,,,,,,,338,,,,,338,338,338,338,338,338,,,,338,338,685',
'685,685,,685,,,338,685,685,,,,685,,685,685,685,685,685,685,685,,,,,',
'685,685,685,685,685,685,685,,,,,,,,,,685,,,685,685,685,685,685,685,685',
',685,685,685,,685,685,,685,685,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685',
'685,,685,,685,,,,685,,,,,,,,685,,,,,685,685,685,685,685,685,,,,685,685',
'462,462,462,,462,,,685,462,462,,,,462,,462,462,462,462,462,462,462,',
',,,,462,462,462,462,462,462,462,,,,,,,,,,462,,,462,462,462,462,462,462',
'462,462,462,462,462,,462,462,,462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462',
',,462,462,,462,,462,,462,,462,,,,,,,,462,,,,,462,462,462,462,462,462',
',,,462,462,546,546,546,,546,,,462,546,546,,,,546,,546,546,546,546,546',
'546,546,,,,,,546,546,546,546,546,546,546,,,,,,,,,,546,,,546,546,546',
'546,546,546,546,546,546,546,546,,546,546,,546,546,546,,,,,,,,,,,,,,',
',,,,,546,,,546,,,546,546,,546,,546,,,,546,,,,,,,,546,,,,,546,546,546',
'546,546,546,,,,546,546,351,351,351,,351,,,546,351,351,,,,351,,351,351',
'351,351,351,351,351,,,,,,351,351,351,351,351,351,351,,,,,,,,,,351,,',
'351,351,351,351,351,351,351,,351,351,351,,351,351,,,,351,,,,,,,,,,,',
',,,,,,,,351,,,351,,,351,351,,351,,,,,,,,,,,,,,,,,,,351,351,351,351,351',
'351,,,,351,351,349,349,349,,349,,,351,349,349,,,,349,,349,349,349,349',
'349,349,349,,,,,,349,349,349,349,349,349,349,,,,,,,,,,349,,,349,349',
'349,349,349,349,349,,349,349,349,,349,349,,,,349,,,,,,,,,,,,,,,,,,,',
'349,,,349,,,349,349,,349,,,,,,,,,,,,,,,,,,,349,349,349,349,349,349,',
',,349,349,793,793,793,,793,,,349,793,793,,,,793,,793,793,793,793,793',
'793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,,793,,,793,793,793',
'793,793,793,793,,793,793,793,,793,793,,793,793,793,,,,,,,,,,,,,,,,,',
',,793,,,793,,,793,793,,793,,,,,,793,,,,,,,,793,,,,,793,793,793,793,793',
'793,,,,793,793,411,411,411,,411,,,793,411,411,,,,411,,411,411,411,411',
'411,411,411,,,,,,411,411,411,411,411,411,411,,,,,,,,399,,411,,,411,411',
'411,411,411,411,411,411,411,411,411,,411,411,,411,411,411,399,399,399',
'399,399,399,399,399,399,399,399,,399,399,,,399,399,,411,,,411,411,,411',
'411,,411,,411,399,411,399,411,399,399,399,399,399,399,399,411,399,,',
',411,411,411,411,411,411,,,,411,411,,399,,399,,,,411,9,9,9,9,9,9,9,9',
',,9,9,9,9,9,,,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,,9,,,,,,,,,9,9,,9,9,9,9,,9,9,,,9,,,,,9,9,9,9,,,,,,,,,,,,,9',
'9,,9,9,9,9,9,9,9,9,9,,9,,,9,9,10,10,10,10,10,10,10,10,,9,10,10,10,10',
'10,,,10,10,10,10,10,10,10,,,,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,,,10,,,,,,,,,10,10,,10,10,10,10,,10,10',
',,10,,,,,10,10,10,10,,,,,,,,,,,,,10,10,,10,10,10,10,10,10,10,10,10,',
'10,,,10,10,390,390,390,390,390,390,390,390,,10,390,390,390,390,390,',
',390,390,390,390,390,390,390,,,,390,390,390,390,390,390,390,390,390',
'390,390,390,390,390,390,390,390,390,390,390,390,390,390,,,390,,,,,,',
',,390,390,,390,390,390,390,,390,390,,,390,,,,,390,390,390,390,,,,,,',
',,,,,,390,390,,390,390,390,390,390,390,390,390,390,,390,,,390,390,582',
'582,582,582,582,582,582,582,,390,582,582,582,582,582,,,582,582,582,582',
'582,582,582,,,,582,582,582,582,582,582,582,582,582,582,582,582,582,582',
'582,582,582,582,582,582,582,582,582,,,582,,,,,,,,,582,582,,582,582,582',
'582,,582,582,,,582,,,,,582,582,582,582,,,,,,,,,,,,,582,582,,582,582',
'582,582,582,582,582,582,582,,582,,,582,582,68,68,68,68,68,68,68,68,',
'582,68,68,68,68,68,,,68,68,68,68,68,68,68,,,,68,68,68,68,68,68,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,,68,,,,,,,68,68',
',68,68,68,68,,68,68,,,68,,,,,68,68,68,68,,,,,,68,,,,,,,68,68,,68,68',
'68,68,68,68,68,68,68,,68,,,68,82,82,82,82,82,82,82,82,,,82,82,82,82',
'82,,,82,82,82,82,82,82,82,,,,82,82,82,82,82,82,82,82,82,82,82,82,82',
'82,82,82,82,82,82,82,82,82,82,82,82,82,,82,,,,,,,82,82,,82,82,82,82',
',82,82,,,82,,,,,82,82,82,82,,,,,,,,,,,,,82,82,,82,82,82,82,82,82,82',
'82,82,,82,,,82,705,705,705,705,705,705,705,705,,,705,705,705,705,705',
',,705,705,705,705,705,705,705,,,,705,705,705,705,705,705,705,705,705',
'705,705,705,705,705,705,705,705,705,705,705,705,705,705,,,705,,,,,,',
',,705,705,,705,705,705,705,,705,705,,,705,,,,,705,705,705,705,,,,,,',
',,,,,,705,705,,705,705,705,705,705,705,705,705,705,,705,638,638,705',
',638,,,,,,,,,638,638,,638,638,638,638,,638,638,,,638,,,,,638,638,638',
'638,,,,,,,,,,,,,638,638,,638,638,638,638,638,638,638,638,638,,638,425',
'425,638,,425,,,,,,,,,425,425,,425,425,425,425,,425,425,,,425,,,,,425',
'425,425,425,,,,,,,,,,,,,425,425,,425,425,425,425,425,425,425,425,425',
',425,424,424,425,,424,,,,,,,,,424,424,,424,424,424,424,,424,424,,,424',
',,,,424,424,424,424,,,,,,,,,,,,,424,424,,424,424,424,424,424,424,424',
'424,424,,424,695,695,424,,695,,,,,,,,,695,695,,695,695,695,695,,695',
'695,,,695,,,,,695,695,695,695,,,,,,,,,,,,,695,695,,695,695,695,695,695',
'695,695,695,695,,695,503,503,695,,503,,,,,,,,,503,503,,503,503,503,503',
',503,503,,,503,,,,,503,503,503,503,,,,,,,,,,,,,503,503,,503,503,503',
'503,503,503,503,503,503,,503,494,494,503,,494,,,,,,,,,494,494,,494,494',
'494,494,,494,494,,,494,,,,,494,494,494,494,,,,,,,,,,,,,494,494,,494',
'494,494,494,494,494,494,494,494,,494,493,493,494,,493,,,,,,,,,493,493',
',493,493,493,493,,493,493,,,493,,,,,493,493,493,493,,,,,,,,,,,,,493',
'493,,493,493,493,493,493,493,493,493,493,,493,637,637,493,,637,,,,,',
',,,637,637,,637,637,637,637,,637,637,,,637,,,,,637,637,637,637,,,,,',
',,,,,,,637,637,,637,637,637,637,637,637,637,637,637,,637,697,697,637',
',697,,,,,,,,,697,697,,697,697,697,697,,697,697,,,697,,,,,697,697,697',
'697,,,,,,,,,,,,,697,697,,697,697,697,697,697,697,697,697,697,,697,197',
'197,697,,197,,,,,,,,,197,197,,197,197,197,197,,197,197,,,197,,,,,197',
'197,197,197,,,,,,,,,,,,,197,197,,197,197,197,197,197,197,197,197,197',
',197,198,198,197,,198,,,,,,,,,198,198,,198,198,198,198,,198,198,,,198',
',,,,198,198,198,198,,,,,,,,,,,,,198,198,,198,198,198,198,198,198,198',
'198,198,,198,548,548,198,,548,,,,,,,,,548,548,,548,548,548,548,,548',
'548,,,548,,,,,548,548,548,548,,,,,,,,,,,,,548,548,,548,548,548,548,548',
'548,548,548,548,,548,257,257,548,,257,,,,,,,,,257,257,,257,257,257,257',
',257,257,,,257,,,,,257,257,257,257,,,,,,,,,,,,,257,257,,257,257,257',
'257,257,257,257,257,257,,257,258,258,257,,258,,,,,,,,,258,258,,258,258',
'258,258,,258,258,,,258,,,,,258,258,258,258,,,,,,,,,,,,,258,258,,258',
'258,258,258,258,258,258,258,258,,258,547,547,258,,547,,,,,,,,,547,547',
',547,547,547,547,,547,547,,,547,,,,,547,547,547,547,,,,,,,,,,,,,547',
'547,,547,547,547,547,547,547,547,547,547,,547,502,502,547,,502,,,,,',
',,,502,502,,502,502,502,502,,502,502,,,502,,,,,502,502,502,502,,,,,',
',,,,,,,502,502,,502,502,502,502,502,502,502,502,502,,502,,,502,857,857',
'857,857,857,857,857,857,857,857,857,,857,857,,,857,857,,,,,,,,,,,,,',
'857,,857,,857,857,857,857,857,857,857,,857,,,,,,,,,,,,,,,,857,,857,625',
'625,625,625,625,625,625,625,625,625,625,,625,625,,,625,625,,,,625,,',
',,,,,,,625,,625,,625,625,625,625,625,625,625,,625,,,,,,,,,,,,,,,,625',
',625,456,456,456,456,456,456,456,456,456,456,456,,456,456,,,456,456',
',,,,,,,,,,,,,456,,456,,456,456,456,456,456,456,456,,456,,726,726,726',
'726,726,726,726,726,726,726,726,,726,726,456,456,726,726,,,,,,,,,,,',
',,726,,726,,726,726,726,726,726,726,726,,726,714,714,714,714,714,714',
'714,714,714,714,714,,714,714,,726,714,714,,,,,,,,,,,,,,714,,714,,714',
'714,714,714,714,714,714,,714,721,721,721,721,721,721,721,721,721,721',
'721,,721,721,,714,721,721,,,,,,,,,,,,,,721,,721,,721,721,721,721,721',
'721,721,,721,724,724,724,724,724,724,724,724,724,724,724,,724,724,,721',
'724,724,,,,,,,,,,,,,,724,,724,,724,724,724,724,724,724,724,,724,719',
'719,719,719,719,719,719,719,719,719,719,,719,719,,724,719,719,,,,,,',
',,,,,,,719,,719,,719,719,719,719,719,719,719,,719,808,808,808,808,808',
'808,808,808,808,808,808,,808,808,,719,808,808,,,,,,,,,,,,,,808,,808',
',808,808,808,808,808,808,808,,808,22,22,22,22,22,22,22,22,22,22,22,',
'22,22,,808,22,22,,,,,,,,,,,,,,22,,22,,22,22,22,22,22,22,22,,22,515,515',
'515,515,515,515,515,515,515,515,515,,515,515,,22,515,515,,,,,,,,,,,',
',,515,,515,,515,515,515,515,515,515,515,,515,407,407,407,407,407,407',
'407,407,407,407,407,,407,407,515,515,407,407,,,,,,,,,,,,,,407,,407,',
'407,407,407,407,407,407,407,,407,731,731,731,731,731,731,731,731,731',
'731,731,,731,731,,407,731,731,,,,,,,,,,,,,,731,,731,,731,731,731,731',
'731,731,731,,731,504,504,504,504,504,504,504,504,504,504,504,,504,504',
',731,504,504,,,,,,,,,,,,,,504,,504,,504,504,504,504,504,504,504,,504',
'421,421,421,421,421,421,421,421,421,421,421,,421,421,,504,421,421,,',
',,,,,,,,,,,421,,421,,421,421,421,421,421,421,421,,421,650,650,650,650',
'650,650,650,650,650,650,650,,650,650,,421,650,650,,,,,,,,,,,,,,650,',
'650,,650,650,650,650,650,650,650,,650,764,764,764,764,764,764,764,764',
'764,764,764,,764,764,,650,764,764,,,,,,,,,,,,,,764,,764,,764,764,764',
'764,764,764,764,,764,242,242,242,242,242,242,242,242,242,242,242,,242',
'242,764,764,242,242,,,,,,,,,,,,,,242,,242,,242,242,242,242,242,242,242',
',242,,,,,,,,,,,,,,,,242' ]
        racc_action_check = arr = Array.new(24018, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    28,  4858,  1390,   nil,   415,   nil,  1414, 18860, 21430,
 21542,   nil,  1279,  1255,  1253,  1298,   654,   731,   284,   nil,
 15962, 15718, 23540,  1354,   nil, 14864, 14132, 14010,   614,   263,
  9618,   896,   nil,  3136,  9496,  9374,   nil,  1250,   440,  1306,
   892,  8276,  7666,  7300,  1233,   497,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   260,   nil,  6202,  6080, 15840,    64,   829,
  4980,  5102,   nil,   nil,  5224,  5348,  1271,   nil, 21878,   nil,
   nil,   nil,   nil,   nil,   226,   nil,   nil,   nil,   nil,   nil,
  1222,  1218, 21989,   nil,   nil,   nil,   130,   nil,   nil,   390,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  6446,   nil,   nil,   nil,  6568,  6690,  6812,  6934,  7056,
  1145,   nil,   606,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1200,
   nil,  1208,  4120,  7788,  7910,  8032,  8154, 22700, 22760,  8520,
  8642,  8764,   nil,   659,   385,  1261,   520,  1174,  1217,  2890,
   nil,   nil,  9740,  9862,  9984, 10106, 10228, 10350, 10472, 10594,
 10716, 10838, 10960, 11082, 11204, 11326, 11448, 11570, 11692, 11814,
 11936, 12058, 12180, 12302, 12424, 12546, 12668, 12790, 12912,   nil,
   nil,   nil, 23892,   nil,  1172,  1171, 13400,   nil, 13522,  1199,
   nil,   nil,   nil,   nil, 13766,   nil,   nil, 22880, 22940,  1178,
 14254,   nil,  1181,   nil,   nil,   nil, 14498,   nil,   nil, 14620,
  1166,  2275,  1164,  1162,  1121, 15352,  2029,   810,   778,  1191,
   776,  1152,  1113,   130,   nil,  1147,   738,   nil,   nil,   697,
  1152,  1151,   593,   nil,  1146,   nil, 17304,   nil,  1660,   659,
   nil,  1077,   548,   414, 18036,  1107,   291,  1083,   nil,   428,
   nil,   nil,   nil,    -4,  3874,  4243,  1465,   446,  1051,  1040,
  1035,   nil,   nil,   nil,   nil,  1027,   nil,   nil,   nil,   nil,
  1104,   nil,   nil,  1097,   861,   440,   180, 20324, 20446,   552,
   472,   995,   513,   657,  1068,   247,  1091,   nil,   nil, 21056,
   nil, 20934,   865,   837,   867,   804,   770,   742,   585,   272,
   nil,   -22,   nil,   nil,   nil,   nil,   203,   nil,     0,   nil,
   481,   985,   583,   nil,   964,   160,   nil,   569,   nil,   nil,
   nil,   nil,   nil,  1236,   nil,   nil,   nil,   nil,   nil,   nil,
 21654,   nil,   nil,   nil,   nil,  1783,   970,   nil,   nil, 21300,
   nil,   946, 16328,   nil,   945,   nil,   nil, 23628,   971,   698,
   685, 21300,   nil,   nil,   766,   965,   643,   nil,   520,     0,
   nil, 23760,   nil,   nil, 22280, 22220,  5836,   180,  5592,  5470,
  1026,  2398,  2275,  1262,  1203,   984,   958,   953,   952,  3259,
  3382,  3505,  2029,  1107,  2521,  3013,  2767,  2644,  2152,  1783,
  3136,  2890,   853,   911,  1906,  1660, 23231,   435,   nil,  5714,
   nil,   nil, 20690,   890,   nil, 20202,   nil, 18743,   nil,   nil,
 18392,   nil,   nil,   nil,   nil, 17426,   nil,   284,   209,   926,
   885,   863,   877,   967,   894,   nil,   891,   816,   nil,   nil,
   nil,   830, 13644, 22520, 22460,   678,   813,   nil,   nil,  9008,
  8398,   390, 23060, 22400, 23716, 13888,   882,   875,   727,   nil,
   nil, 15596,   nil,   nil, 18280, 23584,   nil, 18509,   nil,   nil,
   nil,   nil,   690,   787,   669,   nil,  1588,   nil,  1234,   nil,
   nil,  1435, 20080,   nil,   nil,  4489,   775,   nil,   nil,  4612,
   453,   509,   769,   752,  4735,   nil, 20812, 23000, 22820,   541,
   nil,   646,   589,   395,   nil,   616,   nil,   188, 19104,   nil,
  9387,   nil,   nil,   nil, 18982,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   630,
   nil,   nil, 21766,   626,   nil, 17792, 17548,   nil,   677, 17060,
 16694,   637,   nil,   nil,   nil, 16450,   611,   nil, 16206,   574,
   532,  1156,  1026,   604,  5224, 14986,   nil, 14742,   nil,   nil,
 14376,   560,   nil,   552, 13156,   nil,   550,   nil,   514,   nil,
   nil,   nil,   nil,   nil,   177, 23169,   191,   481,  8886,   nil,
   494,   nil,   nil,   nil,   nil,   490,   488, 22580, 22160,  6324,
   nil,   180,   nil,   479,   478,   218,   441,   676,   739,   421,
 23804,   434,   404,   278,   420, 16816,   nil,   256, 19470,   nil,
   nil,   nil,   nil,   215,   148,   -15,   nil,   nil,   961,   -47,
   nil,   -29,   nil,   nil,   946,   nil,   144,   nil,   nil,   nil,
   nil,   nil,   167,   nil,   240, 20568,   199,   404,   534,   670,
   547, 15474,   nil,   847,   nil, 22340,  7178, 22640,   nil,   nil,
   nil,   -43,   879,  3751,  3505, 22100,   174,  1317,  1906,   nil,
   nil,   nil,   nil,   nil, 23320,   581, 16572, 17914,   nil, 23452,
   nil, 23364,   nil,   nil, 23408,   nil, 23276, 19958, 19836, 18631,
   606, 23672,   nil,   779,  2521,   765,   nil,  9130,   779,   nil,
 15108,   nil, 16084,   821,   nil,   886,  1537,  1291,   nil,   nil,
   899,   901,   737,   969,   499,   nil,   998,   nil,  2398,   883,
   924,   nil,   nil,   nil, 23848,   nil,  1342,   nil,   nil,  1558,
   nil,  1218,   nil,  1121,   nil,  1018,   nil, 13034,  1042,  3997,
     0,   nil,   nil,   943,   246, 17182,   253,   253,   680,   857,
   nil,  1014,  2767, 21178,   nil,   166,  1127,  1129,   nil,  1055,
   nil,   nil,   nil,   nil,   nil,  1035,   nil,   nil, 23496, 19714,
   nil,  1149,   nil, 19592,   nil,  4366,  1039,   nil, 19348,  1049,
 19226,   nil,   nil,  1068,  1171,  1101,   nil,  3013,   nil,   nil,
   424, 17670,   nil,   nil,  1075,  1076,  1078,  1080,   nil,   425,
   nil,  1204,  1206, 16938,  1414,   nil,   nil,   nil,  1212,   259,
   nil,   nil,   nil,  5361,   nil,   nil,   nil, 23107,  1133,   nil,
   130,  1120,   nil, 15230,  1123,   nil,   nil,   nil,   nil,  2152,
   823,   745,  1210,   743,   nil,   nil,  1312,   nil,   nil,   nil,
  2644,   nil,   nil, 13278,   508,  3259,   nil,   nil,  3382,  3628,
   nil,   nil,  7544,  1192,   nil,  7422,   nil,  1327,  5958, 18741,
 18390,   532,  1231,   916,   nil,   nil,   nil,   nil,  1352,  1358,
  1362,  1245,   nil,  9252,  1251,   nil,  1287,   156,   165,   252,
   711,   nil,   nil,   nil,   nil,   nil,   nil, 18158,   nil,   782,
  1266,   nil ]

racc_action_default = [
    -1,  -519,  -517,  -519,    -2,  -506,    -5,    -6,  -519,  -519,
  -519,   -20,  -519,  -519,  -519,  -519,  -519,  -275,   -34,   -35,
  -519,  -519,   -40,   -42,   -43,  -287,  -325,  -326,   -47,  -253,
  -359,  -253,   -61,  -517,   -65,   -70,   -71,  -519,  -441,  -519,
  -519,  -519,  -519,  -519,  -508,  -218,  -268,  -269,  -270,  -271,
  -272,  -273,  -274,  -496,  -277,  -519,  -517,  -517,  -293,  -465,
  -519,  -519,  -298,  -301,  -506,  -519,  -310,  -317,  -519,  -327,
  -328,  -386,  -387,  -388,  -389,  -390,  -517,  -393,  -517,  -517,
  -517,  -517,  -517,  -420,  -426,  -427,  -494,  -431,  -432,  -495,
  -434,  -435,  -436,  -437,  -438,  -439,  -440,  -443,  -444,   932,
    -4,  -507,  -513,  -514,  -515,  -519,  -519,  -519,  -519,  -519,
    -8,    -9,  -519,   -96,   -97,   -98,   -99,  -100,  -101,  -102,
  -103,  -104,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,
  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,
  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,
  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,
  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,
  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,
  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,   -14,
  -105,  -519,  -517,  -519,  -519,  -519,  -517,  -519,  -519,  -519,
  -519,  -519,   -38,  -519,  -441,  -519,  -275,  -519,  -519,  -517,
   -39,  -210,  -519,  -519,  -519,  -519,  -519,  -519,  -519,  -519,
  -519,  -519,  -519,  -519,  -519,  -519,  -519,  -519,  -519,  -519,
  -519,  -519,  -519,  -519,  -519,  -519,  -519,  -519,  -519,  -347,
  -350,   -44,  -219,  -232,  -518,  -518,  -519,  -240,  -519,  -263,
  -287,  -325,  -326,  -490,  -519,   -45,   -46,  -519,  -519,   -53,
  -519,  -292,  -519,  -364,  -367,   -59,  -517,  -358,   -60,  -519,
   -61,  -517,  -519,  -519,   -66,   -68,  -517,   -75,  -519,  -519,
   -82,  -290,  -508,  -353,  -329,  -359,  -519,   -69,   -73,  -283,
  -428,  -429,  -519,  -195,  -196,  -211,  -519,  -509,  -517,  -279,
  -220,  -508,  -510,  -510,  -519,  -519,  -510,  -519,  -487,  -510,
  -294,  -295,  -360,  -519,  -517,  -517,  -465,  -519,  -483,  -483,
  -483,  -464,  -466,  -467,  -468,  -469,  -470,  -473,  -475,  -476,
  -478,  -479,  -480,  -519,   -41,  -519,  -519,  -519,  -519,  -506,
  -519,  -507,  -441,  -519,  -519,  -275,  -519,  -341,  -342,  -519,
  -313,  -519,   -96,   -97,  -134,  -135,  -151,  -156,  -163,  -166,
  -320,  -519,  -441,  -484,  -485,  -391,  -519,  -406,  -519,  -408,
  -519,  -519,  -519,  -398,  -519,  -519,  -404,  -519,  -419,  -421,
  -422,  -423,  -424,    -7,  -516,   -15,   -16,   -17,   -18,   -19,
  -519,   -11,   -12,   -13,  -106,  -517,  -519,   -23,   -31,  -175,
  -263,  -519,  -519,   -24,   -32,   -33,   -25,  -177,  -519,  -497,
  -498,  -517,  -499,  -500,  -497,  -253,  -498,  -357,  -499,  -500,
   -30,  -184,   -36,   -37,  -519,  -519,  -517,  -283,  -519,  -519,
  -519,  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -197,
  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -207,
  -208,  -209,  -212,  -213,  -214,  -215,  -519,  -517,  -233,  -519,
  -262,  -235,  -519,  -518,  -260,  -519,  -493,  -253,  -497,  -498,
  -253,   -50,   -54,  -254,  -255,  -256,  -354,  -517,  -517,  -519,
  -508,  -508,  -518,  -232,  -519,  -289,  -519,   -62,  -281,   -74,
   -67,  -519,  -517,  -519,  -519,   -81,  -519,  -428,  -429,  -519,
  -519,  -519,  -519,  -519,  -216,  -519,  -378,  -519,  -508,  -221,
  -222,  -512,  -511,  -224,  -512,  -508,  -285,  -512,  -489,  -286,
  -488,  -361,  -519,  -519,  -508,  -450,  -519,  -457,  -519,  -460,
  -461,  -519,  -519,  -477,  -481,  -517,  -330,  -331,  -332,  -517,
  -519,  -519,  -519,  -519,  -517,  -370,  -517,  -519,  -519,  -283,
  -307,   -91,   -92,  -519,   -94,  -519,  -275,  -519,  -519,  -318,
  -465,  -322,  -504,  -505,  -519,  -392,  -407,  -410,  -411,  -413,
  -394,  -409,  -395,  -396,  -397,  -519,  -400,  -402,  -403,  -519,
  -425,   -10,  -519,  -519,   -22,  -519,  -519,  -267,  -284,  -519,
  -519,   -55,  -230,  -231,  -355,  -519,   -57,  -356,  -519,  -497,
  -498,  -497,  -498,  -519,  -175,  -519,  -343,  -519,  -345,  -348,
  -519,  -518,  -261,  -264,  -519,  -491,  -519,  -239,  -519,  -492,
   -48,  -351,   -49,  -352,  -517,   -40,  -519,  -518,  -519,  -252,
  -519,  -258,  -365,  -368,  -226,  -519,  -519,  -519,  -519,  -519,
  -288,   -62,   -72,  -519,  -497,  -498,  -517,   -78,   -80,  -519,
  -183,  -193,  -194,  -519,  -517,  -517,  -278,  -519,  -519,  -264,
  -225,  -362,  -363,  -519,  -483,  -483,  -471,  -482,  -483,  -483,
  -474,  -483,  -469,  -472,  -517,  -333,  -517,  -299,  -334,  -335,
  -336,  -302,  -519,  -305,  -519,  -519,  -519,  -497,  -498,  -501,
  -282,  -519,   -91,   -92,   -93,  -519,  -517,  -519,  -311,  -445,
  -446,  -519,  -314,  -517,  -517,  -519,  -508,  -519,  -517,  -399,
  -401,  -405,  -107,   -21,  -176,  -265,  -519,  -519,   -27,  -179,
   -28,  -180,   -56,   -29,  -181,   -58,  -182,  -519,  -519,  -519,
  -284,  -217,  -344,  -519,  -517,  -518,  -237,  -519,  -518,   -51,
  -519,  -245,  -519,  -518,  -257,  -519,  -517,  -517,  -227,  -228,
  -517,  -517,  -508,  -519,   -76,  -291,  -517,  -339,  -517,  -379,
  -517,  -380,  -381,  -280,  -508,  -449,  -519,  -453,  -455,  -519,
  -458,  -519,  -462,  -519,  -463,  -519,  -337,  -519,  -519,  -517,
  -517,  -304,  -306,  -372,  -519,  -519,  -284,  -519,   -91,   -92,
   -95,  -519,  -517,  -519,  -448,  -519,  -519,  -519,  -323,  -519,
  -412,  -415,  -416,  -417,  -418,  -519,  -266,   -26,  -178,  -519,
  -346,  -519,  -234,  -519,  -236,  -517,  -518,  -242,  -519,  -518,
  -519,  -251,  -259,  -519,  -519,  -519,    -3,  -517,  -385,  -340,
  -519,  -519,  -383,  -223,  -483,  -483,  -483,  -483,  -296,  -519,
  -297,  -519,  -519,  -519,  -517,  -374,  -308,  -284,  -519,  -519,
  -315,  -319,  -321,  -465,  -486,  -414,  -349,  -518,  -519,  -241,
  -519,  -518,  -247,  -519,  -518,  -366,  -369,  -229,  -384,  -517,
   -83,  -519,  -519,   -90,  -382,  -451,  -519,  -454,  -456,  -459,
  -517,  -300,  -303,  -519,  -517,  -517,  -312,  -447,  -517,  -517,
  -238,   -52,  -519,  -518,  -243,  -519,  -246,  -378,  -517,  -519,
  -519,   -89,  -483,  -517,  -373,  -371,  -375,  -376,  -519,  -519,
  -519,  -518,  -248,  -519,  -518,  -377,  -519,  -497,  -498,  -501,
   -88,  -452,  -338,  -309,  -316,  -324,  -244,  -519,  -249,   -84,
  -518,  -250 ]

clist = [
'211,305,321,360,242,242,242,313,507,243,243,243,346,348,244,244,244',
'379,481,267,293,294,295,398,405,654,104,543,335,336,284,284,339,472',
'775,242,242,247,247,247,301,270,116,116,312,100,306,615,121,121,666',
'111,190,677,681,245,245,245,110,119,119,284,210,259,265,268,272,621',
'535,539,623,287,670,385,386,387,388,665,296,668,557,694,559,566,366',
'104,311,309,756,576,368,370,411,415,377,307,241,255,256,615,609,116',
'363,669,340,745,671,510,513,191,778,518,390,698,520,116,189,101,361',
'561,632,633,298,15,508,337,779,338,780,15,691,885,349,792,558,795,888',
'351,703,560,705,408,853,457,734,630,477,746,478,747,784,383,467,470',
'15,905,685,760,830,389,365,310,473,372,575,631,375,800,707,708,378,793',
'399,242,407,242,524,826,421,664,301,624,401,401,815,2,274,582,564,1',
',211,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446',
'447,448,449,450,451,452,453,454,455,456,,,,,15,790,,242,,242,,682,15',
'419,,242,397,403,406,,,242,420,,,,243,242,,,242,244,483,476,,243,,482',
',,244,321,,,,922,,,,739,,,16,284,247,,267,504,16,,247,270,,247,,515',
'270,,,,203,203,245,,710,203,203,203,245,666,521,245,846,16,278,278,486',
'540,541,,,491,670,490,,15,,,496,834,906,411,415,,615,203,203,,,615,203',
'203,15,474,203,343,,509,,480,525,,484,835,,,836,284,837,284,,,621,623',
',,,,,,,,104,,,,,722,,,,16,725,603,,203,203,203,203,16,,542,,242,,,,',
',,,649,,752,15,,,,,15,649,,,,,,597,242,,421,604,407,301,,,796,797,,915',
',,15,,,,116,,,,,,121,,,581,,,15,15,643,242,,119,242,,649,242,591,,,615',
'596,,902,,,625,,,,419,,16,203,203,203,203,461,,203,203,203,,242,,,,',
'301,16,650,651,652,,,,,761,,629,,611,242,686,,242,,,242,,615,,,620,848',
'321,622,627,,,704,,,242,,,635,636,15,844,,,,,,,,242,,419,203,,301,,750',
'751,203,,419,203,,16,,,657,278,16,,,,,660,,,,,733,348,,,663,,,678,678',
'869,714,242,16,,719,721,,907,880,,724,,,726,699,,,419,16,16,731,202',
',,,242,649,,,242,,,,,909,910,,,,284,,203,203,242,,,,,,,,116,,555,242',
'555,299,121,,753,712,334,334,,,334,718,720,119,,242,,723,764,597,,798',
'791,,,401,,,,,,,,,,,,15,,,787,15,,,16,242,15,,,,611,334,334,334,334',
'783,242,,,,,301,,,617,,,,,,,,,,,203,242,808,,,,,,,,,,719,721,724,,,',
',,,,242,,,242,,242,794,,,,,,419,816,,29,,,,,,29,116,,799,,,203,,839',
',,,29,29,,817,,29,29,29,,807,,203,849,29,,242,422,423,,,,819,,,203,',
',,,,,,,,,29,29,825,,808,29,29,,857,29,,649,321,242,833,242,,889,,16',
',,,16,678,,,,16,17,203,,850,,,17,,,242,,15,15,203,284,,15,29,736,203',
',29,29,29,29,29,242,,,242,916,17,280,280,741,,,,,,,,15,,203,203,,,,242',
'203,,,,15,15,,887,242,,,242,343,345,242,,15,,,301,,,,,,,,893,,242,,',
',527,529,530,,15,15,334,334,,,242,203,,,,,17,15,,4,,,,,17,29,29,29,29',
'29,,,29,29,29,,,419,,,15,,29,,,,,,,,273,,15,,,,,,,812,,,814,203,,,,821',
'203,15,,,,,,16,16,,,,16,,,,,,,,,203,,,,29,15,,,,,29,,,29,,29,15,16,17',
',29,15,,,15,15,,,,16,16,,,,,17,,,,,,16,29,,,,,,,,,859,,,862,299,,,29',
'29,203,,16,16,,,,,,,,,,,,16,203,,,,,29,29,,13,653,,,,,13,,890,,,,894',
'17,16,896,,280,17,,,,,,,,16,,,,871,13,,,,,396,,,,17,,,16,912,,,,,,,',
',273,702,29,17,17,,,706,,926,347,,928,,,16,,,,,,,,,,,16,,931,,,16,,29',
'16,16,,,556,,556,,,,203,,13,,,,,,,,13,,,,,,38,,273,,,,38,273,,,,,,,',
',,,,,,,29,,17,,,,,,,38,277,277,,,,,,29,,,,,,522,523,,,,,,29,,,,,,,,767',
'768,,342,770,772,362,774,,,,,,,334,,,13,,,,,29,,,,29,,,,,29,,29,13,',
',,,38,,,,,,29,,38,,,,29,,,,,,,,,,,,,,,583,,,,,,,,,,29,29,,,,,29,,,,',
',,,,,,,,,13,,,,334,13,,,17,,,,17,,,,,17,,,334,,,,,,,13,,,29,,,,38,,',
',,,,,,13,13,300,308,,,,,38,,,,,,,,,,,,,,367,,369,369,373,376,369,,,875',
'877,878,879,,,345,,29,,,,,29,,,,,,,29,29,,,,29,,,,,,,,,29,,674,,,38',
'676,,,277,38,684,,,,,13,29,,,,,,,,,,,,29,29,,38,,921,,,,,,,29,,,,,,',
'38,38,,,,,,,,,,,29,,29,29,,,,,17,17,,,804,17,,29,29,300,,,,,,362,,362',
',,,,,,,,,,,,29,17,,,,,,,,,,,29,17,17,,,,,,,,,,,17,,,,29,,38,,,,,,,,',
',,,,,,17,17,,479,,,,,29,,,,13,17,,,13,,,29,,13,,,29,,,29,29,,,805,,',
'400,404,17,29,,,,,,,,,,,17,,,,873,,,,,811,,,,,,,,17,,,,823,824,,,,,',
',,,,,829,,,347,,,463,,464,17,,,,,466,,,,,,17,841,842,,,17,,,17,17,,',
',,,,,,,,,,,,38,,,,38,,,,,38,,,,858,,,,,,,,,,592,,868,,,,,,,,,,,,,300',
',,,884,,,,,,,,,,,,,13,13,,,,13,,,,,,,897,,606,,,342,,,,,,903,592,,,592',
'908,,,13,,,606,606,,,,,,,,13,13,,,,,300,,,,,,13,,,,,,,,587,,,,,,,,,',
',,,13,13,,,,,,,,,,,,13,,,,,,,,,,,,,,300,,,,,,,,,13,38,38,,,,38,,613',
',,616,13,,619,,874,,,,,,,,626,,,,,13,,,38,,,,,,,,,,,,38,38,,,,,,,,,13',
',38,,,,659,,,616,,13,659,,,606,13,,,13,13,,,38,38,,,673,,,,,,,,,38,592',
',,,,,,,757,762,,,,,,,,,,,,,38,,,,,,757,,757,,,,38,,,,870,,,,,,715,,',
',,,300,38,,,,,,,,,,,,,,,,,735,,,,738,,,,38,,,,,,,,,,743,38,,,,,38,,',
'38,38,613,,,,,,,592,592,,,,,828,,,759,832,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,806,,,,,,,,,,,,,,,,,,,,,616,,,,',
'616,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,757,,,,,845,,,,,,,,,300,,,',
',757,,,,,,,,,,,,,,,,,,,861,,864,,,,,,,,,,,,,,,,,,,,,,,659,,,,,,,,,,',
',,,,,,613,,,616,,,,,,,,,,,,,,,,,,,,904,,,,,,,,,911,,,914,,,,,,,,,,,',
',,,,,,616,,,,,,,,,,,,,,930' ]
        racc_goto_table = arr = Array.new(2359, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,21,143,48,28,28,28,88,3,29,29,29,85,18,57,57,57,48,32,60,28,28,28',
'23,23,5,87,84,15,15,56,56,15,35,82,28,28,63,63,63,29,40,49,49,114,9',
'57,149,53,53,144,13,13,83,83,59,59,59,11,52,52,56,17,34,34,34,41,61',
'81,81,61,44,145,15,15,15,15,141,55,141,47,46,47,131,127,87,80,59,6,131',
'128,128,33,33,128,77,31,31,31,149,36,49,76,139,9,68,139,58,58,27,6,58',
'26,86,58,49,14,12,89,90,36,36,91,19,92,93,94,95,96,19,97,98,99,100,101',
'102,103,104,105,106,107,21,108,110,111,67,115,116,117,118,119,11,33',
'33,19,120,121,122,123,11,126,78,65,129,130,64,132,133,134,135,136,137',
'28,28,28,28,138,7,28,140,29,37,57,57,38,4,43,54,148,1,,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,',
',,19,46,,28,,28,,84,19,49,,28,17,17,17,,,28,17,,,,29,28,,,28,57,29,60',
',29,,57,,,57,143,,,,82,,,,36,,,20,56,63,,60,28,20,,63,40,,63,,28,40',
',,,20,20,59,,131,20,20,20,59,144,114,59,83,20,20,20,41,15,15,,,41,145',
'44,,19,,,55,141,6,33,33,,149,20,20,,,149,20,20,19,31,20,20,,55,,31,87',
',31,139,,,139,56,139,56,,,61,61,,,,,,,,,87,,,,,35,,,,20,35,21,,20,20',
'20,20,20,,9,,28,,,,,,,,33,,32,19,,,,,19,33,,,,,,60,28,,28,28,28,29,',
',3,3,,5,,,19,,,,49,,,,,,53,,,13,,,19,19,21,28,,52,28,,33,28,34,,,149',
'34,,139,,,28,,,,49,,20,20,20,20,20,62,,20,20,20,,28,,,,,29,20,28,28',
'28,,,,,23,,63,,59,28,21,,28,,,28,,149,,,34,3,143,34,59,,,88,,,28,,,55',
'55,19,81,,,,,,,,28,,49,20,,29,,33,33,20,,49,20,,20,,,55,20,20,,,,,55',
',,,,85,18,,,55,,,87,87,81,28,28,20,,28,28,,84,81,,28,,,28,87,,,49,20',
'20,28,25,,,,28,33,,,28,,,,,3,3,,,,56,,20,20,28,,,,,,,,49,,20,28,20,25',
'53,,29,13,25,25,,,25,17,17,52,,28,,17,28,60,,48,21,,,57,,,,,,,,,,,,19',
',,15,19,,,20,28,19,,,,59,25,25,25,25,57,28,,,,,29,,,62,,,,,,,,,,,20',
'28,28,,,,,,,,,,28,28,28,,,,,,,,28,,,28,,28,87,,,,,,49,57,,39,,,,,,39',
'49,,55,,,20,,15,,,,39,39,,63,,39,39,39,,17,,20,15,39,,28,25,25,,,,59',
',,20,,,,,,,,,,,39,39,55,,28,39,39,,28,39,,33,143,28,55,28,,88,,20,,',
',20,87,,,,20,22,20,,87,,,22,,,28,,19,19,20,56,,19,39,62,20,,39,39,39',
'39,39,28,,,28,21,22,22,22,62,,,,,,,,19,,20,20,,,,28,20,,,,19,19,,87',
'28,,,28,20,22,28,,19,,,29,,,,,,,,59,,28,,,,142,142,142,,19,19,25,25',
',,28,20,,,,,22,19,,2,,,,,22,39,39,39,39,39,,,39,39,39,,,49,,,19,,39',
',,,,,,,2,,19,,,,,,,62,,,62,20,,,,62,20,19,,,,,,20,20,,,,20,,,,,,,,,20',
',,,39,19,,,,,39,,,39,,39,19,20,22,,39,19,,,19,19,,,,20,20,,,,,22,,,',
',,20,39,,,,,,,,,62,,,62,25,,,39,39,20,,20,20,,,,,,,,,,,,20,20,,,,,39',
'39,,16,25,,,,,16,,62,,,,62,22,20,62,,22,22,,,,,,,,20,,,,20,16,,,,,2',
',,,22,,,20,62,,,,,,,,,2,25,39,22,22,,,25,,62,16,,62,,,20,,,,,,,,,,,20',
',62,,,20,,39,20,20,,,22,,22,,,,20,,16,,,,,,,,16,,,,,,45,,2,,,,45,2,',
',,,,,,,,,,,,,39,,22,,,,,,,45,45,45,,,,,,39,,,,,,2,2,,,,,,39,,,,,,,,142',
'142,,45,142,142,45,142,,,,,,,25,,,16,,,,,39,,,,39,,,,,39,,39,16,,,,',
'45,,,,,,39,,45,,,,39,,,,,,,,,,,,,,,2,,,,,,,,,,39,39,,,,,39,,,,,,,,,',
',,,,16,,,,25,16,,,22,,,,22,,,,,22,,,25,,,,,,,16,,,39,,,,45,,,,,,,,,16',
'16,10,10,,,,,45,,,,,,,,,,,,,,10,,10,10,10,10,10,,,142,142,142,142,,',
'22,,39,,,,,39,,,,,,,39,39,,,,39,,,,,,,,,39,,2,,,45,2,,,45,45,2,,,,,16',
'39,,,,,,,,,,,,39,39,,45,,142,,,,,,,39,,,,,,,45,45,,,,,,,,,,,39,,39,39',
',,,,22,22,,,22,22,,39,39,10,,,,,,45,,45,,,,,,,,,,,,,39,22,,,,,,,,,,',
'39,22,22,,,,,,,,,,,22,,,,39,,45,,,,,,,,,,,,,,,22,22,,10,,,,,39,,,,16',
'22,,,16,,,39,,16,,,39,,,39,39,,,2,,,24,24,22,39,,,,,,,,,,,22,,,,22,',
',,,2,,,,,,,,22,,,,2,2,,,,,,,,,,,2,,,16,,,24,,24,22,,,,,24,,,,,,22,2',
'2,,,22,,,22,22,,,,,,,,,,,,,,,45,,,,45,,,,,45,,,,2,,,,,,,,,,10,,2,,,',
',,,,,,,,,10,,,,2,,,,,,,,,,,,,16,16,,,,16,,,,,,,2,,10,,,45,,,,,,2,10',
',,10,2,,,16,,,10,10,,,,,,,,16,16,,,,,10,,,,,,16,,,,,,,,24,,,,,,,,,,',
',,16,16,,,,,,,,,,,,16,,,,,,,,,,,,,,10,,,,,,,,,16,45,45,,,,45,,24,,,24',
'16,,24,,16,,,,,,,,24,,,,,16,,,45,,,,,,,,,,,,45,45,,,,,,,,,16,,45,,,',
'24,,,24,,16,24,,,10,16,,,16,16,,,45,45,,,24,,,,,,,,,45,10,,,,,,,,10',
'10,,,,,,,,,,,,,45,,,,,,10,,10,,,,45,,,,45,,,,,,24,,,,,,10,45,,,,,,,',
',,,,,,,,,24,,,,24,,,,45,,,,,,,,,,24,45,,,,,45,,,45,45,24,,,,,,,10,10',
',,,,10,,,24,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,24,,,,,,,,,,,,,,,,,,,,,24,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,10,,,,,24,,,,,,,,,10,,,,,10,,,,,,,,,,,,,,,,,,,24,,24,,,,,',
',,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,24,,,24,,,,,,,,,,,,,,,,,,,,24,,',
',,,,,,24,,,24,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,24' ]
        racc_goto_check = arr = Array.new(2359, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   189,   913,  -290,   185,  -481,  -566,  -579,   nil,    40,
  1327,    50,   112,    42,   106,   -32,  1067,    41,   -52,   121,
   268,   -55,   811,  -170,  1431,   565,     1,    98,   -21,   -16,
   nil,    71,  -248,  -105,    34,  -226,  -357,  -290,  -555,   729,
     8,    33,   nil,   152,    36,  1180,  -472,  -269,   -65,    33,
   nil,   nil,    50,    39,  -207,    34,    -4,   -11,  -195,    30,
   -11,  -400,   220,    12,  -310,   -98,   nil,  -330,  -526,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    34,    38,   103,   nil,
    27,  -267,  -640,  -487,  -313,   -53,  -444,    21,   -52,    50,
  -242,    68,  -175,    63,  -551,    64,  -553,  -420,  -715,    66,
  -565,  -216,  -567,  -714,    70,  -421,  -221,  -421,  -656,   nil,
   -96,  -465,   nil,   nil,   -15,  -117,  -485,  -116,  -484,  -535,
  -729,  -389,  -498,  -602,   nil,   nil,    86,     8,    12,    83,
  -208,  -283,    85,  -540,  -400,  -400,    88,  -529,  -140,  -425,
  -347,  -449,   578,   -57,  -476,  -456,   nil,   nil,  -176,  -415 ]

racc_goto_default = [
   nil,   nil,   506,   nil,   nil,   nil,   776,   nil,     5,   nil,
     6,     7,   341,   nil,   nil,   nil,   207,    19,    14,   208,
   292,   nil,   206,   nil,   249,    18,   nil,   nil,    22,    23,
    24,   nil,    28,   646,   nil,   nil,   nil,   nil,   nil,   283,
    32,   nil,    34,    37,    36,   204,   554,   nil,   118,   413,
   117,   120,    72,    73,   nil,   nil,    45,   302,   nil,   303,
   593,   594,   458,   612,   nil,   nil,   260,   nil,   nil,   460,
    46,    47,    48,    49,    50,    51,    52,   nil,   261,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   536,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,
   nil,   nil,   417,   262,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    71,    74,    75,   nil,   nil,   nil,
   nil,   571,   nil,   nil,   nil,   nil,   nil,   nil,   317,   318,
   319,   320,   nil,   667,   326,   327,   330,   333,   nil,   253 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 140, :_reduce_1,
  2, 137, :_reduce_2,
  4, 139, :_reduce_3,
  2, 138, :_reduce_4,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  3, 144, :_reduce_7,
  2, 144, :_reduce_8,
  0, 162, :_reduce_9,
  4, 147, :_reduce_10,
  3, 147, :_reduce_11,
  3, 147, :_reduce_12,
  3, 147, :_reduce_13,
  2, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_16,
  3, 147, :_reduce_17,
  3, 147, :_reduce_18,
  3, 147, :_reduce_19,
  0, 163, :_reduce_20,
  5, 147, :_reduce_21,
  4, 147, :_reduce_22,
  3, 147, :_reduce_23,
  3, 147, :_reduce_24,
  3, 147, :_reduce_25,
  6, 147, :_reduce_26,
  5, 147, :_reduce_27,
  5, 147, :_reduce_28,
  5, 147, :_reduce_29,
  3, 147, :_reduce_30,
  3, 147, :_reduce_31,
  3, 147, :_reduce_32,
  3, 147, :_reduce_33,
  1, 147, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_36,
  3, 161, :_reduce_37,
  2, 161, :_reduce_38,
  2, 161, :_reduce_39,
  1, 161, :_reduce_none,
  1, 151, :_reduce_41,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_44,
  2, 153, :_reduce_45,
  2, 153, :_reduce_46,
  1, 166, :_reduce_none,
  4, 166, :_reduce_48,
  4, 166, :_reduce_49,
  0, 173, :_reduce_50,
  0, 174, :_reduce_51,
  6, 171, :_reduce_52,
  2, 165, :_reduce_53,
  3, 165, :_reduce_54,
  4, 165, :_reduce_55,
  5, 165, :_reduce_56,
  4, 165, :_reduce_57,
  5, 165, :_reduce_58,
  2, 165, :_reduce_59,
  2, 165, :_reduce_60,
  1, 154, :_reduce_none,
  3, 154, :_reduce_62,
  1, 177, :_reduce_none,
  3, 177, :_reduce_64,
  1, 176, :_reduce_65,
  2, 176, :_reduce_66,
  3, 176, :_reduce_67,
  2, 176, :_reduce_68,
  2, 176, :_reduce_69,
  1, 176, :_reduce_70,
  1, 179, :_reduce_none,
  3, 179, :_reduce_72,
  2, 178, :_reduce_73,
  3, 178, :_reduce_74,
  1, 180, :_reduce_75,
  4, 180, :_reduce_76,
  3, 180, :_reduce_77,
  3, 180, :_reduce_78,
  3, 180, :_reduce_79,
  3, 180, :_reduce_80,
  2, 180, :_reduce_81,
  1, 180, :_reduce_82,
  1, 152, :_reduce_83,
  4, 152, :_reduce_84,
  3, 152, :_reduce_85,
  3, 152, :_reduce_86,
  3, 152, :_reduce_87,
  3, 152, :_reduce_88,
  2, 152, :_reduce_89,
  1, 152, :_reduce_90,
  1, 182, :_reduce_91,
  1, 182, :_reduce_none,
  2, 183, :_reduce_93,
  1, 183, :_reduce_94,
  3, 183, :_reduce_95,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_99,
  1, 184, :_reduce_100,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 149, :_reduce_103,
  1, 149, :_reduce_none,
  1, 150, :_reduce_105,
  0, 190, :_reduce_106,
  4, 150, :_reduce_107,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  3, 164, :_reduce_175,
  5, 164, :_reduce_176,
  3, 164, :_reduce_177,
  6, 164, :_reduce_178,
  5, 164, :_reduce_179,
  5, 164, :_reduce_180,
  5, 164, :_reduce_181,
  5, 164, :_reduce_182,
  4, 164, :_reduce_183,
  3, 164, :_reduce_184,
  3, 164, :_reduce_185,
  3, 164, :_reduce_186,
  3, 164, :_reduce_187,
  3, 164, :_reduce_188,
  3, 164, :_reduce_189,
  3, 164, :_reduce_190,
  3, 164, :_reduce_191,
  3, 164, :_reduce_192,
  4, 164, :_reduce_193,
  4, 164, :_reduce_194,
  2, 164, :_reduce_195,
  2, 164, :_reduce_196,
  3, 164, :_reduce_197,
  3, 164, :_reduce_198,
  3, 164, :_reduce_199,
  3, 164, :_reduce_200,
  3, 164, :_reduce_201,
  3, 164, :_reduce_202,
  3, 164, :_reduce_203,
  3, 164, :_reduce_204,
  3, 164, :_reduce_205,
  3, 164, :_reduce_206,
  3, 164, :_reduce_207,
  3, 164, :_reduce_208,
  3, 164, :_reduce_209,
  2, 164, :_reduce_210,
  2, 164, :_reduce_211,
  3, 164, :_reduce_212,
  3, 164, :_reduce_213,
  3, 164, :_reduce_214,
  3, 164, :_reduce_215,
  3, 164, :_reduce_216,
  5, 164, :_reduce_217,
  1, 164, :_reduce_none,
  1, 160, :_reduce_219,
  1, 157, :_reduce_none,
  2, 157, :_reduce_221,
  2, 157, :_reduce_222,
  5, 157, :_reduce_223,
  2, 157, :_reduce_224,
  3, 157, :_reduce_225,
  3, 196, :_reduce_226,
  4, 196, :_reduce_227,
  4, 196, :_reduce_228,
  6, 196, :_reduce_229,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 167, :_reduce_232,
  2, 167, :_reduce_233,
  5, 167, :_reduce_234,
  2, 167, :_reduce_235,
  5, 167, :_reduce_236,
  4, 167, :_reduce_237,
  7, 167, :_reduce_238,
  3, 167, :_reduce_239,
  1, 167, :_reduce_none,
  4, 200, :_reduce_241,
  3, 200, :_reduce_242,
  5, 200, :_reduce_243,
  7, 200, :_reduce_244,
  2, 200, :_reduce_245,
  5, 200, :_reduce_246,
  4, 200, :_reduce_247,
  6, 200, :_reduce_248,
  7, 200, :_reduce_249,
  9, 200, :_reduce_250,
  3, 200, :_reduce_251,
  1, 200, :_reduce_none,
  0, 202, :_reduce_253,
  2, 170, :_reduce_254,
  1, 201, :_reduce_none,
  0, 203, :_reduce_256,
  3, 201, :_reduce_257,
  0, 204, :_reduce_258,
  4, 201, :_reduce_259,
  2, 199, :_reduce_260,
  2, 198, :_reduce_261,
  1, 198, :_reduce_none,
  1, 193, :_reduce_263,
  3, 193, :_reduce_264,
  3, 159, :_reduce_265,
  4, 159, :_reduce_266,
  2, 159, :_reduce_267,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_276,
  0, 227, :_reduce_277,
  4, 192, :_reduce_278,
  0, 228, :_reduce_279,
  5, 192, :_reduce_280,
  3, 192, :_reduce_281,
  3, 192, :_reduce_282,
  2, 192, :_reduce_283,
  4, 192, :_reduce_284,
  3, 192, :_reduce_285,
  3, 192, :_reduce_286,
  1, 192, :_reduce_287,
  4, 192, :_reduce_288,
  3, 192, :_reduce_289,
  1, 192, :_reduce_290,
  5, 192, :_reduce_291,
  2, 192, :_reduce_292,
  1, 192, :_reduce_none,
  2, 192, :_reduce_294,
  2, 192, :_reduce_295,
  6, 192, :_reduce_296,
  6, 192, :_reduce_297,
  0, 229, :_reduce_298,
  0, 230, :_reduce_299,
  7, 192, :_reduce_300,
  0, 231, :_reduce_301,
  0, 232, :_reduce_302,
  7, 192, :_reduce_303,
  5, 192, :_reduce_304,
  4, 192, :_reduce_305,
  5, 192, :_reduce_306,
  0, 233, :_reduce_307,
  0, 234, :_reduce_308,
  9, 192, :_reduce_309,
  0, 235, :_reduce_310,
  0, 236, :_reduce_311,
  7, 192, :_reduce_312,
  0, 237, :_reduce_313,
  0, 238, :_reduce_314,
  0, 239, :_reduce_315,
  9, 192, :_reduce_316,
  0, 240, :_reduce_317,
  0, 241, :_reduce_318,
  6, 192, :_reduce_319,
  0, 242, :_reduce_320,
  6, 192, :_reduce_321,
  0, 243, :_reduce_322,
  0, 244, :_reduce_323,
  9, 192, :_reduce_324,
  1, 192, :_reduce_325,
  1, 192, :_reduce_326,
  1, 192, :_reduce_327,
  1, 192, :_reduce_328,
  1, 156, :_reduce_329,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  2, 217, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 218, :_reduce_none,
  5, 218, :_reduce_338,
  1, 142, :_reduce_none,
  2, 142, :_reduce_340,
  1, 221, :_reduce_none,
  1, 221, :_reduce_342,
  1, 172, :_reduce_none,
  2, 172, :_reduce_344,
  1, 172, :_reduce_345,
  3, 172, :_reduce_346,
  0, 246, :_reduce_347,
  0, 247, :_reduce_348,
  6, 245, :_reduce_349,
  2, 168, :_reduce_350,
  4, 168, :_reduce_351,
  4, 168, :_reduce_352,
  0, 249, :_reduce_353,
  3, 215, :_reduce_354,
  4, 215, :_reduce_355,
  4, 215, :_reduce_356,
  3, 215, :_reduce_357,
  2, 215, :_reduce_358,
  1, 215, :_reduce_359,
  1, 216, :_reduce_360,
  2, 216, :_reduce_361,
  3, 250, :_reduce_362,
  3, 250, :_reduce_363,
  0, 251, :_reduce_364,
  0, 252, :_reduce_365,
  6, 214, :_reduce_366,
  0, 253, :_reduce_367,
  0, 254, :_reduce_368,
  6, 214, :_reduce_369,
  0, 257, :_reduce_370,
  6, 220, :_reduce_371,
  1, 255, :_reduce_none,
  4, 255, :_reduce_373,
  2, 255, :_reduce_374,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  6, 141, :_reduce_377,
  0, 141, :_reduce_378,
  1, 258, :_reduce_379,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  2, 259, :_reduce_382,
  1, 259, :_reduce_none,
  2, 143, :_reduce_384,
  1, 143, :_reduce_none,
  1, 206, :_reduce_386,
  1, 206, :_reduce_387,
  1, 206, :_reduce_none,
  1, 207, :_reduce_389,
  1, 261, :_reduce_none,
  2, 261, :_reduce_391,
  3, 262, :_reduce_392,
  1, 262, :_reduce_393,
  3, 208, :_reduce_394,
  3, 209, :_reduce_395,
  3, 210, :_reduce_396,
  3, 210, :_reduce_397,
  1, 265, :_reduce_398,
  3, 265, :_reduce_399,
  1, 266, :_reduce_none,
  2, 266, :_reduce_401,
  3, 211, :_reduce_402,
  3, 211, :_reduce_403,
  1, 268, :_reduce_404,
  3, 268, :_reduce_405,
  1, 263, :_reduce_406,
  2, 263, :_reduce_407,
  1, 264, :_reduce_408,
  2, 264, :_reduce_409,
  1, 267, :_reduce_410,
  0, 270, :_reduce_411,
  3, 267, :_reduce_412,
  0, 271, :_reduce_413,
  4, 267, :_reduce_414,
  1, 269, :_reduce_415,
  1, 269, :_reduce_416,
  1, 269, :_reduce_417,
  1, 269, :_reduce_none,
  2, 188, :_reduce_419,
  1, 188, :_reduce_420,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  3, 189, :_reduce_425,
  1, 260, :_reduce_none,
  1, 260, :_reduce_none,
  2, 260, :_reduce_428,
  2, 260, :_reduce_429,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_435,
  1, 181, :_reduce_436,
  1, 181, :_reduce_437,
  1, 181, :_reduce_438,
  1, 181, :_reduce_439,
  1, 181, :_reduce_440,
  1, 212, :_reduce_441,
  1, 155, :_reduce_442,
  1, 158, :_reduce_443,
  1, 158, :_reduce_444,
  1, 222, :_reduce_445,
  0, 273, :_reduce_446,
  4, 222, :_reduce_447,
  2, 222, :_reduce_448,
  4, 224, :_reduce_449,
  2, 224, :_reduce_450,
  6, 274, :_reduce_451,
  8, 274, :_reduce_452,
  4, 274, :_reduce_453,
  6, 274, :_reduce_454,
  4, 274, :_reduce_455,
  6, 274, :_reduce_456,
  2, 274, :_reduce_457,
  4, 274, :_reduce_458,
  6, 274, :_reduce_459,
  2, 274, :_reduce_460,
  2, 274, :_reduce_461,
  4, 274, :_reduce_462,
  4, 274, :_reduce_463,
  1, 274, :_reduce_464,
  0, 274, :_reduce_465,
  1, 280, :_reduce_466,
  1, 280, :_reduce_467,
  1, 280, :_reduce_468,
  1, 280, :_reduce_469,
  1, 275, :_reduce_470,
  3, 275, :_reduce_471,
  3, 281, :_reduce_472,
  1, 276, :_reduce_473,
  3, 276, :_reduce_474,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  2, 277, :_reduce_477,
  1, 277, :_reduce_478,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  2, 279, :_reduce_481,
  2, 278, :_reduce_482,
  0, 278, :_reduce_483,
  1, 225, :_reduce_none,
  0, 284, :_reduce_485,
  5, 225, :_reduce_486,
  1, 213, :_reduce_487,
  2, 213, :_reduce_488,
  2, 213, :_reduce_489,
  1, 195, :_reduce_none,
  3, 195, :_reduce_491,
  3, 285, :_reduce_492,
  2, 285, :_reduce_493,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  1, 226, :_reduce_none,
  1, 226, :_reduce_none,
  0, 145, :_reduce_none,
  1, 145, :_reduce_none,
  0, 191, :_reduce_none,
  1, 191, :_reduce_none,
  0, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 223, :_reduce_513,
  1, 223, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_516,
  0, 146, :_reduce_517,
  0, 205, :_reduce_518 ]

racc_reduce_n = 519

racc_shift_n = 932

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :tIDENTIFIER => 50,
  :tFID => 51,
  :tGVAR => 52,
  :tIVAR => 53,
  :tCONSTANT => 54,
  :tLABEL => 55,
  :tCVAR => 56,
  :tNTH_REF => 57,
  :tBACK_REF => 58,
  :tSTRING_CONTENT => 59,
  :tINTEGER => 60,
  :tFLOAT => 61,
  :tREGEXP_END => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUMINUS_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tRBRACK => 93,
  :tLBRACE => 94,
  :tLBRACE_ARG => 95,
  :tSTAR => 96,
  :tSTAR2 => 97,
  :tAMPER => 98,
  :tAMPER2 => 99,
  :tTILDE => 100,
  :tPERCENT => 101,
  :tDIVIDE => 102,
  :tPLUS => 103,
  :tMINUS => 104,
  :tLT => 105,
  :tGT => 106,
  :tPIPE => 107,
  :tBANG => 108,
  :tCARET => 109,
  :tLCURLY => 110,
  :tRCURLY => 111,
  :tBACK_REF2 => 112,
  :tSYMBEG => 113,
  :tSTRING_BEG => 114,
  :tXSTRING_BEG => 115,
  :tREGEXP_BEG => 116,
  :tWORDS_BEG => 117,
  :tAWORDS_BEG => 118,
  :tSTRING_DBEG => 119,
  :tSTRING_DVAR => 120,
  :tSTRING_END => 121,
  :tSTRING => 122,
  :tSYMBOL => 123,
  :tNL => 124,
  :tEH => 125,
  :tCOLON => 126,
  :tCOMMA => 127,
  :tSPACE => 128,
  :tSEMI => 129,
  :tLAST_TOKEN => 130,
  :tLAMBDA => 131,
  :tLAMBEG => 132,
  :tEQL => 133,
  :tLOWEST => 134,
  "[" => 135 }

racc_nt_base = 136

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tLAMBDA",
  "tLAMBEG",
  "tEQL",
  "tLOWEST",
  "\"[\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "lambda_body",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_45(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_46(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_80(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_106(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

def _reduce_175(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_176(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], s(:resbody, s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_177(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_180(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_181(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_182(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_184(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_185(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_186(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :+, s(:arglist, val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :-, s(:arglist, val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :*, s(:arglist, val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :"/", s(:arglist, val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call val[0], :%, s(:arglist, val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call val[0], :**, s(:arglist, val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_195(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[1], :"-@", s(:arglist)
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"|", s(:arglist, val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"^", s(:arglist, val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :"&", s(:arglist, val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :"<=>", s(:arglist, val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :">", s(:arglist, val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :">=", s(:arglist, val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"<", s(:arglist, val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"<=", s(:arglist, val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_call val[0], :"==", s(:arglist, val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_call val[0], :"===", s(:arglist, val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_call val[0], :"!=", s(:arglist, val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_209(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_210(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_211(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
                    
    result
end

def _reduce_212(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 220 omitted

def _reduce_221(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_225(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_226(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_227(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_228(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_229(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 230 omitted

# reduce 231 omitted

def _reduce_232(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = self.arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat val[0], val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_239(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      args = self.list_prepend val[0], val[2]
                      result = self.arg_blk_pass args, val[3]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = self.arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = self.arg_concat s(:array, val[0]), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = self.arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = self.arg_blk_pass result, val[5]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = self.arg_blk_pass result, val[8]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_254(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_257(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_259(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_277(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_278(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_279(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_280(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_284(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_285(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_295(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_case nil, val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_310(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_311(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_class val
                      self.env.unextend
                    
    result
end

def _reduce_313(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_314(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_315(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_318(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_module val
                      self.env.unextend
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_defn val
                      self.env.unextend
                      self.in_def = false
                    
    result
end

def _reduce_322(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_323(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_329(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_345(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[1]
                      self.lexer.command_start = true
                    
    result
end

def _reduce_347(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_348(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_349(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_350(val, _values, result)
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_358(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_360(val, _values, result)
                      call = s(:call, nil, :lambda, s(:arglist))
                      result = s(:iter, call, nil, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      case val[0].size
                      when 1
                        args = 0
                      when 2
                        args = s(:lasgn, val[0][1])
                      else
                        vars = val[0][1..-1].map{|name| s(:lasgn, name)}
                        args = s(:masgn, s(:array, *vars))
                      end

                      call = s(:call, nil, :lambda, s(:arglist))
                      result = s(:iter, call, args, val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_364(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_365(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_366(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_367(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_368(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_369(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_371(val, _values, result)
                      result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = self.list_append val[0], s(:when, val[3], nil)
                    
    result
end

def _reduce_374(val, _values, result)
                      result = s(:array, s(:when, val[1], nil))
                    
    result
end

# reduce 375 omitted

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_378(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_379(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 380 omitted

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_387(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_392(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_393(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_396(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_399(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_402(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_403(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_406(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_407(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_408(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_409(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_410(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_411(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_412(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
end

def _reduce_414(val, _values, result)
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
end

def _reduce_415(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_416(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_417(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_420(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 421 omitted

# reduce 422 omitted

# reduce 423 omitted

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 426 omitted

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_429(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

def _reduce_435(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_436(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_437(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_438(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_439(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_440(val, _values, result)
 result = s(:lit, lexer.src.current_line) 
    result
end

def _reduce_441(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_443(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_444(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_445(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_446(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_448(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_449(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = args val[0], val[2], val[4], val[5]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[0]
                      val[2][1..-1].each do |lasgn| # FIX clean sexp iter
                        raise "wtf? #{lasgn.inspect}" unless lasgn[0] == :lasgn
                        result << lasgn[1]
                      end
                      result << val[4]
                      result << val[6].last
                      result << val[2]
                      result
                    
    result
end

def _reduce_453(val, _values, result)
                      result = args val[0], val[2],    nil, val[3]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0]
                      val[2][1..-1].each do |lasgn| # FIX clean sexp iter
                        raise "wtf? #{lasgn.inspect}" unless lasgn[0] == :lasgn
                        result << lasgn[1]
                      end
                      result << val[4].last
                      result << :"&#{val[5].last}" if val[5]
                      result << val[2]
                      result
                    
    result
end

def _reduce_455(val, _values, result)
                      result = args val[0],    nil, val[2], val[3]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0]
                      result << val[2]
                      result << val[4].last
                      result << :"&#{val[5].last}" if val[5]
                      result
                    
    result
end

def _reduce_457(val, _values, result)
                      result = args val[0],    nil,    nil, val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = args    nil, val[0], val[2], val[3]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:args)
                      val[0][1..-1].each do |lasgn| # FIX clean sexp iter
                        raise "wtf? #{lasgn.inspect}" unless lasgn[0] == :lasgn
                        result << lasgn[1]
                      end
                      result << val[2]
                      result << val[4].last
                      result << :"&#{val[5].last}" if val[5]
                      result << val[0]
                      result
                    
    result
end

def _reduce_460(val, _values, result)
                      result = args    nil, val[0],    nil, val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = args    nil,    nil, val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:args)
                      val[0][1..-1].each do |lasgn| # FIX clean sexp iter
                        raise "wtf? #{lasgn.inspect}" unless lasgn[0] == :lasgn
                        result << lasgn[1]
                      end
                      result << val[2].last
                      result << :"&#{val[3].last}" if val[3]
                      result << val[0]
                      result
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:args)
                      result << val[0]
                      result << val[2].last
                      result << :"&#{val[3].last}" if val[3]
                      result
                    
    result
end

def _reduce_464(val, _values, result)
                      result = args    nil,    nil,    nil, val[0]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = args    nil,    nil,    nil,    nil
                    
    result
end

def _reduce_466(val, _values, result)
                      yyerror "formal argument cannot be a constant: #{val[0]}"
                    
    result
end

def _reduce_467(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_468(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_469(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_471(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 475 omitted

# reduce 476 omitted

def _reduce_477(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_478(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 479 omitted

# reduce 480 omitted

def _reduce_481(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = nil
                    
    result
end

# reduce 484 omitted

def _reduce_485(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_487(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_489(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_492(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

def _reduce_513(val, _values, result)
 yyerrok 
    result
end

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
 yyerrok 
    result
end

def _reduce_517(val, _values, result)
 result = nil 
    result
end

def _reduce_518(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
