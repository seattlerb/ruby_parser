#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-276,498,199,200,262,-90,693,-276,-276,-276,199,200,-276,-276,-276,648',
'-276,-87,527,440,-64,532,568,527,-72,262,-276,-276,498,75,486,-86,498',
'485,539,-276,-276,76,-276,-276,-276,-276,-276,498,639,692,737,102,640',
'-432,736,-87,101,627,-85,567,-432,-72,-86,705,732,723,-87,720,-276,-276',
'-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,529,528',
'-276,-276,-276,529,528,-276,-90,261,-276,295,-85,-276,674,-276,-485',
'-276,538,-276,-87,-276,-276,-276,-276,-276,-276,-276,-82,-276,261,-276',
'102,102,-86,497,723,101,101,647,-79,-275,403,-489,-276,-276,-276,-276',
'-275,-276,-489,-489,-489,-276,-78,-485,-489,-489,102,-489,102,498,497',
'101,102,101,497,568,-489,101,219,102,728,626,-83,102,101,497,-489,-489',
'101,-489,-489,-489,-489,-489,-85,-90,-85,568,-86,-85,-86,723,-87,-86',
'-87,-275,-84,-87,567,216,504,-77,505,218,217,-489,-489,-489,-489,-489',
'-489,-489,-489,-489,-489,-489,-489,-489,-489,-282,567,-489,-489,-489',
'-89,555,-282,-282,-282,-489,-85,627,-282,-282,-79,-282,-489,723,-489',
'505,-489,-489,-489,-489,-489,-489,-489,262,-489,-489,-489,102,219,-83',
'-282,-282,101,-282,-282,-282,-282,-282,755,-489,-489,-77,-78,549,-489',
'102,-86,497,-489,-75,101,-88,102,-84,199,200,757,101,-77,-282,-282,-282',
'-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-76,-79,-282',
'-282,-282,-77,558,775,-89,-77,-282,-77,-352,760,-85,-85,527,-282,-79',
'-282,627,-282,-282,-282,-282,-282,-282,-282,-81,-282,102,-282,626,261',
'-77,101,-282,486,-79,-283,491,-486,-79,-282,-282,-282,-283,-80,-486',
'-282,597,-88,-84,-282,-486,-486,-486,598,-486,-88,568,-284,-486,-486',
'527,668,667,-486,-284,-486,-486,-486,-486,-486,-486,-486,529,528,534',
'-80,-486,-486,-486,-486,-486,-486,-486,198,761,473,762,527,-282,567',
'527,-283,-486,295,-437,-486,-486,-486,-486,-486,-486,-486,-486,-486',
'-486,763,-486,-486,597,-486,-486,-486,102,-284,626,598,486,101,219,488',
'529,528,540,-482,-82,-483,-489,264,-90,-489,-89,-486,558,264,-486,-486',
'-283,-486,-486,-83,-486,719,-486,-283,-486,714,-486,529,528,530,529',
'528,525,486,-486,295,488,-264,-505,-486,-486,-486,-486,-486,-486,-505',
'-505,-505,-486,-486,-505,-505,-505,-425,-505,-428,-489,-88,713,-489',
'-425,709,-428,-489,-505,-482,-489,-483,-485,732,723,-485,-283,-505,-505',
'-436,-505,-505,-505,-505,-505,707,-436,399,-436,247,-482,467,-483,-489',
'400,-436,-489,-284,468,476,507,196,644,522,-284,219,477,508,197,642',
'523,-428,440,-425,-282,-428,-489,-505,-428,-489,440,-282,702,102,-505',
'-275,-486,-328,101,264,-505,695,-275,445,-328,-436,216,445,-283,870',
'218,217,-282,401,-436,-283,871,466,678,-282,776,-505,-437,-284,-486',
'401,506,195,643,-485,-485,-485,676,-485,-505,578,-505,-485,-485,-505',
'-282,630,-485,578,-485,-485,-485,-485,-485,-485,-485,-275,821,-328,505',
'-485,-485,-485,-485,-485,-485,-485,473,-75,-283,869,255,-83,-282,471',
'472,-485,622,256,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485,821',
'-485,-485,-425,-485,-485,-485,102,288,289,-425,-435,101,665,664,668',
'667,-433,-435,-81,578,-431,788,-89,-433,295,-485,694,-431,-485,-485',
'-430,-485,-485,616,-485,682,-485,-430,-485,264,-485,550,-434,264,665',
'664,668,667,-485,-434,199,200,-505,-485,-485,-485,-485,-485,-485,-505',
'-505,-505,-485,-485,-505,-505,-505,615,-505,366,219,-86,238,368,367',
'479,-76,793,-505,602,-84,-263,-79,199,200,797,-87,-505,-505,741,-505',
'-505,-505,-505,-505,199,200,800,601,442,387,216,802,443,600,218,217',
'214,215,238,805,142,143,599,140,124,125,126,295,129,131,767,768,127',
'769,96,97,-505,144,145,132,133,594,578,-505,219,219,809,219,264,-505',
'219,264,813,137,136,814,123,141,139,138,134,135,130,128,121,295,122',
'548,-263,146,-505,104,105,106,107,108,546,544,65,66,67,825,54,-505,826',
'-505,59,60,-505,537,533,63,827,61,62,64,26,27,68,69,510,509,831,359',
'25,31,30,91,90,92,93,834,493,20,836,837,838,490,545,295,44,219,475,95',
'94,85,53,87,86,88,89,96,97,847,83,84,848,41,42,40,219,223,228,229,230',
'225,227,235,236,231,232,474,212,213,264,852,233,234,295,204,855,856',
'208,760,760,55,56,761,57,267,469,216,862,222,43,218,217,214,215,226',
'224,220,21,221,463,578,462,81,75,77,78,79,80,578,461,-63,76,82,102,237',
'264,-219,872,101,65,66,67,10,54,445,440,437,59,60,434,405,404,63,402',
'61,62,64,26,27,68,69,370,369,884,349,25,31,30,91,90,92,93,615,346,20',
'325,295,287,286,545,9,44,11,12,95,94,85,53,87,86,88,89,96,97,893,83',
'84,894,41,42,40,219,223,228,229,230,225,227,235,236,231,232,760,212',
'213,896,578,233,234,238,39,578,900,33,194,193,55,56,192,57,191,35,216',
'98,222,43,218,217,214,215,226,224,220,21,221,3,578,,81,75,77,78,79,80',
',,,76,82,,237,,,,359,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,219,,20,104,105,106,107,108,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,216,,,,218,217,214',
'215,104,105,106,107,108,,,,,39,,,33,,,55,56,,57,,35,,,,43,,661,,,659',
'658,660,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,665,664,668,667,25,31,30,91,90,92,93,,,20',
',,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,',
',,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,661,,,659,658,660,21,,',
',,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,665,664,668,667,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,',
',233,234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,,,220',
'21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233',
'234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,,,220,21,221',
',,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,219,223,228,229,230,225,227,,',
'231,232,,,,,,233,234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214',
'215,226,224,220,21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,,',
',,,,,,,,,,,,,233,234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214',
'215,,,220,21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,-507,-507',
'-507,-507,225,227,,,-507,-507,,,,,,233,234,,39,,,33,,,55,56,,57,,35',
'216,,222,43,218,217,214,215,226,224,220,21,221,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,219,223,228,229,230,225,227,235,236,231,232,,-507,-507',
',,233,234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,226,224',
'220,21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,',
',,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,-507,-507,-507',
'-507,225,227,,,-507,-507,,,,,,233,234,,39,,,33,,,55,56,,57,,35,216,',
'222,43,218,217,214,215,226,224,220,21,221,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,219,223,228,229,230,225,227,235,236,231,232,,-507,-507,,,233',
'234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,226,224,220',
'21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233',
'234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,,,220,21,221',
',,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,219,223,228,229,230,225,227,235',
',231,232,,,,,,233,234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214',
'215,226,224,220,21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,-507',
'-507,-507,-507,225,227,,,-507,-507,,,,,,233,234,,39,,,33,,,55,56,,57',
',35,216,,222,43,218,217,214,215,226,224,220,21,221,,,,81,75,77,78,79',
'80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,',
',,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,219,-507,-507,-507,-507,225,227,,,-507,-507,',
',,,,233,234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,226',
'224,220,21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,-507,-507',
'-507,-507,225,227,,,-507,-507,,,,,,233,234,,39,,,33,,,55,56,,57,,35',
'216,,222,43,218,217,214,215,226,224,220,21,221,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,219,-507,-507,-507,-507,225,227,,,-507,-507,,,,,,233',
'234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,226,224,220',
'21,221,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233',
'234,,39,,,269,,,55,56,,57,,35,216,,222,43,218,217,214,215,,,,21,,,,',
'81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64',
'26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233,234,,39,,',
'269,,,55,56,,57,,35,216,,222,43,218,217,214,215,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233,234,,39,,,33,,,55,56,',
'57,,35,216,,,43,218,217,214,215,,,,21,,,,,81,75,77,78,79,80,,,,76,82',
'8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,39,,,269,,,55,56,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,',
',43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,',
',,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,',
'63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55',
'56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,204,,,208,,,55,56,,57,,302,,,,43,,,,,,,,211,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,302,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,',
',,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92',
'93,,,,,,,,,,280,,,95,94,85,53,87,86,88,89,96,97,661,83,84,659,658,660',
'284,,,,,,,,,,,,,,,,,,,,319,,,33,,,55,56,,57,,35,652,,,,,,,665,664,668',
'667,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,740,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,302,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,',
',76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279',
'283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55',
'56,,57,,377,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,-482,-482',
'-482,,-482,,,,-482,-482,,,,-482,,-482,-482,-482,-482,-482,-482,-482',
',-482,,,-482,-482,-482,-482,-482,-482,-482,,,,,,,,,,-482,,,-482,-482',
'-482,-482,-482,-482,-482,-482,-482,-482,,-482,-482,,-482,-482,-482,',
',,,,,,,,,,,,,,,,,,-482,,,-482,-482,,-482,-482,,-482,,-482,,-482,,-482',
',,,,,,,-482,,-482,,,-482,-482,-482,-482,-482,-482,,,,-482,-482,-483',
'-483,-483,,-483,,,,-483,-483,,,,-483,,-483,-483,-483,-483,-483,-483',
'-483,,-483,,,-483,-483,-483,-483,-483,-483,-483,,,,,,,,,,-483,,,-483',
'-483,-483,-483,-483,-483,-483,-483,-483,-483,,-483,-483,,-483,-483,-483',
',,,,,,,,,,,,,,,,,,,-483,,,-483,-483,,-483,-483,,-483,,-483,,-483,,-483',
',,,,,,,-483,,-483,,,-483,-483,-483,-483,-483,-483,,,,-483,-483,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,570,,247,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,',
',95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204',
',,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,',
',,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60,,,',
'63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,377,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,',
',76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,377,,,,43,,,,,,,,211,,',
',,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,',
'44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,',
',,,204,,,208,,,55,56,,57,,302,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,',
',25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,',
',,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,280,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,661,,284,659,658,660,,,,,,,,,,,,',
',,,,319,,,33,,,55,56,,57,,35,,,,,652,,,,,,697,665,664,668,667,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,',
',,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,681,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,449,56,,57,,245,,247,,43,,,,,,,,211,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55',
'56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,204,,,208,,,55,56,,57,,245,,247,,43,,,,,,,,211,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,459,55,56,,57,,245,,247',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173',
'163,162,,,178,161,160,155,181,,,165,154,168,172,174,166,159,,,175,182',
'177,176,169,179,164,152,171,170,183,184,185,186,187,151,158,149,150',
'147,148,112,114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127',
',,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130',
'128,121,,122,,,146,81,156,167,157,180,153,173,163,162,,82,178,161,160',
'155,181,,,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164',
'152,171,170,183,184,185,186,187,151,158,149,150,147,148,112,114,111',
',113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132',
'133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,',
'146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,280,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,,,284,,,,,,,,,,,,,,,,,,,,277,,,208,,,55,56,,57,,,,,,,,,,,,,,,,,',
',81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250',
'251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57',
',866,,247,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,204,,,208,,,55,56,,57,,863,,247,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,280,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,,,284,,,,,,,,,,,,,,,,,,,,277,,,208,,,55,56,,57,,,,,,,',
',,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,280,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,,,284,,,,,,,,,,,,,,,,,,,,277,,,274,',
',55,56,,57,,273,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
'20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,',
',25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,',
',,,,,21,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162',
',,178,161,160,155,181,,,165,154,168,172,174,166,159,,,175,182,177,176',
'169,179,164,152,171,170,183,184,185,186,187,151,158,149,150,147,148',
'112,114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121',
',122,,,146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,302,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,779,,247,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,784,,247,,43,,,,,,,,211',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55',
'56,,57,,786,,247,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,-253',
'-253,-253,,-253,,,,-253,-253,,,,-253,,-253,-253,-253,-253,-253,-253',
'-253,,,,,-253,-253,-253,-253,-253,-253,-253,,,,,,,,,,-253,,,-253,-253',
'-253,-253,-253,-253,-253,-253,-253,-253,,-253,-253,,-253,-253,-253,',
',,,,,,,,,,,,,,,,,,-253,,,-253,267,,-253,-253,,-253,,-253,,-253,,-253',
',,,,,,,-253,,,,,-253,-253,-253,-253,-253,-253,,,,-253,-253,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,849,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,618,,,,43,,,,,,,,211,,',
',,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57',
',,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,',
',,280,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,284,,,,,,,,,,,,,,,,',
',,,843,,,208,,,55,56,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,479,,55,56,,57,,,,,,43,,,,,,,,211,,',
',,81,75,77,78,79,80,,,,76,82,-253,-253,-253,,-253,,,,-253,-253,,,,-253',
',-253,-253,-253,-253,-253,-253,-253,,,,,-253,-253,-253,-253,-253,-253',
'-253,,,,,,,,,,-253,,,-253,-253,-253,-253,-253,-253,-253,-253,-253,-253',
',-253,-253,,-253,-253,-253,,,,,,,,,,,,,,,,,,,,-253,,,-253,264,,-253',
'-253,,-253,,-253,,-253,,-253,,,,,,,,-253,,,,,-253,-253,-253,-253,-253',
'-253,,,,-253,-253,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,302,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
'588,,247,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,',
',,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,',
',55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
'20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,574,,247',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,570,,247,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,898,,247,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,280,,,95,94,511,53,87,86',
'512,89,96,97,,83,84,,,,284,,,,,,,,,,,,,,,,,,,,513,,,208,,,55,56,,57',
',,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,',
',,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,280',
',,95,94,511,53,87,86,512,89,96,97,,83,84,,,,284,,,,,,,,,,,,,,,,,,,,513',
',,208,,,55,56,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,279,283,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,302,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,-488,-488,-488,,-488,',
',,-488,-488,,,,-488,,-488,-488,-488,-488,-488,-488,-488,,,,,-488,-488',
'-488,-488,-488,-488,-488,,,,,,,,,,-488,,,-488,-488,-488,-488,-488,-488',
'-488,-488,-488,-488,,-488,-488,,-488,-488,-488,,,,,,,,,,,,,,,,,,,,-488',
',,-488,-488,,-488,-488,,-488,,-488,,-488,,-488,,,,,,,,-488,,,,,-488',
'-488,-488,-488,-488,-488,,,,-488,-488,-487,-487,-487,,-487,,,,-487,-487',
',,,-487,,-487,-487,-487,-487,-487,-487,-487,,,,,-487,-487,-487,-487',
'-487,-487,-487,,,,,,,,,,-487,,,-487,-487,-487,-487,-487,-487,-487,-487',
'-487,-487,,-487,-487,,-487,-487,-487,,,,,,,,,,,,,,,,,,,,-487,,,-487',
'-487,,-487,-487,,-487,,-487,,-487,,-487,,,,,,,,-487,,,,,-487,-487,-487',
'-487,-487,-487,,,,-487,-487,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250',
'251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57',
',245,,247,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,204,,,208,,,55,56,,57,,245,,247,,43,,,,,,,,211,,,,,81,75,77',
'78,79,80,,,,76,82,-253,-253,-253,,-253,,,,-253,-253,,,,-253,,-253,-253',
'-253,-253,-253,-253,-253,,,,,-253,-253,-253,-253,-253,-253,-253,,,,',
',,,,,-253,,,-253,-253,-253,-253,-253,-253,-253,-253,-253,-253,,-253',
'-253,,-253,-253,-253,,,,,,,,,,,,,,,,,,,,-253,,,-253,264,,-253,-253,',
'-253,,-253,,-253,,-253,,,,,,,,-253,,,,,-253,-253,-253,-253,-253,-253',
',,,-253,-253,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,',
',249,279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,',
',,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,279,283,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,245,,247,,43,,,,,,,,211,,,',
',81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,,,178,161',
'160,155,181,,,165,154,168,172,174,166,159,,,175,182,177,176,169,179',
'164,152,171,170,183,184,185,186,187,151,158,149,150,147,148,112,114',
',,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132',
'133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,',
'146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'279,283,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162',
',,178,161,160,155,181,,,165,154,168,172,174,166,159,,,175,182,177,176',
'169,179,164,152,171,170,183,184,185,186,187,151,158,149,150,147,148',
'112,114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121',
',122,,,146,156,167,157,180,153,173,163,162,,,178,161,160,155,181,,,165',
'154,168,172,174,166,159,,,175,182,177,333,332,334,331,152,171,170,183',
'184,185,186,187,151,158,149,150,329,330,327,114,87,86,328,89,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,339,,,',
',,,137,136,,123,141,139,138,134,135,130,128,121,,122,,,146,156,167,157',
'180,153,173,163,162,,,178,161,160,155,181,,,165,154,168,172,174,166',
'159,,,175,182,177,176,169,179,164,152,171,170,183,184,185,186,187,151',
'158,149,150,147,148,112,114,356,355,113,357,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,636,393,146,,637,,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,',
'123,141,139,138,134,135,130,128,121,,122,634,387,146,,635,,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
'137,136,,123,141,139,138,134,135,130,128,121,,122,559,387,146,,560,',
',,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,',
',,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,442,387',
'146,,443,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'384,387,146,,385,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,561,393,146,,562,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,,,146,219,223,228,229,230,225,227,235,236,231,232,',
'212,213,,,233,234,,,,-219,,,,,,,,,,216,,222,,218,217,214,215,226,224',
'220,,221,,,,,,,890,393,,,891,,,,,237,,-219,142,143,,140,124,125,126',
',129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139',
'138,134,135,130,128,121,,122,389,393,146,,391,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,561,393,146,,562,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,559,387,146,,560,,,,,',
',,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,',
',,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,442,387,146',
',443,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132',
'133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,607',
'393,146,,608,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121',
',122,604,387,146,,605,,,,,,,,142,143,,140,124,125,126,,129,131,,,127',
',,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130',
'128,121,,122,888,387,146,,889,,,,,,,,142,143,,140,124,125,126,,129,131',
',,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,743,393,146,,744,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134',
'135,130,128,121,,122,442,387,146,,443,,,,,,,,142,143,,140,124,125,126',
',129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139',
'138,134,135,130,128,121,,122,442,387,146,,443,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,,,146,219,223,228,229,230,225,227',
'235,236,231,232,,212,213,,,233,234,,,,,,,,,,,,,,216,,222,,218,217,214',
'215,226,224,220,,221,,,,,,,,,,,,,,,,237,,578,219,223,228,229,230,225',
'227,235,236,231,232,,212,213,,,233,234,,,,,,,,,,,,,,216,,222,,218,217',
'214,215,226,224,220,,221,,219,223,228,229,230,225,227,235,236,231,232',
',212,213,237,565,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226',
'224,220,,221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237',
'233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219',
'223,228,229,230,225,227,235,236,231,232,,212,213,,237,233,234,,,,,,',
',,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219,223,228,229,230',
'225,227,235,236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216,,222',
',218,217,214,215,226,224,220,,221,219,223,228,229,230,225,227,235,236',
'231,232,,212,213,295,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214',
'215,226,224,220,,221,219,223,228,229,230,225,227,235,236,231,232,,212',
'213,,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220',
',221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237,233,234',
',,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219,223,228',
'229,230,225,227,235,236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216',
',222,,218,217,214,215,226,224,220,,221,219,223,228,229,230,225,227,235',
'236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214',
'215,226,224,220,,221,219,223,228,229,230,225,227,235,236,231,232,,212',
'213,,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220',
',221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237,233,234',
',,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219,223,228',
'229,230,225,227,235,236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216',
',222,,218,217,214,215,226,224,220,,221,219,223,228,229,230,225,227,235',
'236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214',
'215,226,224,220,,221,219,223,228,229,230,225,227,235,236,231,232,,212',
'213,295,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220',
',221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237,233,234',
',,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,,,,,,,,,,,,',
',,,237' ]
        racc_action_table = arr = Array.new(23714, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'53,311,671,671,281,320,560,53,53,53,613,613,53,53,53,517,53,635,345',
'586,601,345,584,535,461,58,53,53,310,73,300,636,739,300,350,53,53,73',
'53,53,53,53,53,796,513,559,631,750,513,334,629,560,750,742,888,584,334',
'601,890,586,873,873,889,613,53,53,53,53,53,53,53,53,53,53,53,53,53,53',
'345,345,53,53,53,535,535,53,320,281,53,671,559,53,535,53,636,53,350',
'53,635,53,53,53,53,53,53,53,320,53,58,53,5,311,636,311,623,5,311,517',
'635,844,205,389,53,53,53,53,844,53,389,389,389,53,636,890,389,389,517',
'389,310,801,310,517,739,310,739,432,389,739,409,742,617,742,317,796',
'742,796,389,389,796,389,389,389,389,389,888,205,888,451,890,888,890',
'614,889,890,889,844,741,889,432,409,315,604,315,409,409,389,389,389',
'389,389,389,389,389,389,389,389,389,389,389,391,451,389,389,389,509',
'389,391,391,391,389,634,500,391,391,605,391,389,850,389,850,389,389',
'389,389,389,389,389,29,389,389,389,811,612,317,391,391,811,391,391,391',
'391,391,654,389,389,604,389,384,389,801,389,801,389,317,801,637,648',
'741,649,649,655,648,604,391,391,391,391,391,391,391,391,391,391,391',
'391,391,391,741,605,391,391,391,604,391,695,509,604,391,384,29,656,634',
'384,347,391,605,391,501,391,391,391,391,391,391,391,509,391,500,391',
'500,29,634,500,608,304,605,469,304,637,605,608,391,391,469,391,608,391',
'717,391,695,391,562,562,562,717,562,637,452,719,562,562,352,760,760',
'562,719,562,562,562,562,562,562,562,347,347,347,637,562,562,562,562',
'562,562,562,17,661,402,666,343,608,452,341,469,562,717,203,562,562,562',
'562,562,562,562,562,562,562,669,562,562,455,562,562,562,501,719,501',
'455,307,501,611,307,352,352,352,511,17,512,607,609,17,743,402,562,562',
'606,562,562,872,562,562,203,562,603,562,872,562,596,562,343,343,343',
'341,341,341,301,562,455,301,680,441,562,562,562,562,562,562,441,441',
'441,562,562,441,441,441,511,441,512,607,562,595,743,511,590,512,607',
'441,511,743,512,607,621,621,743,872,441,441,841,441,441,441,441,441',
'587,841,202,275,578,511,276,512,607,202,275,743,900,276,290,318,16,515',
'336,900,408,290,318,16,515,336,328,576,511,744,512,607,441,328,743,573',
'744,571,653,441,278,744,45,653,441,441,563,278,556,45,841,408,551,640',
'842,408,408,891,202,275,640,842,276,543,891,698,441,38,900,891,290,318',
'16,515,561,561,561,539,561,441,700,441,561,561,441,744,503,561,703,561',
'561,561,561,561,561,561,278,757,45,502,561,561,561,561,561,561,561,287',
'38,640,842,28,38,891,284,284,561,496,28,561,561,561,561,561,561,561',
'561,561,561,856,561,561,327,561,561,561,314,40,40,327,329,314,757,757',
'757,757,331,329,287,708,333,710,287,331,482,561,561,333,561,561,332',
'561,561,481,561,548,561,332,561,715,561,385,330,716,856,856,856,856',
'561,330,309,309,444,561,561,561,561,561,561,444,444,444,561,561,444',
'444,444,480,444,111,428,561,718,111,111,470,548,721,444,465,548,724',
'385,18,18,725,385,444,444,633,444,444,444,444,444,297,297,730,460,598',
'598,428,733,598,458,428,428,428,428,457,738,598,598,456,598,598,598',
'598,454,598,598,672,672,598,672,672,672,444,598,598,598,598,453,438',
'444,413,412,746,411,444,444,410,390,751,598,598,752,598,598,598,598',
'598,598,598,598,598,753,598,383,379,598,444,7,7,7,7,7,376,371,63,63',
'63,765,63,444,771,444,63,63,444,349,346,63,777,63,63,63,63,63,63,63',
'321,319,782,316,63,63,63,63,63,63,63,785,305,63,789,790,791,303,374',
'299,63,292,289,63,63,63,63,63,63,63,63,63,63,803,63,63,804,63,63,63',
'374,374,374,374,374,374,374,374,374,374,374,288,374,374,283,810,374',
'374,280,63,815,816,63,817,820,63,63,821,63,279,277,374,829,374,63,374',
'374,374,374,374,374,374,63,374,272,832,271,63,63,63,63,63,63,835,270',
'268,63,63,63,374,260,374,843,63,100,100,100,100,100,257,248,244,100',
'100,243,207,206,100,204,100,100,100,100,100,100,100,190,188,864,80,100',
'100,100,100,100,100,100,868,79,100,65,44,39,37,564,100,100,100,100,100',
'100,100,100,100,100,100,100,100,100,878,100,100,879,100,100,100,564',
'564,564,564,564,564,564,564,564,564,564,880,564,564,881,882,564,564',
'23,100,885,887,100,15,14,100,100,13,100,12,100,564,3,564,100,564,564',
'564,564,564,564,564,100,564,1,901,,100,100,100,100,100,100,,,,100,100',
',564,,,,100,370,370,370,370,370,370,,,,370,370,,,,370,,370,370,370,370',
'370,370,370,,,,,370,370,370,370,370,370,370,427,,370,109,109,109,109',
'109,370,370,370,370,370,370,370,370,370,370,370,370,370,370,,370,370',
',370,370,370,,,427,,,,427,427,427,427,358,358,358,358,358,,,,,370,,',
'370,,,370,370,,370,,370,,,,370,,755,,,755,755,755,370,,,,,370,370,370',
'370,370,370,,,,370,370,711,711,711,711,711,711,,,,711,711,,,,711,,711',
'711,711,711,711,711,711,755,755,755,755,711,711,711,711,711,711,711',
',,711,,,,,,711,711,711,711,711,711,711,711,711,711,711,711,711,711,',
'711,711,,711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,711,,711',
',,,711,,652,,,652,652,652,711,,,,,711,711,711,711,711,711,,,,711,711',
'712,712,712,712,712,712,,,,712,712,,,,712,,712,712,712,712,712,712,712',
'652,652,652,652,712,712,712,712,712,712,712,,,712,,,,,,712,712,712,712',
'712,712,712,712,712,712,712,712,712,712,,712,712,,712,712,712,420,,',
',,,,,,,,,,,,,420,420,,712,,,712,,,712,712,,712,,712,420,,420,712,420',
'420,420,420,,,420,712,420,,,,712,712,712,712,712,712,,,,712,712,723',
'723,723,723,723,723,,,,723,723,,,,723,,723,723,723,723,723,723,723,',
',,,723,723,723,723,723,723,723,,,723,,,,,,723,723,723,723,723,723,723',
'723,723,723,723,723,723,723,,723,723,,723,723,723,419,,,,,,,,,,,,,,',
',419,419,,723,,,723,,,723,723,,723,,723,419,,419,723,419,419,419,419',
',,419,723,419,,,,723,723,723,723,723,723,,,,723,723,734,734,734,734',
'734,734,,,,734,734,,,,734,,734,734,734,734,734,734,734,,,,,734,734,734',
'734,734,734,734,,,734,,,,,,734,734,734,734,734,734,734,734,734,734,734',
'734,734,734,,734,734,,734,734,734,429,429,429,429,429,429,429,,,429',
'429,,,,,,429,429,,734,,,734,,,734,734,,734,,734,429,,429,734,429,429',
'429,429,429,429,429,734,429,,,,734,734,734,734,734,734,,,,734,734,735',
'735,735,735,735,735,,,,735,735,,,,735,,735,735,735,735,735,735,735,',
',,,735,735,735,735,735,735,735,,,735,,,,,,735,735,735,735,735,735,735',
'735,735,735,735,735,735,735,,735,735,,735,735,735,418,,,,,,,,,,,,,,',
',418,418,,735,,,735,,,735,735,,735,,735,418,,418,735,418,418,418,418',
',,418,735,418,,,,735,735,735,735,735,735,,,,735,735,499,499,499,499',
'499,499,,,,499,499,,,,499,,499,499,499,499,499,499,499,,,,,499,499,499',
'499,499,499,499,,,499,,,,,,499,499,499,499,499,499,499,499,499,499,499',
'499,499,499,,499,499,,499,499,499,426,426,426,426,426,426,426,,,426',
'426,,,,,,426,426,,499,,,499,,,499,499,,499,,499,426,,426,499,426,426',
'426,426,426,426,426,499,426,,,,499,499,499,499,499,499,,,,499,499,504',
'504,504,504,504,504,,,,504,504,,,,504,,504,504,504,504,504,504,504,',
',,,504,504,504,504,504,504,504,,,504,,,,,,504,504,504,504,504,504,504',
'504,504,504,504,504,504,504,,504,504,,504,504,504,407,407,407,407,407',
'407,407,407,407,407,407,,407,407,,,407,407,,504,,,504,,,504,504,,504',
',504,407,,407,504,407,407,407,407,407,407,407,504,407,,,,504,504,504',
'504,504,504,,,,504,504,747,747,747,747,747,747,,,,747,747,,,,747,,747',
'747,747,747,747,747,747,,,,,747,747,747,747,747,747,747,,,747,,,,,,747',
'747,747,747,747,747,747,747,747,747,747,747,747,747,,747,747,,747,747',
'747,425,425,425,425,425,425,425,,,425,425,,,,,,425,425,,747,,,747,,',
'747,747,,747,,747,425,,425,747,425,425,425,425,425,425,425,747,425,',
',,747,747,747,747,747,747,,,,747,747,651,651,651,651,651,651,,,,651',
'651,,,,651,,651,651,651,651,651,651,651,,,,,651,651,651,651,651,651',
'651,,,651,,,,,,651,651,651,651,651,651,651,651,651,651,651,651,651,651',
',651,651,,651,651,651,406,406,406,406,406,406,406,406,406,406,406,,406',
'406,,,406,406,,651,,,651,,,651,651,,651,,651,406,,406,651,406,406,406',
'406,406,406,406,651,406,,,,651,651,651,651,651,651,,,,651,651,650,650',
'650,650,650,650,,,,650,650,,,,650,,650,650,650,650,650,650,650,,,,,650',
'650,650,650,650,650,650,,,650,,,,,,650,650,650,650,650,650,650,650,650',
'650,650,650,650,650,,650,650,,650,650,650,421,,,,,,,,,,,,,,,,421,421',
',650,,,650,,,650,650,,650,,650,421,,421,650,421,421,421,421,,,421,650',
'421,,,,650,650,650,650,650,650,,,,650,650,495,495,495,495,495,495,,',
',495,495,,,,495,,495,495,495,495,495,495,495,,,,,495,495,495,495,495',
'495,495,,,495,,,,,,495,495,495,495,495,495,495,495,495,495,495,495,495',
'495,,495,495,,495,495,495,430,430,430,430,430,430,430,430,,430,430,',
',,,,430,430,,495,,,495,,,495,495,,495,,495,430,,430,495,430,430,430',
'430,430,430,430,495,430,,,,495,495,495,495,495,495,,,,495,495,781,781',
'781,781,781,781,,,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,781',
'781,781,781,781,781,781,,,781,,,,,,781,781,781,781,781,781,781,781,781',
'781,781,781,781,781,,781,781,,781,781,781,423,423,423,423,423,423,423',
',,423,423,,,,,,423,423,,781,,,781,,,781,781,,781,,781,423,,423,781,423',
'423,423,423,423,423,423,781,423,,,,781,781,781,781,781,781,,,,781,781',
'793,793,793,793,793,793,,,,793,793,,,,793,,793,793,793,793,793,793,793',
',,,,793,793,793,793,793,793,793,,,793,,,,,,793,793,793,793,793,793,793',
'793,793,793,793,793,793,793,,793,793,,793,793,793,422,422,422,422,422',
'422,422,,,422,422,,,,,,422,422,,793,,,793,,,793,793,,793,,793,422,,422',
'793,422,422,422,422,422,422,422,793,422,,,,793,793,793,793,793,793,',
',,793,793,296,296,296,296,296,296,,,,296,296,,,,296,,296,296,296,296',
'296,296,296,,,,,296,296,296,296,296,296,296,,,296,,,,,,296,296,296,296',
'296,296,296,296,296,296,296,296,296,296,,296,296,,296,296,296,417,417',
'417,417,417,417,417,,,417,417,,,,,,417,417,,296,,,296,,,296,296,,296',
',296,417,,417,296,417,417,417,417,417,417,417,296,417,,,,296,296,296',
'296,296,296,,,,296,296,806,806,806,806,806,806,,,,806,806,,,,806,,806',
'806,806,806,806,806,806,,,,,806,806,806,806,806,806,806,,,806,,,,,,806',
'806,806,806,806,806,806,806,806,806,806,806,806,806,,806,806,,806,806',
'806,424,424,424,424,424,424,424,,,424,424,,,,,,424,424,,806,,,806,,',
'806,806,,806,,806,424,,424,806,424,424,424,424,424,424,424,806,424,',
',,806,806,806,806,806,806,,,,806,806,33,33,33,33,33,33,,,,33,33,,,,33',
',33,33,33,33,33,33,33,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,414,,,,,,,,,,,,,,,,414',
'414,,33,,,33,,,33,33,,33,,33,414,,414,33,414,414,414,414,,,,33,,,,,33',
'33,33,33,33,33,,,,33,33,274,274,274,274,274,274,,,,274,274,,,,274,,274',
'274,274,274,274,274,274,,,,,274,274,274,274,274,274,274,,,274,,,,,,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,,274,274,,274,274',
'274,415,,,,,,,,,,,,,,,,415,415,,274,,,274,,,274,274,,274,,274,415,,415',
'274,415,415,415,415,,,,274,,,,,274,274,274,274,274,274,,,,274,274,840',
'840,840,840,840,840,,,,840,840,,,,840,,840,840,840,840,840,840,840,',
',,,840,840,840,840,840,840,840,,,840,,,,,,840,840,840,840,840,840,840',
'840,840,840,840,840,840,840,,840,840,,840,840,840,416,,,,,,,,,,,,,,',
',416,416,,840,,,840,,,840,840,,840,,840,416,,,840,416,416,416,416,,',
',840,,,,,840,840,840,840,840,840,,,,840,840,269,269,269,269,269,269',
',,,269,269,,,,269,,269,269,269,269,269,269,269,,,,,269,269,269,269,269',
'269,269,,,269,,,,,,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,269',
',269,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,,,,269,269,846,846',
'846,846,846,846,,,,846,846,,,,846,,846,846,846,846,846,846,846,,,,,846',
'846,846,846,846,846,846,,,846,,,,,,846,846,846,846,846,846,846,846,846',
'846,846,846,846,846,,846,846,,846,846,846,,,,,,,,,,,,,,,,,,,,846,,,846',
',,846,846,,846,,846,,,,846,,,,,,,,846,,,,,846,846,846,846,846,846,,',
',846,846,208,208,208,208,208,208,,,,208,208,,,,208,,208,208,208,208',
'208,208,208,,,,,208,208,208,208,208,208,208,,,208,,,,,,208,208,208,208',
'208,208,208,208,208,208,208,208,208,208,,208,208,,208,208,208,,,,,,',
',,,,,,,,,,,,,208,,,208,,,208,208,,208,,208,,,,208,,,,,,,,208,,,,,208',
'208,208,208,208,208,,,,208,208,851,851,851,851,851,851,,,,851,851,,',
',851,,851,851,851,851,851,851,851,,,,,851,851,851,851,851,851,851,,',
'851,,,,,,851,851,851,851,851,851,851,851,851,851,851,851,851,851,,851',
'851,,851,851,851,,,,,,,,,,,,,,,,,,,,851,,,851,,,851,851,,851,,851,,',
',851,,,,,,,,851,,,,,851,851,851,851,851,851,,,,851,851,854,854,854,854',
'854,854,,,,854,854,,,,854,,854,854,854,854,854,854,854,,,,,854,854,854',
'854,854,854,854,,,854,,,,,,854,854,854,854,854,854,854,854,854,854,854',
'854,854,854,,854,854,,854,854,854,,,,,,,,,,,,,,,,,,,,854,,,854,,,854',
'854,,854,,854,,,,854,,,,,,,,854,,,,,854,854,854,854,854,854,,,,854,854',
'191,191,191,191,191,191,,,,191,191,,,,191,,191,191,191,191,191,191,191',
',,,,191,191,191,191,191,191,191,,,191,,,,,,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,,191,191,,191,191,191,,,,,,,,,,,,,,,,,,',
',191,,,191,,,191,191,,191,,191,,,,191,,,,,,,,191,,,,,191,191,191,191',
'191,191,,,,191,191,860,860,860,860,860,860,,,,860,860,,,,860,,860,860',
'860,860,860,860,860,,,,,860,860,860,860,860,860,860,,,860,,,,,,860,860',
'860,860,860,860,860,860,860,860,860,860,860,860,,860,860,,860,860,860',
',,,,,,,,,,,,,,,,,,,860,,,860,,,860,860,,860,,860,,,,860,,,,,,,,860,',
',,,860,860,860,860,860,860,,,,860,860,699,699,699,699,699,699,,,,699',
'699,,,,699,,699,699,699,699,699,699,699,,,,,699,699,699,699,699,699',
'699,,,699,,,,,,699,699,699,699,699,699,699,699,699,699,699,699,699,699',
',699,699,,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699,,699,,699',
',,,699,,,,,,,,699,,,,,699,699,699,699,699,699,,,,699,699,673,673,673',
'673,673,673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,673,673',
'673,673,673,673,673,,,673,,,,,,673,673,673,673,673,673,673,673,673,673',
'673,673,673,673,,673,673,,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,',
',673,673,,673,,673,,,,673,,,,,,,,673,,,,,673,673,673,673,673,673,,,',
'673,673,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2,2,2,,,2',
',,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,',
'2,,,2,2,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,219,219,219,,219',
',,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,219,219,219,219,219',
'219,219,,,,,,,,,,219,,,219,219,219,219,219,219,219,219,219,219,,219',
'219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,219,,,,,,219',
',,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,56,56,56,,56,,,,56',
'56,,,,56,,56,56,56,56,56,56,56,,,,,56,56,56,56,56,56,56,,,,,,,,,,56',
',,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56,,,,,,,,,,,,,,,,,,,',
'56,,,56,,,56,56,,56,,56,,,,56,,,,,,,,56,,,,,56,56,56,56,56,56,,,,56',
'56,57,57,57,,57,,,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57',
'57,57,57,,,,,,,,,,57,,,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57',
',,,,,,,,,,,,,,,,,,,57,,,57,,,57,57,,57,,,,,,57,,,,,,,,57,,,,,57,57,57',
'57,57,57,,,,57,57,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643',
'643,643,643,,,,,643,643,643,643,643,643,643,,,,,,,,,,643,,,643,643,643',
'643,643,643,643,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,',
',643,,,643,,,643,643,,643,,643,,,,643,,,,,,,,643,,,,,643,643,643,643',
'643,643,,,,643,643,59,59,59,,59,,,,59,59,,,,59,,59,59,59,59,59,59,59',
',,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59',
'59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,59,,,,,,59,',
',,,,,,59,,,,,59,59,59,59,59,59,,,,59,59,60,60,60,,60,,,,60,60,,,,60',
',60,60,60,60,60,60,60,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60',
'60,60,60,60,60,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60',
',,60,60,,60,,,,,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,638,638',
'638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,,638,638',
'638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638',
'638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638',
',638,,,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,64,64',
'64,,64,,,,64,64,,,,64,,64,64,64,64,64,64,64,,,,,64,64,64,64,64,64,64',
',,,,,,,,,64,,,64,64,64,64,64,64,64,64,64,64,824,64,64,824,824,824,64',
',,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,64,,64,824,,,,,,,824,824,824,824',
',,,,,64,64,64,64,64,64,,,,64,64,632,632,632,,632,,,,632,632,,,,632,',
'632,632,632,632,632,632,632,,,,,632,632,632,632,632,632,632,,,,,,,,',
',632,,,632,632,632,632,632,632,632,632,632,632,,632,632,,632,632,632',
',,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,632,,632,,,,632,,,,,,,,632,',
',,,632,632,632,632,632,632,,,,632,632,618,618,618,,618,,,,618,618,,',
',618,,618,618,618,618,618,618,618,,,,,618,618,618,618,618,618,618,,',
',,,,,,,618,,,618,618,618,618,618,618,618,618,618,618,,618,618,,618,618',
'618,,,,,,,,,,,,,,,,,,,,618,,,618,,,618,618,,618,,,,,,618,,,,,,,,618',
',,,,618,618,618,618,618,618,,,,618,618,898,898,898,,898,,,,898,898,',
',,898,,898,898,898,898,898,898,898,,,,,898,898,898,898,898,898,898,',
',,,,,,,,898,,,898,898,898,898,898,898,898,898,898,898,,898,898,,898',
'898,898,,,,,,,,,,,,,,,,,,,,898,,,898,,,898,898,,898,,,,,,898,,,,,,,',
'898,,,,,898,898,898,898,898,898,,,,898,898,869,869,869,,869,,,,869,869',
',,,869,,869,869,869,869,869,869,869,,,,,869,869,869,869,869,869,869',
',,,,,,,,,869,,,869,869,869,869,869,869,869,869,869,869,,869,869,,869',
'869,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,869,,869,,,,869,,,,',
',,,869,,,,,869,869,869,869,869,869,,,,869,869,866,866,866,,866,,,,866',
'866,,,,866,,866,866,866,866,866,866,866,,,,,866,866,866,866,866,866',
'866,,,,,,,,,,866,,,866,866,866,866,866,866,866,866,866,866,,866,866',
',866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,866,,,,,,866,,',
',,,,,866,,,,,866,866,866,866,866,866,,,,866,866,615,615,615,,615,,,',
'615,615,,,,615,,615,615,615,615,615,615,615,,,,,615,615,615,615,615',
'615,615,,,,,,,,,,615,,,615,615,615,615,615,615,615,615,615,615,,615',
'615,,615,615,615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,615,,615,,615,,',
',615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,85,85,85,,85',
',,,85,85,,,,85,,85,85,85,85,85,85,85,,85,,,85,85,85,85,85,85,85,,,,',
',,,,,85,,,85,85,85,85,85,85,85,85,85,85,,85,85,,85,85,85,,,,,,,,,,,',
',,,,,,,,85,,,85,85,,85,85,,85,,85,,85,,85,,,,,,,,85,,85,,,85,85,85,85',
'85,85,,,,85,85,88,88,88,,88,,,,88,88,,,,88,,88,88,88,88,88,88,88,,88',
',,88,88,88,88,88,88,88,,,,,,,,,,88,,,88,88,88,88,88,88,88,88,88,88,',
'88,88,,88,88,88,,,,,,,,,,,,,,,,,,,,88,,,88,88,,88,88,,88,,88,,88,,88',
',,,,,,,88,,88,,,88,88,88,88,88,88,,,,88,88,599,599,599,,599,,,,599,599',
',,,599,,599,599,599,599,599,599,599,,,,,599,599,599,599,599,599,599',
',,,,,,,,,599,,,599,599,599,599,599,599,599,599,599,599,,599,599,,599',
'599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599,,599,,599,,599,,599,',
',,,,,,599,,,,,599,599,599,599,599,599,,,,599,599,104,104,104,,104,,',
',104,104,,,,104,,104,104,104,104,104,104,104,,,,,104,104,104,104,104',
'104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,104,104,104,,104',
'104,,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,104,,104,,,,,,104',
',,,,,,,104,,,,,104,104,104,104,104,104,,,,104,104,105,105,105,,105,',
',,105,105,,,,105,,105,105,105,105,105,105,105,,,,,105,105,105,105,105',
'105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,105,105,105,,105',
'105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,105,,,,,,105',
',,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,106,106,106,,106,',
',,106,106,,,,106,,106,106,106,106,106,106,106,,,,,106,106,106,106,106',
'106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,106,106,106,,106',
'106,,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,106,,,,,,106',
',,,,,,,106,,,,,106,106,106,106,106,106,,,,106,106,107,107,107,,107,',
',,107,107,,,,107,,107,107,107,107,107,107,107,,,,,107,107,107,107,107',
'107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,107,107,107,,107',
'107,,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,,,107,107,,107,,,,,,107',
',,,,,,,107,,,,,107,107,107,107,107,107,,,,107,107,108,108,108,108,108',
',,,108,108,,,,108,,108,108,108,108,108,108,108,,,,,108,108,108,108,108',
'108,108,,,108,,,,,,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,,108,108,,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,108',
',108,,,,108,,,,,,,,108,,,,,108,108,108,108,108,108,,,,108,108,681,681',
'681,,681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,,681,681',
'681,681,681,681,681,,,,,,,,,,681,,,681,681,681,681,681,681,681,681,681',
'681,,681,681,,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,681',
',,,,,681,,,,,,,,681,,,,,681,681,681,681,681,681,,,,681,681,682,682,682',
',682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,,682,682,682',
'682,682,682,682,,,,,,,,,,682,,,682,682,682,682,682,682,682,682,682,682',
',682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,682,,',
',,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682,682,863,863,863',
',863,,,,863,863,,,,863,,863,863,863,863,863,863,863,,,,,863,863,863',
'863,863,863,863,,,,,,,,,,863,,,863,863,863,863,863,863,863,863,863,863',
',863,863,,863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,,,863,863,,863,,',
',,,863,,,,,,,,863,,,,,863,863,863,863,863,863,,,,863,863,43,43,43,,43',
',,,43,43,,,,43,,43,43,43,43,43,43,43,,,,,43,43,43,43,43,43,43,,,,,,',
',,,43,,,43,43,43,43,43,43,43,43,43,43,,43,43,,43,43,43,,,,,,,,,,,,,',
',,,,,,43,,,43,,,43,43,,43,,,,,,43,,,,,,,,43,,,,,43,43,43,43,43,43,,',
',43,43,42,42,42,,42,,,,42,42,,,,42,,42,42,42,42,42,42,42,,,,,42,42,42',
'42,42,42,42,,,,,,,,,,42,,,42,42,42,42,42,42,42,42,42,42,,42,42,,42,42',
'42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,42,,,,,,42,,,,,,,,42,,,,,42,42',
'42,42,42,42,,,,42,42,192,192,192,,192,,,,192,192,,,,192,,192,192,192',
'192,192,192,192,,,,,192,192,192,192,192,192,192,,,,,,,,,,192,,,192,192',
'192,192,192,192,192,192,192,192,,192,192,,192,192,192,,,,,,,,,,,,,,',
',,,,,192,,,192,,,192,192,,192,,192,,,,192,,,,,,,,192,,,,,192,192,192',
'192,192,192,,,,192,192,193,193,193,,193,,,,193,193,,,,193,,193,193,193',
'193,193,193,193,,,,,193,193,193,193,193,193,193,,,,,,,,,,193,,,193,193',
'193,193,193,193,193,193,193,193,,193,193,,193,193,193,,,,,,,,,,,,,,',
',,,,,193,,,193,,,193,193,,193,,193,,,,193,,,,,,,,193,,,,,193,193,193',
'193,193,193,,,,193,193,194,194,194,,194,,,,194,194,,,,194,,194,194,194',
'194,194,194,194,,,,,194,194,194,194,194,194,194,,,,,,,,,,194,,,194,194',
'194,194,194,194,194,194,194,194,,194,194,,194,194,194,,,,,,,,,,,,,,',
',,,,,194,,,194,,,194,194,,194,,,,,,194,,,,,,,,194,,,,,194,194,194,194',
'194,194,,,,194,194,195,195,195,,195,,,,195,195,,,,195,,195,195,195,195',
'195,195,195,,,,,195,195,195,195,195,195,195,,,,,,,,,,195,,,195,195,195',
'195,195,195,195,195,195,195,,195,195,,195,195,195,,,,,,,,,,,,,,,,,,',
',195,,,195,,,195,195,,195,,195,,,,195,,,,,,,,195,,,,,195,195,195,195',
'195,195,,,,195,195,588,588,588,,588,,,,588,588,,,,588,,588,588,588,588',
'588,588,588,,,,,588,588,588,588,588,588,588,,,,,,,,,,588,,,588,588,588',
'588,588,588,588,588,588,588,,588,588,,588,588,588,,,,,,,,,,,,,,,,,,',
',588,,,588,,,588,588,,588,,,,,,588,,,,,,,,588,,,,,588,588,588,588,588',
'588,,,,588,588,574,574,574,,574,,,,574,574,,,,574,,574,574,574,574,574',
'574,574,,,,,574,574,574,574,574,574,574,,,,,,,,,,574,,,574,574,574,574',
'574,574,574,574,574,574,,574,574,,574,574,574,,,,,,,,,,,,,,,,,,,,574',
',,574,,,574,574,,574,,,,,,574,,,,,,,,574,,,,,574,574,574,574,574,574',
',,,574,574,198,198,198,,198,,,,198,198,,,,198,,198,198,198,198,198,198',
'198,,,,,198,198,198,198,198,198,198,,,,,,,,,,198,,,198,198,198,198,198',
'198,198,198,198,198,,198,198,,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198',
',,198,198,,198,,,,,,198,,,,,,,,198,,,,,198,198,198,198,198,198,,,,198',
'198,199,199,199,,199,,,,199,199,,,,199,,199,199,199,199,199,199,199',
',,,,199,199,199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199',
'199,199,199,199,199,,199,199,,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199',
',,199,199,,199,,,,,,199,,,,,,,,199,,,,,199,199,199,199,199,199,,,,199',
'199,200,200,200,,200,,,,200,200,,,,200,,200,200,200,200,200,200,200',
',,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200,200,200',
'200,200,200,200,200,,200,200,,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200',
',,200,200,,200,,,,,,200,,,,,,,,200,,,,,200,200,200,200,200,200,,,,200',
'200,692,692,692,,692,,,,692,692,,,,692,,692,692,692,692,692,692,692',
',,,,692,692,692,692,692,692,692,,,,,,,,,,692,,,692,692,692,692,692,692',
'692,692,692,692,,692,692,,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,',
',692,692,,692,,,,,,692,,,,,,,,692,,,,,692,692,692,692,692,692,,,,692',
'692,570,570,570,,570,,,,570,570,,,,570,,570,570,570,570,570,570,570',
',,,,570,570,570,570,570,570,570,,,,,,,,,,570,,,570,570,570,570,570,570',
'570,570,570,570,,570,570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570,',
',570,570,,570,,,,,,570,,,,,,,,570,,,,,570,570,570,570,570,570,,,,570',
'570,567,567,567,,567,,,,567,567,,,,567,,567,567,567,567,567,567,567',
',,,,567,567,567,567,567,567,567,,,,,,,,,,567,,,567,567,567,567,567,567',
'567,567,567,567,,567,567,,520,,567,520,520,520,,,,,,,,,,,,,,,,,567,',
',567,,,567,567,,567,,567,,,,,520,,,,,,567,520,520,520,520,,567,567,567',
'567,567,567,,,,567,567,565,565,565,,565,,,,565,565,,,,565,,565,565,565',
'565,565,565,565,,,,,565,565,565,565,565,565,565,,,,,,,,,,565,,,565,565',
'565,565,565,565,565,565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,,',
',,,,,565,,,565,,,565,565,,565,,,,,,565,,,,,,,,565,,,,,565,565,565,565',
'565,565,,,,565,565,41,41,41,,41,,,,41,41,,,,41,,41,41,41,41,41,41,41',
',,,,41,41,41,41,41,41,41,,,,,,,,,,41,,,41,41,41,41,41,41,41,41,41,41',
',41,41,,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,41,,,,,,41,,,,',
',,,41,,,,,41,41,41,41,41,41,,,,41,41,693,693,693,,693,,,,693,693,,,',
'693,,693,693,693,693,693,693,693,,,,,693,693,693,693,693,693,693,,,',
',,,,,,693,,,693,693,693,693,693,693,693,693,693,693,,693,693,,693,693',
'693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693,693,,693,,,,,,693,,,,,,,,693',
',,,,693,693,693,693,693,693,,,,693,693,8,8,8,8,8,,,,8,8,,,,8,,8,8,8',
'8,8,8,8,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,8,8',
',8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8',
'8,8,8,,,,8,8,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211',
'211,211,,,,,211,211,211,211,211,211,211,,,,,,,,,,211,,,211,211,211,211',
'211,211,211,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211',
',,211,,,211,211,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211',
',,,211,211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212',
'212,,,,,212,212,212,212,212,212,212,,,,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212',
',,212,212,,212,,,,,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212',
'212,213,213,213,,213,,,,213,213,,,,213,,213,213,213,213,213,213,213',
',,,,213,213,213,213,213,213,213,,,,,,,,,,213,,,213,213,213,213,213,213',
'213,213,213,213,,213,213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,',
',213,213,,213,,,,,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213',
'213,214,214,214,,214,,,,214,214,,,,214,,214,214,214,214,214,214,214',
',,,,214,214,214,214,214,214,214,,,,,,,,,,214,,,214,214,214,214,214,214',
'214,214,214,214,,214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,',
',214,214,,214,,,,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214',
'214,215,215,215,,215,,,,215,215,,,,215,,215,215,215,215,215,215,215',
',,,,215,215,215,215,215,215,215,,,,,,,,,,215,,,215,215,215,215,215,215',
'215,215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,',
',215,215,,215,,,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215',
'215,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216',
',,,,216,216,216,216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216,216',
'216,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,',
',216,216,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216',
'216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217',
',,,,217,217,217,217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217,217',
'217,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,',
',217,217,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217',
'217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218',
',,,,218,218,218,218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218,218',
'218,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,',
',218,218,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218',
'218,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55,55,55,55,,,,,55,55,55,55',
'55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55,,55,55,,55,55',
'55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,55,,,,,,55,,,,,,,,55,,,,,55,55',
'55,55,55,55,,,,55,55,220,220,220,,220,,,,220,220,,,,220,,220,220,220',
'220,220,220,220,,,,,220,220,220,220,220,220,220,,,,,,,,,,220,,,220,220',
'220,220,220,220,220,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,',
',,,,,220,,,220,,,220,220,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220',
'220,220,,,,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221',
'221,221,221,,,,,221,221,221,221,221,221,221,,,,,,,,,,221,,,221,221,221',
'221,221,221,221,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,',
',221,,,221,,,221,221,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221',
'221,,,,221,221,222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222',
'222,222,,,,,222,222,222,222,222,222,222,,,,,,,,,,222,,,222,222,222,222',
'222,222,222,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222',
',,222,,,222,222,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223',
'223,,,,,223,223,223,223,223,223,223,,,,,,,,,,223,,,223,223,223,223,223',
'223,223,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223',
',,223,223,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223',
'223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,224,224,224,224,224,224,224,,,,,,,,,,224,,,224,224,224,224,224,224',
'224,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,',
',224,224,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224',
'224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225,225',
',,,,225,225,225,225,225,225,225,,,,,,,,,,225,,,225,225,225,225,225,225',
'225,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,',
',225,225,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225',
'225,226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,226,226,226,226,226,226,226,,,,,,,,,,226,,,226,226,226,226,226,226',
'226,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,',
',226,226,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226',
'226,227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227',
',,,,227,227,227,227,227,227,227,,,,,,,,,,227,,,227,227,227,227,227,227',
'227,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,',
',227,227,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227',
'227,228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228,228,228',
',,,,228,228,228,228,228,228,228,,,,,,,,,,228,,,228,228,228,228,228,228',
'228,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,',
',228,228,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228',
'228,229,229,229,,229,,,,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,229,229,229,229,229,229,229,,,,,,,,,,229,,,229,229,229,229,229,229',
'229,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,',
',229,229,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229',
'229,230,230,230,,230,,,,230,230,,,,230,,230,230,230,230,230,230,230',
',,,,230,230,230,230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230,230',
'230,230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,',
',230,230,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230',
'230,231,231,231,,231,,,,231,231,,,,231,,231,231,231,231,231,231,231',
',,,,231,231,231,231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231,231',
'231,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,',
',231,231,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231',
'231,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,232,232,232,232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232,232',
'232,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,',
',232,232,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232',
'232,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,233,233,233,233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233,233',
'233,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,',
',233,233,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233',
'233,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,234,234,234,234,234,234,234,,,,,,,,,,234,,,234,234,234,234,234,234',
'234,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,',
',234,234,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234',
'234,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,235,235,235,235,235,235,235,,,,,,,,,,235,,,235,235,235,235,235,235',
'235,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,',
',235,235,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235',
'235,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236',
',,,,236,236,236,236,236,236,236,,,,,,,,,,236,,,236,236,236,236,236,236',
'236,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,',
',236,236,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236',
'236,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237',
',,,,237,237,237,237,237,237,237,,,,,,,,,,237,,,237,237,237,237,237,237',
'237,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,',
',237,237,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237',
'237,558,558,558,,558,,,,558,558,,,,558,,558,558,558,558,558,558,558',
',,,,558,558,558,558,558,558,558,,,,,,,,,,558,,,558,558,558,558,558,558',
'558,558,558,558,,558,558,,558,558,558,,,,,,,,,,,,,,,,,,,,558,,,558,',
',558,558,,558,,,,,,558,,,,,,,,558,,,,,558,558,558,558,558,558,,,,558',
'558,694,694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694',
',,,,694,694,694,694,694,694,694,,,,,,,,,,694,,,694,694,694,694,694,694',
'694,694,694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,',
',694,694,,694,,,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694',
'694,849,849,849,,849,,,,849,849,,,,849,,849,849,849,849,849,849,849',
',,,,849,849,849,849,849,849,849,,,,,,,,,,849,,,849,849,849,849,849,849',
'849,849,849,849,,849,849,,849,849,849,,,,,,,,,,,,,,,,,,,,849,,,849,',
',849,849,,849,,,,,,849,,,,,,,,849,,,,,849,849,849,849,849,849,,,,849',
'849,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,245,245,245,245,245,245,245,,,,,,,,,,245,,,245,245,245,245,245,245',
'245,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,',
',245,245,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245',
'245,247,247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247',
',,,,247,247,247,247,247,247,247,,,,,,,,,,247,,,247,247,247,247,247,247',
'247,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,',
',247,247,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247',
'247,555,555,555,,555,,,,555,555,,,,555,,555,555,555,555,555,555,555',
',,,,555,555,555,555,555,555,555,,,,,,,,,,555,,,555,555,555,555,555,555',
'555,555,555,555,,555,555,,555,555,555,,,,,,,,,,,,,,,,,,,,555,,,555,',
',555,555,,555,,,,,,555,,,,,,,,555,,,,,555,555,555,555,555,555,,,,555',
'555,550,550,550,,550,,,,550,550,,,,550,,550,550,550,550,550,550,550',
',,,,550,550,550,550,550,550,550,,,,,,,,,,550,,,550,550,550,550,550,550',
'550,550,550,550,,550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550,',
',550,550,,550,,,,,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550',
'550,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549,549',
',,,,549,549,549,549,549,549,549,,,,,,,,,,549,,,549,549,549,549,549,549',
'549,549,549,549,,549,549,,549,549,549,,,,,,,,,,,,,,,,,,,,549,,,549,',
',549,549,,549,,,,,,549,,,,,,,,549,,,,,549,549,549,549,549,549,,,,549',
'549,546,546,546,,546,,,,546,546,,,,546,,546,546,546,546,546,546,546',
',,,,546,546,546,546,546,546,546,,,,,,,,,,546,,,546,546,546,546,546,546',
'546,546,546,546,,546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,',
',546,546,,546,,546,,,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,',
'546,546,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258',
'258,,,,,258,258,258,258,258,258,258,,,,,,,,,,258,,,258,258,258,258,258',
'258,258,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258',
',,258,258,,258,,258,,258,,258,,,,,,,,258,,,,,258,258,258,258,258,258',
',,,258,258,545,545,545,,545,,,,545,545,,,,545,,545,545,545,545,545,545',
'545,,,,,545,545,545,545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545',
'545,545,545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545',
',,545,545,,545,,,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545',
'545,264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264,264,264',
',,,,264,264,264,264,264,264,264,,,,,,,,,,264,,,264,264,264,264,264,264',
'264,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,',
',264,264,,264,,264,,264,,264,,,,,,,,264,,,,,264,264,264,264,264,264',
',,,264,264,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267',
'267,,,,,267,267,267,267,267,267,267,,,,,,,,,,267,,,267,267,267,267,267',
'267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267',
',267,267,267,,267,,267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267',
'267,,,,267,267,542,542,542,542,542,542,542,542,,,542,542,542,542,542',
',,542,542,542,542,542,542,542,,,542,542,542,542,542,542,542,542,542',
'542,542,542,542,542,542,542,542,542,542,542,542,542,542,,,542,,,,,,',
',542,542,,542,542,542,542,,542,542,,,542,,,,,542,542,542,542,,,,,,,',
',,,,,542,542,,542,542,542,542,542,542,542,542,542,,542,,,542,542,9,9',
'9,9,9,9,9,9,,542,9,9,9,9,9,,,9,9,9,9,9,9,9,,,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,,9,,,,,,,,9,9,,9,9,9,9,,9,9,,,9,,,,,9,9,9,9',
',,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,,9,,,9,9,,,35,35,35,,35,,,9,35,35',
',,,35,,35,35,35,35,35,35,35,,,,,35,35,35,35,35,35,35,,,,,,,,,,35,,,35',
'35,35,35,35,35,35,35,35,35,,35,35,,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,',
',35,35,,35,,,,,,,,,,,,,,,,,,,35,35,35,35,35,35,,,,35,35,834,834,834',
',834,,,,834,834,,,,834,,834,834,834,834,834,834,834,,,,,834,834,834',
'834,834,834,834,,,,,,,,,,834,,,834,834,834,834,834,834,834,834,834,834',
',834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,,834,,,834,834,,834,,834',
',834,,834,,,,,,,,834,,,,,834,834,834,834,834,834,,,,834,834,831,831',
'831,,831,,,,831,831,,,,831,,831,831,831,831,831,831,831,,,,,831,831',
'831,831,831,831,831,,,,,,,,,,831,,,831,831,831,831,831,831,831,831,831',
'831,,831,831,,831,831,831,,,,,,,,,,,,,,,,,,,,831,,,831,,,831,831,,831',
',831,,831,,831,,,,,,,,831,,,,,831,831,831,831,831,831,,,,831,831,273',
'273,273,,273,,,,273,273,,,,273,,273,273,273,273,273,273,273,,,,,273',
'273,273,273,273,273,273,,,,,,,,,,273,,,273,273,273,273,273,273,273,273',
'273,273,,273,273,,,,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,273',
',,,,,,,,,,,,,,,,,,273,273,273,273,273,273,,,,273,273,34,34,34,,34,,',
',34,34,,,,34,,34,34,34,34,34,34,34,,,,,34,34,34,34,34,34,34,,,,,,,,',
',34,,,34,34,34,34,34,34,34,34,34,34,,34,34,,,,34,,,,,,,,,,,,,,,,,,,',
'34,,,34,,,34,34,,34,,34,,,,,,,,,,,,,,,,,34,34,34,34,34,34,,,,34,34,524',
'524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524,524,,,,,524',
'524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524,524,524',
'524,524,524,,524,524,,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524',
'524,,524,,,,,,524,,,,,,,,524,,,,,524,524,524,524,524,524,,,,524,524',
'518,518,518,,518,,,,518,518,,,,518,,518,518,518,518,518,518,518,,,,',
'518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518,518,518',
'518,518,518,518,,518,518,,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,',
',518,518,,518,,,,,,518,,,,,,,,518,,,,,518,518,518,518,518,518,,,,518',
'518,10,10,10,10,10,10,10,10,,,10,10,10,10,10,,,10,10,10,10,10,10,10',
',,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,,,10,,,,,,,,10,10,,10,10,10,10,,10,10,,,10,,,,,10,10,10,10,,,,,,',
',,,,,,10,10,,10,10,10,10,10,10,10,10,10,,10,,,10,10,,,506,506,506,,506',
',,10,506,506,,,,506,,506,506,506,506,506,506,506,,,,,506,506,506,506',
'506,506,506,,,,,,,,,,506,,,506,506,506,506,506,506,506,506,506,506,',
'506,506,,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,506,,506',
',,,506,,,,,,,,506,,,,,506,506,506,506,506,506,,,,506,506,702,702,702',
',702,,,,702,702,,,,702,,702,702,702,702,702,702,702,,,,,702,702,702',
'702,702,702,702,,,,,,,,,,702,,,702,702,702,702,702,702,702,702,702,702',
',702,702,,702,702,702,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,702,,702,,702',
',702,,702,,,,,,,,702,,,,,702,702,702,702,702,702,,,,702,702,705,705',
'705,,705,,,,705,705,,,,705,,705,705,705,705,705,705,705,,,,,705,705',
'705,705,705,705,705,,,,,,,,,,705,,,705,705,705,705,705,705,705,705,705',
'705,,705,705,,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,705',
',705,,705,,705,,,,,,,,705,,,,,705,705,705,705,705,705,,,,705,705,707',
'707,707,,707,,,,707,707,,,,707,,707,707,707,707,707,707,707,,,,,707',
'707,707,707,707,707,707,,,,,,,,,,707,,,707,707,707,707,707,707,707,707',
'707,707,,707,707,,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707,,,707,707',
',707,,707,,707,,707,,,,,,,,707,,,,,707,707,707,707,707,707,,,,707,707',
'31,31,31,,31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,31,31,31,31,31',
'31,31,,,,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,',
',,,,,,,,,,,,,,,,,,31,,,31,31,,31,31,,31,,31,,31,,31,,,,,,,,31,,,,,31',
'31,31,31,31,31,,,,31,31,491,491,491,,491,,,,491,491,,,,491,,491,491',
'491,491,491,491,491,,,,,491,491,491,491,491,491,491,,,,,,,,,,491,,,491',
'491,491,491,491,491,491,491,491,491,,491,491,,491,491,491,,,,,,,,,,',
',,,,,,,,,491,,,491,,,491,491,,491,,,,,,491,,,,,,,,491,,,,,491,491,491',
'491,491,491,,,,491,491,488,488,488,,488,,,,488,488,,,,488,,488,488,488',
'488,488,488,488,,,,,488,488,488,488,488,488,488,,,,,,,,,,488,,,488,488',
'488,488,488,488,488,488,488,488,,488,488,,488,488,488,,,,,,,,,,,,,,',
',,,,,488,,,488,,,488,488,,488,,,,,,488,,,,,,,,488,,,,,488,488,488,488',
'488,488,,,,488,488,805,805,805,,805,,,,805,805,,,,805,,805,805,805,805',
'805,805,805,,,,,805,805,805,805,805,805,805,,,,,,,,,,805,,,805,805,805',
'805,805,805,805,805,805,805,,805,805,,805,805,805,,,,,,,,,,,,,,,,,,',
',805,,,805,,,805,805,,805,,805,,,,805,,,,,,,,805,,,,,805,805,805,805',
'805,805,,,,805,805,485,485,485,,485,,,,485,485,,,,485,,485,485,485,485',
'485,485,485,,,,,485,485,485,485,485,485,485,,,,,,,,,,485,,,485,485,485',
'485,485,485,485,485,485,485,,485,485,,485,485,485,,,,,,,,,,,,,,,,,,',
',485,,,485,,,485,485,,485,,485,,,,485,,,,,,,,485,,,,,485,485,485,485',
'485,485,,,,485,485,479,479,479,,479,,,,479,479,,,,479,,479,479,479,479',
'479,479,479,,,,,479,479,479,479,479,479,479,,,479,,,,,,,479,,,479,479',
'479,479,479,479,479,479,479,479,,479,479,,479,479,479,,,,,,,,,,,,,,',
',,,,,479,,,479,,,479,479,,479,,,,,,479,,,,,,,,479,,,,,479,479,479,479',
'479,479,,,,479,479,797,797,797,,797,,,,797,797,,,,797,,797,797,797,797',
'797,797,797,,,,,797,797,797,797,797,797,797,,,,,,,,,,797,,,797,797,797',
'797,797,797,797,797,797,797,,797,797,,,,797,,,,,,,,,,,,,,,,,,,,797,',
',797,,,797,797,,797,,,,,,,,,,,,,,,,,,,797,797,797,797,797,797,,,,797',
'797,294,294,294,,294,,,,294,294,,,,294,,294,294,294,294,294,294,294',
',,,,294,294,294,294,294,294,294,,,,,,,,,,294,,,294,294,294,294,294,294',
'294,294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,294',
',294,294,,294,,,,,,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294',
'294,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,30,30,30,30',
'30,30,30,,,,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30',
',,,,,,,,,,,,,,,,,,,30,,,30,30,,30,30,,30,,30,,30,,30,,,,,,,,30,,,,,30',
'30,30,30,30,30,,,,30,30,475,475,475,,475,,,,475,475,,,,475,,475,475',
'475,475,475,475,475,,,,,475,475,475,475,475,475,475,,,,,,,,,,475,,,475',
'475,475,475,475,475,475,475,475,475,,475,475,,475,475,475,,,,,,,,,,',
',,,,,,,,,475,,,475,,,475,475,,475,,,,,,475,,,,,,,,475,,,,,475,475,475',
'475,475,475,,,,475,475,474,474,474,,474,,,,474,474,,,,474,,474,474,474',
'474,474,474,474,,,,,474,474,474,474,474,474,474,,,,,,,,,,474,,,474,474',
'474,474,474,474,474,474,474,474,,474,474,,474,474,474,,,,,,,,,,,,,,',
',,,,,474,,,474,,,474,474,,474,,,,,,474,,,,,,,,474,,,,,474,474,474,474',
'474,474,,,,474,474,473,473,473,,473,,,,473,473,,,,473,,473,473,473,473',
'473,473,473,,,,,473,473,473,473,473,473,473,,,,,,,,,,473,,,473,473,473',
'473,473,473,473,473,473,473,,473,473,,473,473,473,,,,,,,,,,,,,,,,,,',
',473,,,473,,,473,473,,473,,,,,,473,,,,,,,,473,,,,,473,473,473,473,473',
'473,,,,473,473,466,466,466,,466,,,,466,466,,,,466,,466,466,466,466,466',
'466,466,,,,,466,466,466,466,466,466,466,,,,,,,,,,466,,,466,466,466,466',
'466,466,466,466,466,466,,466,466,,466,466,466,,,,,,,,,,,,,,,,,,,,466',
',,466,,,466,466,,466,,466,,,,466,,,,,,,,466,,,,,466,466,466,466,466',
'466,,,,466,466,302,302,302,,302,,,,302,302,,,,302,,302,302,302,302,302',
'302,302,,,,,302,302,302,302,302,302,302,,,,,,,,,,302,,,302,302,302,302',
'302,302,302,302,302,302,,302,302,,302,302,302,,,,,,,,,,,,,,,,,,,,302',
',,302,,,302,302,,302,,,,,,302,,,,,,,,302,,,,,302,302,302,302,302,302',
',,,302,302,732,732,732,,732,,,,732,732,,,,732,,732,732,732,732,732,732',
'732,,,,,732,732,732,732,732,732,732,,,732,,,,,,,732,,,732,732,732,732',
'732,732,732,732,732,732,,732,732,,732,732,732,,,,,,,,,,,,,,,,,,,,732',
',,732,,,732,732,,732,,,,,,732,,,,,,,,732,,,,,732,732,732,732,732,732',
',,,732,732,20,20,20,,20,,,,20,20,,,,20,,20,20,20,20,20,20,20,,,,,20',
'20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,20,20,,20',
'20,,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,20,,,,,,20,,,,,,,,20',
',,,,20,20,20,20,20,20,,,,20,20,786,786,786,,786,,,,786,786,,,,786,,786',
'786,786,786,786,786,786,,,,,786,786,786,786,786,786,786,,,,,,,,,,786',
',,786,786,786,786,786,786,786,786,786,786,,786,786,,786,786,786,,,,',
',,,,,,,,,,,,,,,786,,,786,,,786,786,,786,,,,,,786,,,,,,,,786,,,,,786',
'786,786,786,786,786,,,,786,786,740,740,740,,740,,,,740,740,,,,740,,740',
'740,740,740,740,740,740,,,,,740,740,740,740,740,740,740,,,,,,,,,,740',
',,740,740,740,740,740,740,740,740,740,740,,740,740,,740,740,740,,,,',
',,,,,,,,,,,,,,,740,,,740,,,740,740,,740,,,,,,740,,,,,,,,740,,,,,740',
'740,740,740,740,740,,,,740,740,449,449,449,,449,,,,449,449,,,,449,,449',
'449,449,449,449,449,449,,,,,449,449,449,449,449,449,449,,,449,,,,,,',
'449,,,449,449,449,449,449,449,449,449,449,449,,449,449,,449,449,449',
',,,,,,,,,,,,,,,,,,,449,,,449,,,449,449,,449,,449,,449,,449,,,,,,,,449',
',,,,449,449,449,449,449,449,,,,449,449,21,21,21,,21,,,,21,21,,,,21,',
'21,21,21,21,21,21,21,,,,,21,21,21,21,21,21,21,,,,,,,,,,21,,,21,21,21',
'21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,,,,,,,,,,,,,,,,21,,,21,,,21',
'21,,21,,,,,,21,,,,,,,,21,,,,,21,21,21,21,21,21,,,,21,21,775,775,775',
',775,,,,775,775,,,,775,,775,775,775,775,775,775,775,,,,,775,775,775',
'775,775,775,775,,,,,,,,,,775,,,775,775,775,775,775,775,775,775,775,775',
',775,775,,775,775,775,,,,,,,,,,,,,,,,,,,,775,,,775,,,775,775,,775,,',
',,,775,,,,,,,,775,,,,,775,775,775,775,775,775,,,,775,775,312,312,312',
',312,,,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,312,312,312',
'312,312,312,312,,,312,,,,,,,312,,,312,312,312,312,312,312,312,312,312',
'312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312,,,312,312,,312',
',,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,,,,312,312,313,313,313',
',313,,,,313,313,,,,313,,313,313,313,313,313,313,313,,,,,313,313,313',
'313,313,313,313,,,313,,,,,,,313,,,313,313,313,313,313,313,313,313,313',
'313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,,,313,313,,313',
',,,,,313,,,,,,,,313,,,,,313,313,313,313,313,313,,,,313,313,437,437,437',
',437,,,,437,437,,,,437,,437,437,437,437,437,437,437,,,,,437,437,437',
'437,437,437,437,,,,,,,,,,437,,,437,437,437,437,437,437,437,437,437,437',
',437,437,,437,437,437,,,,,,,,,,,,,,,,,,,,437,,,437,,,437,437,,437,,437',
',437,,437,,,,,,,,437,,,,,437,437,437,437,437,437,,,,437,437,434,434',
'434,,434,,,,434,434,,,,434,,434,434,434,434,434,434,434,,,,,434,434',
'434,434,434,434,434,,,,,,,,,,434,,,434,434,434,434,434,434,434,434,434',
'434,,434,434,,434,434,434,,,,,,,,,,,,,,,,,,,,434,,,434,,,434,434,,434',
',434,,434,,434,,,,,,,,434,,,,,434,434,434,434,434,434,,,,434,434,784',
'784,784,,784,,,,784,784,,,,784,,784,784,784,784,784,784,784,,,,,784',
'784,784,784,784,784,784,,,,,,,,,,784,,,784,784,784,784,784,784,784,784',
'784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784',
',784,,,,,,784,,,,,,,,784,,,,,784,784,784,784,784,784,,,,784,784,884',
'884,884,,884,,,,884,884,,,,884,,884,884,884,884,884,884,884,,,,,884',
'884,884,884,884,884,884,,,,,,,,,,884,,,884,884,884,884,884,884,884,884',
'884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,,,884,,,884,,,884,884',
',884,,884,,884,,884,,,,,,,,884,,,,,884,884,884,884,884,884,,,,884,884',
'748,748,748,,748,,,,748,748,,,,748,,748,748,748,748,748,748,748,,,,',
'748,748,748,748,748,748,748,,,748,,,,,,,748,,,748,748,748,748,748,748',
'748,748,748,748,,748,748,,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,',
',748,748,,748,,,,,,748,,,,,,,,748,,,,,748,748,748,748,748,748,,,,748',
'748,405,405,405,,405,,,,405,405,,,,405,,405,405,405,405,405,405,405',
',,,,405,405,405,405,405,405,405,,,,,,,,,,405,,,405,405,405,405,405,405',
'405,405,405,405,,405,405,,405,405,405,,,,,,,,,,,,,,,,,,,,405,,,405,',
',405,405,,405,,,,,,405,,,,,,,,405,,,,,405,405,405,405,405,405,,,,405',
'405,404,404,404,,404,,,,404,404,,,,404,,404,404,404,404,404,404,404',
',,,,404,404,404,404,404,404,404,,,,,,,,,,404,,,404,404,404,404,404,404',
'404,404,404,404,,404,404,,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,',
',404,404,,404,,,,,,404,,,,,,,,404,,,,,404,404,404,404,404,404,,,,404',
'404,779,779,779,,779,,,,779,779,,,,779,,779,779,779,779,779,779,779',
',,,,779,779,779,779,779,779,779,,,,,,,,,,779,,,779,779,779,779,779,779',
'779,779,779,779,,779,779,,779,779,779,,,,,,,,,,,,,,,,,,,,779,,,779,',
',779,779,,779,,,,,,779,,,,,,,,779,,,,,779,779,779,779,779,779,,,,779',
'779,324,324,324,,324,,,,324,324,,,,324,,324,324,324,324,324,324,324',
',,,,324,324,324,324,324,324,324,,,,,,,,,,324,,,324,324,324,324,324,324',
'324,324,324,324,,324,324,,,,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324',
',324,,,,,,,,,,,,,,,,,,,324,324,324,324,324,324,,,,324,324,326,326,326',
',326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,326,326,326',
'326,326,326,326,,,,,,,,,,326,,,326,326,326,326,326,326,326,326,326,326',
',326,326,,,,326,,,,,,,,,,,,,,,,,,,,326,,,326,,,326,326,,326,,,,,,,,',
',,,,,,,,,,326,326,326,326,326,326,,,,326,326,403,403,403,,403,,,,403',
'403,,,,403,,403,403,403,403,403,403,403,,,,,403,403,403,403,403,403',
'403,,,,,,,,,,403,,,403,403,403,403,403,403,403,403,403,403,,403,403',
',403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,403,,,,,,403,,',
',,,,,403,,,,,403,403,403,403,403,403,,,,403,403,401,401,401,,401,,,',
'401,401,,,,401,,401,401,401,401,401,401,401,,,,,401,401,401,401,401',
'401,401,,,,,,,,,,401,,,401,401,401,401,401,401,401,401,401,401,,401',
'401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,401,,401,,',
',401,,,,,,,,401,,,,,401,401,401,401,401,401,,,,401,401,394,394,394,',
'394,,,,394,394,,,,394,,394,394,394,394,394,394,394,,,,,394,394,394,394',
'394,394,394,,,,,,,,,,394,,,394,394,394,394,394,394,394,394,394,394,',
'394,394,,394,394,394,,,,,,,,,,,,,,,,,,,,394,,,394,394,,394,394,,394',
',394,,394,,394,,,,,,,,394,,,,,394,394,394,394,394,394,,,,394,394,393',
'393,393,,393,,,,393,393,,,,393,,393,393,393,393,393,393,393,,,,,393',
'393,393,393,393,393,393,,,,,,,,,,393,,,393,393,393,393,393,393,393,393',
'393,393,,393,393,,393,393,393,,,,,,,,,,,,,,,,,,,,393,,,393,393,,393',
'393,,393,,393,,393,,393,,,,,,,,393,,,,,393,393,393,393,393,393,,,,393',
'393,25,25,25,,25,,,,25,25,,,,25,,25,25,25,25,25,25,25,,,,,25,25,25,25',
'25,25,25,,,,,,,,,,25,,,25,25,25,25,25,25,25,25,25,25,,25,25,,25,25,25',
',,,,,,,,,,,,,,,,,,,25,,,25,,,25,25,,25,,25,,25,,25,,,,,,,,25,,,,,25',
'25,25,25,25,25,,,,25,25,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26',
'26,26,,,,,26,26,26,26,26,26,26,,,,,,,,,,26,,,26,26,26,26,26,26,26,26',
'26,26,,26,26,,26,26,26,,,,,,,,,,,,,,,,,,,,26,,,26,,,26,26,,26,,26,,26',
',26,,,,,,,,26,,,,,26,26,26,26,26,26,,,,26,26,386,386,386,,386,,,,386',
'386,,,,386,,386,386,386,386,386,386,386,,,,,386,386,386,386,386,386',
'386,,,,,,,,,,386,,,386,386,386,386,386,386,386,386,386,386,,386,386',
',386,386,386,,,,,,,,,,,,,,,,,,,,386,,,386,386,,386,386,,386,,386,,386',
',386,,,,,,,,386,,,,,386,386,386,386,386,386,,,,386,386,377,377,377,',
'377,,,,377,377,,,,377,,377,377,377,377,377,377,377,,,,,377,377,377,377',
'377,377,377,,,,,,,,,,377,,,377,377,377,377,377,377,377,377,377,377,',
'377,377,,377,377,377,,,,,,,,,,,,,,,,,,,,377,,,377,,,377,377,,377,,,',
',,377,,,,,,,,377,,,,,377,377,377,377,377,377,,,,377,377,761,761,761',
',761,,,,761,761,,,,761,,761,761,761,761,761,761,761,,,,,761,761,761',
'761,761,761,761,,,,,,,,,,761,,,761,761,761,761,761,761,761,761,761,761',
',761,761,,761,761,761,,,,,,,,,,,,,,,,,,,,761,,,761,,,761,761,,761,,',
',,,761,,,,,,,,761,,,,,761,761,761,761,761,761,,,,761,761,27,27,27,,27',
',,,27,27,,,,27,,27,27,27,27,27,27,27,,,,,27,27,27,27,27,27,27,,,,,,',
',,,27,,,27,27,27,27,27,27,27,27,27,27,,27,27,,27,27,27,,,,,,,,,,,,,',
',,,,,,27,,,27,,,27,27,,27,,27,,27,,27,,,,,,,,27,,,,,27,27,27,27,27,27',
',,,27,27,365,365,365,365,365,365,365,365,,,365,365,365,365,365,,,365',
'365,365,365,365,365,365,,,365,365,365,365,365,365,365,365,365,365,365',
'365,365,365,365,365,365,365,365,365,365,365,365,,,365,,,,,,,,365,365',
',365,365,365,365,,365,365,,,365,,,,,365,365,365,365,,,,,,,,,,,,,365',
'365,,365,365,365,365,365,365,365,365,365,,365,,,365,365,,,440,440,440',
',440,,,365,440,440,,,,440,,440,440,440,440,440,440,440,,,,,440,440,440',
'440,440,440,440,,,,,,,,,,440,,,440,440,440,440,440,440,440,440,440,440',
',440,440,,440,440,440,,,,,,,,,,,,,,,,,,,,440,,,440,,,440,440,,440,,',
',,,440,,,,,,,,440,,,,,440,440,440,440,440,440,,,,440,440,670,670,670',
'670,670,670,670,670,,,670,670,670,670,670,,,670,670,670,670,670,670',
'670,,,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670',
'670,670,670,670,670,670,670,,,670,,,,,,,,670,670,,670,670,670,670,,670',
'670,,,670,,,,,670,670,670,670,,,,,,,,,,,,,670,670,,670,670,670,670,670',
'670,670,670,670,,670,,,670,67,67,67,67,67,67,67,67,,,67,67,67,67,67',
',,67,67,67,67,67,67,67,,,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,,,,,,,67,67,,67,67,67,67,,67,67',
',,67,,,,,67,67,67,67,,,,,,67,,,,,,,67,67,,67,67,67,67,67,67,67,67,67',
',67,,,67,81,81,81,81,81,81,81,81,,,81,81,81,81,81,,,81,81,81,81,81,81',
'81,,,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81',
'81,81,81,81,81,81,,,,,,,81,81,,81,81,81,81,,81,81,,,81,,,,,81,81,81',
'81,,,,,,,,,,,,,81,81,,81,81,81,81,81,81,81,81,81,,81,508,508,81,,508',
',,,,,,,508,508,,508,508,508,508,,508,508,,,508,,,,,508,508,508,508,',
',,,,,,,,,,,508,508,,508,508,508,508,508,508,508,508,508,,508,507,507',
'508,,507,,,,,,,,507,507,,507,507,507,507,,507,507,,,507,,,,,507,507',
'507,507,,,,,,,,,,,,,507,507,,507,507,507,507,507,507,507,507,507,,507',
'399,399,507,,399,,,,,,,,399,399,,399,399,399,399,,399,399,,,399,,,,',
'399,399,399,399,,,,,,,,,,,,,399,399,,399,399,399,399,399,399,399,399',
'399,,399,597,597,399,,597,,,,,,,,597,597,,597,597,597,597,,597,597,',
',597,,,,,597,597,597,597,,,,,,,,,,,,,597,597,,597,597,597,597,597,597',
'597,597,597,,597,196,196,597,,196,,,,,,,,196,196,,196,196,196,196,,196',
'196,,,196,,,,,196,196,196,196,,,,,,,,,,,,,196,196,,196,196,196,196,196',
'196,196,196,196,,196,400,400,196,,400,,,,,,,,400,400,,400,400,400,400',
',400,400,,,400,,,,,400,400,400,400,,,,,,,,,,,,,400,400,,400,400,400',
'400,400,400,400,400,400,,400,,,400,585,585,585,585,585,585,585,585,585',
'585,585,,585,585,,,585,585,,,,585,,,,,,,,,,585,,585,,585,585,585,585',
'585,585,585,,585,,,,,,,871,871,,,871,,,,,585,,585,871,871,,871,871,871',
'871,,871,871,,,871,,,,,871,871,871,871,,,,,,,,,,,,,871,871,,871,871',
'871,871,871,871,871,871,871,,871,197,197,871,,197,,,,,,,,197,197,,197',
'197,197,197,,197,197,,,197,,,,,197,197,197,197,,,,,,,,,,,,,197,197,',
'197,197,197,197,197,197,197,197,197,,197,477,477,197,,477,,,,,,,,477',
'477,,477,477,477,477,,477,477,,,477,,,,,477,477,477,477,,,,,,,,,,,,',
'477,477,,477,477,477,477,477,477,477,477,477,,477,476,476,477,,476,',
',,,,,,476,476,,476,476,476,476,,476,476,,,476,,,,,476,476,476,476,,',
',,,,,,,,,,476,476,,476,476,476,476,476,476,476,476,476,,476,255,255',
'476,,255,,,,,,,,255,255,,255,255,255,255,,255,255,,,255,,,,,255,255',
'255,255,,,,,,,,,,,,,255,255,,255,255,255,255,255,255,255,255,255,,255',
'468,468,255,,468,,,,,,,,468,468,,468,468,468,468,,468,468,,,468,,,,',
'468,468,468,468,,,,,,,,,,,,,468,468,,468,468,468,468,468,468,468,468',
'468,,468,467,467,468,,467,,,,,,,,467,467,,467,467,467,467,,467,467,',
',467,,,,,467,467,467,467,,,,,,,,,,,,,467,467,,467,467,467,467,467,467',
'467,467,467,,467,870,870,467,,870,,,,,,,,870,870,,870,870,870,870,,870',
'870,,,870,,,,,870,870,870,870,,,,,,,,,,,,,870,870,,870,870,870,870,870',
'870,870,870,870,,870,642,642,870,,642,,,,,,,,642,642,,642,642,642,642',
',642,642,,,642,,,,,642,642,642,642,,,,,,,,,,,,,642,642,,642,642,642',
'642,642,642,642,642,642,,642,644,644,642,,644,,,,,,,,644,644,,644,644',
'644,644,,644,644,,,644,,,,,644,644,644,644,,,,,,,,,,,,,644,644,,644',
'644,644,644,644,644,644,644,644,,644,256,256,644,,256,,,,,,,,256,256',
',256,256,256,256,,256,256,,,256,,,,,256,256,256,256,,,,,,,,,,,,,256',
'256,,256,256,256,256,256,256,256,256,256,,256,,,256,828,828,828,828',
'828,828,828,828,828,828,828,,828,828,,,828,828,,,,,,,,,,,,,,828,,828',
',828,828,828,828,828,828,828,,828,,,,,,,,,,,,,,,,828,,828,431,431,431',
'431,431,431,431,431,431,431,431,,431,431,,,431,431,,,,,,,,,,,,,,431',
',431,,431,431,431,431,431,431,431,,431,,396,396,396,396,396,396,396',
'396,396,396,396,,396,396,431,431,396,396,,,,,,,,,,,,,,396,,396,,396',
'396,396,396,396,396,396,,396,774,774,774,774,774,774,774,774,774,774',
'774,,774,774,,396,774,774,,,,,,,,,,,,,,774,,774,,774,774,774,774,774',
'774,774,,774,610,610,610,610,610,610,610,610,610,610,610,,610,610,,774',
'610,610,,,,,,,,,,,,,,610,,610,,610,610,610,610,610,610,610,,610,489',
'489,489,489,489,489,489,489,489,489,489,,489,489,,610,489,489,,,,,,',
',,,,,,,489,,489,,489,489,489,489,489,489,489,,489,691,691,691,691,691',
'691,691,691,691,691,691,,691,691,489,489,691,691,,,,,,,,,,,,,,691,,691',
',691,691,691,691,691,691,691,,691,382,382,382,382,382,382,382,382,382',
'382,382,,382,382,,691,382,382,,,,,,,,,,,,,,382,,382,,382,382,382,382',
'382,382,382,,382,478,478,478,478,478,478,478,478,478,478,478,,478,478',
',382,478,478,,,,,,,,,,,,,,478,,478,,478,478,478,478,478,478,478,,478',
'22,22,22,22,22,22,22,22,22,22,22,,22,22,,478,22,22,,,,,,,,,,,,,,22,',
'22,,22,22,22,22,22,22,22,,22,686,686,686,686,686,686,686,686,686,686',
'686,,686,686,,22,686,686,,,,,,,,,,,,,,686,,686,,686,686,686,686,686',
'686,686,,686,684,684,684,684,684,684,684,684,684,684,684,,684,684,,686',
'684,684,,,,,,,,,,,,,,684,,684,,684,684,684,684,684,684,684,,684,696',
'696,696,696,696,696,696,696,696,696,696,,696,696,,684,696,696,,,,,,',
',,,,,,,696,,696,,696,696,696,696,696,696,696,,696,241,241,241,241,241',
'241,241,241,241,241,241,,241,241,,696,241,241,,,,,,,,,,,,,,241,,241',
',241,241,241,241,241,241,241,,241,729,729,729,729,729,729,729,729,729',
'729,729,,729,729,,241,729,729,,,,,,,,,,,,,,729,,729,,729,729,729,729',
'729,729,729,,729,679,679,679,679,679,679,679,679,679,679,679,,679,679',
'729,729,679,679,,,,,,,,,,,,,,679,,679,,679,679,679,679,679,679,679,',
'679,689,689,689,689,689,689,689,689,689,689,689,,689,689,,679,689,689',
',,,,,,,,,,,,,689,,689,,689,689,689,689,689,689,689,,689,,,,,,,,,,,,',
',,,689' ]
        racc_action_check = arr = Array.new(23714, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1013,  4420,  1001,   nil,   -12,   nil,   736,  9580, 14610,
 15562,   nil,   890,   867,   864,   908,   423,   280,   660,   nil,
 17954, 18434, 23282,   960,   nil, 20594, 20714, 21194,   518,   202,
 17114, 16154,   nil,  2968, 15202, 14722,   nil,   821,   465,   892,
   561,  9340,  7660,  7540,   822,   449,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     0,   nil, 10660,  4660,  4780,     0,  5020,
  5140,   nil,   nil,   779,  5380,   863,   nil, 21655,   nil,   nil,
   nil,   nil,   nil,   -83,   nil,   nil,   nil,   nil,   nil,   815,
   806, 21764,   nil,   nil,   nil,  6220,   nil,   nil,  6340,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   905,   nil,   nil,   nil,  6580,  6700,  6820,  6940,  7060,  1032,
   nil,   630,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   805,   nil,
   821,  3936,  7780,  7900,  8020,  8140, 22059, 22289,  8500,  8620,
  8740,   nil,   409,   291,   868,    36,   790,   834,  3573,   nil,
   nil,  9700,  9820,  9940, 10060, 10180, 10300, 10420, 10540,  4540,
 10780, 10900, 11020, 11140, 11260, 11380, 11500, 11620, 11740, 11860,
 11980, 12100, 12220, 12340, 12460, 12580, 12700, 12820,   nil,   nil,
   nil, 23458,   nil,   792,   789, 13300,   nil, 13420,   828,   nil,
   nil,   nil,   nil,   nil,   nil, 22466, 22820,   819, 14020,   nil,
   816,   nil,   nil,   nil, 14260,   nil,   nil, 14380,   810,  3331,
   809,   801,   762, 15082,  3089,   410,   413,   820,   447,   785,
   739,   -21,   nil,   770,   538,   nil,   nil,   505,   790,   761,
   421,   nil,   760,   nil, 16994,   nil,  2726,   672,   nil,   700,
   -92,   312, 17714,   729,   192,   706,   nil,   275,   nil,   627,
    16,   -11, 18674, 18794,   496,   166,   679,   128,   422,   751,
   -19,   779,   nil,   nil, 19874,   nil, 19994,   539,   433,   547,
   579,   553,   567,   557,   -26,   nil,   425,   nil,   nil,   nil,
   nil,   314,   nil,   311,   nil,   -39,   674,   236,   nil,   673,
   -23,   nil,   284,   nil,   nil,   nil,   nil,   nil,  1068,   nil,
   nil,   nil,   nil,   nil,   nil, 21314,   nil,   nil,   nil,   nil,
  1032,   671,   nil,   nil,   779,   nil,   654, 20954,   nil,   646,
   nil,   nil, 23194,   679,   163,   569, 20834,   nil,   nil,   121,
   667,   199,   nil, 20474, 20354,   nil, 22974,   nil,   nil, 21941,
 22118, 20234,   282, 20114, 19634, 19514,  2121,  1879,   438,    84,
   689,   686,   684,   683,  2968,  3089,  3210,  2726,  1637,  1395,
  1274,  2242,  2605,  2484,  2847,  2000,  1758,  1003,   618,  1516,
  2363, 22929,    73,   nil, 19034,   nil,   nil, 18914,   620,   nil,
 21426,   439,   nil,   nil,   664,   nil,   nil,   nil,   nil, 18314,
   nil,    95,   265,   656,   608,   314,   600,   694,   628,   nil,
   622,  -101,   nil,   nil,   nil,   603, 17594, 22584, 22525,   241,
   600,   nil,   nil, 17474, 17354, 17234, 22407, 22348, 23238, 16754,
   672,   636,   514,   nil,   nil, 16634,   nil,   nil, 16394, 23106,
   nil, 16274,   nil,   nil,   nil,  2363,   587,   nil,   nil,  1758,
   185,   271,   565,   559,  1879,   nil, 15674, 21882, 21823,   180,
   nil,   379,   381,    -5,   nil,   424,   nil,    14, 15442,   nil,
  9112,   nil,   nil,   nil, 15322,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -34,   nil,   nil,   nil,   433,
   nil,   nil, 14500,   436,   nil, 14140, 13900,   nil,   563, 13780,
 13660,   441,   nil,   nil,   nil, 13540,   437,   nil, 12940,   -39,
   -78,   554,   329,   437,   905,  9220,   nil,  9100,   nil,   nil,
  8980,   394,   nil,   432,  8380,   nil,   424,   nil,   390,   nil,
   nil,   nil,   nil,   nil,   -50, 22165,   -66,   357,  8260,   nil,
   374,   nil,   nil,   nil,   nil,   371,   338, 22000,   662,  6460,
   nil,   -68,   nil,   331,   157,   190,   327,   382,   238,   321,
 23062,   335,   168,   -25,   157,  6100,   nil,    62,  5620,   nil,
   nil,   457,   nil,   100,   nil,   nil,   nil,   nil,   nil,    41,
   nil,    37,  5500,   610,   186,    -7,     7,   231,  5260,   nil,
   460,   nil, 22702,  4900, 22761,   nil,   nil,   nil,   134,   223,
  2242,  2121,  1204,   398,   117,   135,   165,   nil,   nil,   nil,
   nil,   236,   nil,   nil,   nil,   nil,   318,   nil,   nil,   337,
 21546,   -33,   682,  4299,   nil,   nil,   nil,   nil,   nil, 23546,
   313,  7180,  7300,   nil, 23370,   nil, 23326,   nil,   nil, 23590,
   nil, 23150,  8860,  9460, 13060,   200, 23414,   nil,   442,  4178,
   437,   nil, 15794,   445,   nil, 15914,   nil, 16034,   506,   nil,
   545,  1153,  1274,   nil,   nil,   564,   568,   252,   657,   263,
   nil,   681,   nil,  1395,   568,   612,   nil,   nil,   nil, 23502,
   700,   nil, 17834,   705,  1516,  1637,   nil,   nil,   597,    20,
 18194,   152,    27,   385,   436,   nil,   658,  2000, 19394,   nil,
   -75,   746,   749,   646,   nil,  1083,   nil,   530,   nil,   nil,
   246, 21074,   nil,   nil,   nil,   696,   nil,   nil,   nil,   nil,
   nil,   678,   nil,   nil, 23018, 18554,   nil,   786,   nil, 19754,
   nil,  2484,   680,   nil, 19154,   689, 18074,   nil,   nil,   708,
   809,   731,   nil,  2605,   nil,   nil,    31, 16874,   nil,   nil,
   nil,   127,   nil,   827,   830, 16514,  2847,   nil,   nil,   nil,
   849,   109,   nil,   nil,   nil,   775,   739,   741,   nil,   nil,
   742,   741,   nil,   nil,  5388,   nil,   nil,   nil, 22867,   766,
   nil, 14962,   763,   nil, 14842,   771,   nil,   nil,   nil,   nil,
  3210,   401,   461,   852,    44,   nil,  3452,   nil,   nil, 13180,
   203,  3694,   nil,   nil,  3815,   nil,   562,   nil,   nil,   nil,
  4057,   nil,   nil,  7420,   806,   nil,  5980,   nil,   933,  5860,
 22643, 22230,   342,    47,   nil,   nil,   nil,   nil,   953,   956,
   855,   974,   859,   nil, 19274,   864,   nil,   899,    42,    50,
    46,   464,   nil,   nil,   nil,   nil,   nil,   nil,  5740,   nil,
   419,   889,   nil ]

racc_action_default = [
    -1,  -507,  -505,  -507,    -2,  -494,    -5,    -6,  -507,  -507,
  -507,   -20,  -507,  -507,  -507,  -507,  -507,  -275,   -34,   -35,
  -507,  -507,   -40,   -42,   -43,  -287,  -324,  -325,   -47,  -253,
  -358,  -290,   -61,  -505,   -65,   -70,   -71,  -507,  -436,  -507,
  -507,  -507,  -507,  -507,  -496,  -218,  -268,  -269,  -270,  -271,
  -272,  -273,  -274,  -484,  -277,  -507,  -505,  -505,  -293,  -507,
  -507,  -297,  -300,  -494,  -507,  -309,  -316,  -507,  -326,  -327,
  -381,  -382,  -383,  -384,  -385,  -505,  -388,  -505,  -505,  -505,
  -505,  -505,  -415,  -421,  -422,  -425,  -426,  -427,  -428,  -429,
  -430,  -431,  -432,  -433,  -434,  -435,  -438,  -439,   903,    -4,
  -495,  -501,  -502,  -503,  -507,  -507,  -507,  -507,  -507,    -8,
    -9,  -507,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,   -14,  -105,
  -507,  -505,  -507,  -507,  -507,  -505,  -507,  -507,  -507,  -507,
  -507,   -38,  -507,  -436,  -507,  -275,  -507,  -507,  -505,   -39,
  -210,  -507,  -507,  -507,  -507,  -507,  -507,  -507,  -507,  -507,
  -507,  -507,  -507,  -507,  -507,  -507,  -507,  -507,  -507,  -507,
  -507,  -507,  -507,  -507,  -507,  -507,  -507,  -507,  -346,  -349,
   -44,  -219,  -232,  -506,  -506,  -507,  -240,  -507,  -263,  -287,
  -324,  -325,  -479,   -45,   -46,  -507,  -507,   -53,  -507,  -292,
  -507,  -359,  -362,   -59,  -505,  -357,   -60,  -507,   -61,  -505,
  -507,  -507,   -66,   -68,  -505,   -75,  -507,  -507,   -82,  -290,
  -496,  -352,  -328,  -358,  -507,   -69,   -73,  -283,  -423,  -424,
  -507,  -195,  -196,  -211,  -507,  -497,  -505,  -279,  -220,  -496,
  -498,  -498,  -507,  -507,  -498,  -507,  -476,  -498,  -294,   -41,
  -507,  -507,  -507,  -507,  -494,  -507,  -495,  -436,  -507,  -507,
  -275,  -507,  -340,  -341,  -507,  -312,  -507,   -96,   -97,  -134,
  -135,  -151,  -156,  -163,  -166,  -319,  -507,  -436,  -473,  -474,
  -386,  -507,  -401,  -507,  -403,  -507,  -507,  -507,  -393,  -507,
  -507,  -399,  -507,  -414,  -416,  -417,  -418,  -419,    -7,  -504,
   -15,   -16,   -17,   -18,   -19,  -507,   -11,   -12,   -13,  -106,
  -505,  -507,   -23,   -31,  -175,  -263,  -507,  -507,   -24,   -32,
   -33,   -25,  -177,  -507,  -485,  -486,  -505,  -487,  -488,  -485,
  -253,  -486,  -356,  -490,  -491,   -30,  -184,   -36,   -37,  -507,
  -507,  -505,  -283,  -507,  -507,  -507,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -204,  -205,  -206,  -207,  -208,  -209,  -212,  -213,  -214,
  -215,  -507,  -505,  -233,  -507,  -262,  -235,  -507,  -506,  -260,
  -507,  -253,  -485,  -486,  -253,   -50,   -54,  -254,  -255,  -256,
  -353,  -505,  -505,  -507,  -496,  -496,  -506,  -232,  -507,  -289,
  -507,   -62,  -281,   -74,   -67,  -507,  -505,  -507,  -507,   -81,
  -507,  -423,  -424,  -507,  -507,  -507,  -507,  -507,  -216,  -507,
  -373,  -507,  -496,  -221,  -222,  -500,  -499,  -224,  -500,  -496,
  -285,  -500,  -478,  -286,  -477,  -505,  -329,  -330,  -331,  -505,
  -507,  -507,  -507,  -507,  -505,  -365,  -505,  -507,  -507,  -283,
  -306,   -91,   -92,  -507,   -94,  -507,  -275,  -507,  -507,  -317,
  -454,  -321,  -492,  -493,  -507,  -387,  -402,  -405,  -406,  -408,
  -389,  -404,  -390,  -391,  -392,  -507,  -395,  -397,  -398,  -507,
  -420,   -10,  -507,  -507,   -22,  -507,  -507,  -267,  -284,  -507,
  -507,   -55,  -230,  -231,  -354,  -507,   -57,  -355,  -507,  -485,
  -486,  -489,  -282,  -507,  -175,  -507,  -342,  -507,  -344,  -347,
  -507,  -506,  -261,  -264,  -507,  -480,  -507,  -239,  -507,  -481,
   -48,  -350,   -49,  -351,  -505,   -40,  -507,  -506,  -507,  -252,
  -507,  -258,  -360,  -363,  -226,  -507,  -507,  -507,  -507,  -507,
  -288,   -62,   -72,  -507,  -485,  -486,  -505,   -78,   -80,  -507,
  -183,  -193,  -194,  -507,  -505,  -505,  -278,  -507,  -507,  -264,
  -225,  -505,  -332,  -505,  -298,  -333,  -334,  -335,  -301,  -507,
  -304,  -507,  -507,  -507,  -485,  -486,  -489,  -282,  -507,   -91,
   -92,   -93,  -507,  -505,  -507,  -310,  -440,  -441,  -507,  -313,
  -505,  -505,  -454,  -507,  -472,  -472,  -472,  -453,  -455,  -456,
  -457,  -458,  -459,  -462,  -464,  -465,  -467,  -468,  -469,  -507,
  -507,  -496,  -507,  -505,  -394,  -396,  -400,  -107,   -21,  -176,
  -265,  -507,  -507,   -27,  -179,   -28,  -180,   -56,   -29,  -181,
   -58,  -182,  -507,  -507,  -507,  -284,  -217,  -343,  -507,  -505,
  -506,  -237,  -507,  -506,   -51,  -507,  -245,  -507,  -506,  -257,
  -507,  -505,  -505,  -227,  -228,  -505,  -505,  -496,  -507,   -76,
  -291,  -505,  -338,  -505,  -374,  -505,  -375,  -376,  -280,  -496,
  -507,  -336,  -507,  -507,  -505,  -505,  -303,  -305,  -367,  -507,
  -507,  -284,  -507,   -91,   -92,   -95,  -507,  -505,  -507,  -443,
  -507,  -507,  -507,  -496,  -445,  -507,  -449,  -507,  -451,  -452,
  -507,  -507,  -466,  -470,  -322,  -507,  -407,  -410,  -411,  -412,
  -413,  -507,  -266,   -26,  -178,  -507,  -345,  -507,  -234,  -507,
  -236,  -505,  -506,  -242,  -507,  -506,  -507,  -251,  -259,  -507,
  -507,  -507,    -3,  -505,  -380,  -339,  -507,  -507,  -378,  -223,
  -295,  -507,  -296,  -507,  -507,  -507,  -505,  -369,  -307,  -284,
  -507,  -507,  -314,  -318,  -320,  -507,  -472,  -472,  -460,  -471,
  -472,  -507,  -463,  -461,  -454,  -475,  -409,  -348,  -506,  -507,
  -241,  -507,  -506,  -247,  -507,  -506,  -361,  -364,  -229,  -379,
  -505,   -83,  -507,  -507,   -90,  -377,  -505,  -299,  -302,  -507,
  -505,  -505,  -311,  -442,  -505,  -444,  -507,  -447,  -448,  -450,
  -505,  -238,   -52,  -507,  -506,  -243,  -507,  -246,  -373,  -505,
  -507,  -507,   -89,  -505,  -368,  -366,  -370,  -371,  -507,  -507,
  -472,  -507,  -506,  -248,  -507,  -506,  -372,  -507,  -485,  -486,
  -489,   -88,  -337,  -308,  -315,  -446,  -323,  -244,  -507,  -249,
   -84,  -506,  -250 ]

clist = [
'210,503,120,120,241,241,241,481,265,321,335,323,614,446,242,242,242',
'110,189,303,291,292,293,99,354,282,282,657,455,118,118,495,499,730,285',
'241,241,651,294,581,373,380,583,270,109,299,575,244,244,244,624,628',
'721,641,268,282,310,311,822,432,314,733,338,257,263,266,569,305,756',
'758,759,115,115,308,590,817,526,820,517,307,519,315,536,447,591,592',
'593,243,243,243,542,272,645,4,246,246,246,575,781,584,336,360,361,362',
'363,343,345,521,296,352,482,312,240,253,254,734,484,487,313,304,492',
'735,638,494,271,851,324,747,518,115,750,854,326,650,520,670,358,824',
'710,699,451,711,452,115,364,712,739,875,632,725,796,209,340,341,190',
'347,535,822,383,657,365,350,766,672,673,353,748,753,816,188,100,374',
'241,382,241,792,880,396,818,2,524,1,745,,299,,,,629,,210,406,407,408',
'409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425',
'426,427,428,429,430,431,,704,,,,,,241,,241,,,,857,858,,,859,,,241,450',
',,,,241,16,,241,242,,,16,,,457,376,376,242,,,394,103,265,202,202,282',
',,202,202,202,675,,464,478,470,16,276,276,,460,244,489,371,,465,892',
'244,,876,244,268,,808,483,895,268,,202,202,271,,202,202,,,202,318,687',
',500,501,575,690,581,583,282,575,282,103,,243,,372,378,381,,456,246',
'395,243,,657,502,246,,,246,386,390,,,860,16,,,448,202,202,202,202,16',
'454,,,458,,241,,120,,271,751,752,717,563,271,,,557,,,,,541,,,,,,,241',
',396,564,382,118,,,,,299,,,,,,441,444,,,886,,,,,,,,,,,,,241,,,241,,',
'241,551,,,,556,,,115,585,603,,,,16,202,202,202,202,,,202,202,202,575',
',241,,,595,596,16,,610,611,612,299,571,,810,,806,543,394,726,241,,,241',
',633,241,587,,,,580,617,,582,,,,,620,436,241,,,,,,,,575,,299,,,,,202',
'15,,,,,202,15,,202,,16,698,,323,276,16,840,589,,,,846,,679,241,,,684',
'686,394,,15,,689,120,877,691,16,394,386,390,,,696,,,,,241,677,,,241',
'202,202,,,282,,,,118,,,879,515,241,515,103,394,881,,,,,,,241,,,,,,,',
'621,557,718,,623,,,,241,631,,729,,15,,,,,115,,746,15,,609,,241,16,764',
',,,,609,,,571,241,,,,,,,,,,299,,,742,,,,,,,,202,,,,,,609,,,,,,,,,,,241',
'774,,,,765,,,,,,684,686,689,,,,376,577,683,685,241,,,241,688,241,,,',
'15,202,,,738,,,,,,,,,,394,,,15,202,,,791,,,,,,,,241,,202,,799,,,,785',
',801,,,115,,,,,16,715,716,241,16,,,,811,16,815,202,,,,,,774,625,625',
',828,,202,,,241,771,241,202,782,15,,,,646,15,783,38,,,,,,38,,609,241',
',,,282,,777,202,202,,,15,,202,,,,,789,790,,,38,275,275,318,241,701,773',
'241,795,,,,,,,,,,,803,804,706,241,,,,887,,,,,317,,,337,202,241,,,241',
',,241,,,,,864,,,,,299,,,,,241,29,,,,,15,29,201,829,38,,,,241,,,202,38',
'29,29,839,202,,29,29,29,,,16,16,,29,,850,,,,,,749,,,297,,754,,309,309',
',,309,16,,29,29,,,29,29,,202,29,,,,,,868,,394,,,,873,,,778,16,878,780',
',,,,787,,,,,16,16,309,309,309,309,,,,29,,38,16,29,29,29,29,29,,,,202',
',16,16,,,,38,,,,,,,,16,202,,,,15,,,625,15,,,,13,15,,812,,,13,,,,609',
',,,,,,,,,830,16,,833,,,,,,,,13,,16,,,,842,,,38,,,,275,38,16,,397,398',
',29,29,29,29,29,,,29,29,29,,322,,853,,861,38,29,,865,,,867,,,,,,,16',
',,,,,16,,,,,16,,,16,337,,337,13,,16,,883,,,,13,,,202,,,,,,,,,29,,897',
',,899,29,,,29,,29,,,,,29,,17,,,902,,38,17,,,,,15,15,,,,,,,,29,,,,,309',
'309,,,,,17,278,278,15,,29,29,,,,,,,,,,,,,,,,13,,,,,,,15,,320,,,,,,,',
'13,,15,15,,,,,,,,,,,15,,,,,,,,,,29,15,15,,17,,,,,,,,17,,15,,,,,,,,,',
',,,,,,,29,,,,,38,13,,,38,,13,,,38,,,15,,,,,,,,,,,,15,,,,13,,,,297,,',
',,15,,,,,,29,,,,,,,,,,,,,,,,17,29,,613,,,,,,,,,15,317,29,,,17,15,,,',
',15,,,15,,,,29,,15,,29,,,,,29,,29,649,13,,,,,671,,,,,29,,,,,,29,,,,',
',,,,,,,,,,,,,,17,298,306,,278,17,29,29,,,,,29,,,,,,38,38,342,,344,344',
'348,351,344,17,,,,,,,,,,,,,,38,,,,,,,,,,,,,,516,29,516,,,,,,,,,,38,',
',,,,,,,,,,38,38,,,,309,,,,,,13,38,,,13,29,,,,13,29,17,38,38,,,,29,29',
',,,,,,38,,,,,,,,,,,,,,,29,,,,,,,,,29,298,,,,,,,,,38,,,,,,,29,,,,,38',
'322,,,841,,,29,29,,,,,38,,,,309,,29,,,,,,,,,29,,29,29,,309,,,,,,,,375',
'379,29,29,,,38,453,,,,,38,,,,,38,,,38,,,,17,,38,,17,,,,,17,,,29,,,,',
',,13,13,,,,29,,,,,438,,439,,,,,,29,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,13',
',,29,320,,,,,29,,,13,13,29,,,29,,,,,,29,13,,,,,,,,29,,,13,13,552,,,',
',,,,,,,13,,,,298,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,566,,,,17,17,,,,552',
'547,13,552,,,845,,,,566,566,,,,13,,770,17,,,,,,,298,,,,,,,,,,,,,,,,',
',,17,,,,,13,,,,,,13,17,17,573,,13,576,,13,579,298,,,17,13,,,,586,,,',
',,17,17,,,,,,,,,,,,17,,,,,,,,,,,,,,,,,619,,,576,,,619,,,,,,,,,,,17,',
',,,,,,,,,,17,,,,844,566,,,,,,,,17,,,,,,,,,,,,,,552,,,,,680,,,722,727',
',,,,,722,,722,,,17,,,,,,17,,,700,,17,,703,17,,,298,,,17,,,,,,,708,,',
',,,,,,,,573,,,,,,,,,,,,,,,,724,,,,,,,,,,,,,,,,,375,,,,,,,,,,,,,,,,,',
'552,552,,,,,794,,,,798,,,,,,,,,,,,,,,,,,,,,772,,,,,,,,,,,,,,,,,,,,,576',
',,,,576,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,807,,,,,,,,,,,,,,,,,,,,,823',
',,,,,,,,,,,,,,,,,,,,,,832,722,835,,,,,,,,,,,,,,,,,,298,619,,,722,,,',
',,,,,,,,,,,,,,,,,,,573,,,576,,,,,,,,,,,,,,,874,,,,,,,,,,,,,,882,,,885',
',,,,,,,,,,,,,,,,,576,,,,,,,,,,,,,,901' ]
        racc_goto_table = arr = Array.new(2314, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,83,53,53,28,28,28,3,60,84,48,18,5,35,29,29,29,13,13,21,28,28,28,9',
'48,56,56,141,32,52,52,80,80,81,44,28,28,87,55,61,23,23,61,41,11,29,147',
'59,59,59,82,82,6,46,40,56,15,15,143,109,15,6,76,34,34,34,36,77,140,140',
'140,49,49,78,67,139,129,139,47,59,47,9,129,65,64,36,36,57,57,57,54,43',
'85,2,63,63,63,147,38,37,88,15,15,15,15,126,126,89,90,126,91,92,31,31',
'31,93,58,58,94,57,58,95,96,58,2,97,98,99,100,49,101,102,103,104,105',
'106,11,107,68,110,113,114,115,49,11,116,117,118,119,120,121,17,124,125',
'27,127,128,143,21,141,26,130,131,132,133,134,135,136,138,14,12,28,28',
'28,28,7,139,28,142,4,146,1,46,,29,,,,83,,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,36,,,,,,28,,28',
',,,140,140,,,140,,,28,60,,,,,28,20,,28,29,,,20,,,29,57,57,29,,,49,86',
'60,20,20,56,,,20,20,20,129,,44,28,55,20,20,20,,41,59,28,2,,41,81,59',
',6,59,40,,82,55,140,40,,20,20,2,,20,20,,,20,20,35,,15,15,147,35,61,61',
'56,147,56,86,,57,,17,17,17,,57,63,17,57,,141,9,63,,,63,33,33,,,87,20',
',,31,20,20,20,20,20,31,,,31,,28,,53,,2,3,3,32,21,2,,,60,,,,,13,,,,,',
',28,,28,28,28,52,,,,,29,,,,,,33,33,,,5,,,,,,,,,,,,,28,,,28,,,28,34,',
',,34,,,49,28,21,,,,20,20,20,20,20,,,20,20,20,147,,28,,,55,55,20,,28',
'28,28,29,59,,3,,80,2,49,23,28,,,28,,21,28,59,,,,34,55,,34,,,,,55,62',
'28,,,,,,,,147,,29,,,,,20,19,,,,,20,19,,20,,20,84,,18,20,20,80,63,,,',
'80,,28,28,,,28,28,49,,19,,28,53,83,28,20,49,33,33,,,28,,,,,28,13,,,28',
'20,20,,,56,,,,52,,,3,20,28,20,86,49,3,,,,,,,28,,,,,,,,2,60,29,,2,,,',
'28,2,,28,,19,,,,,49,,21,19,,33,,28,20,48,,,,,33,,,59,28,,,,,,,,,,29',
',,15,,,,,,,,20,,,,,,33,,,,,,,,,,,28,28,,,,55,,,,,,28,28,28,,,,57,62',
'17,17,28,,,28,17,28,,,,19,20,,,57,,,,,,,,,,49,,,19,20,,,55,,,,,,,,28',
',20,,55,,,,59,,15,,,49,,,,,20,33,33,28,20,,,,15,20,55,20,,,,,,28,86',
'86,,28,,20,,,28,2,28,20,57,19,,,,86,19,63,45,,,,,,45,,33,28,,,,56,,2',
'20,20,,,19,,20,,,,,2,2,,,45,45,45,20,28,62,17,28,2,,,,,,,,,,,2,2,62',
'28,,,,21,,,,,45,,,45,20,28,,,28,,,28,,,,,59,,,,,29,,,,,28,39,,,,,19',
'39,25,2,45,,,,28,,,20,45,39,39,2,20,,39,39,39,,,20,20,,39,,2,,,,,,86',
',,25,,86,,25,25,,,25,20,,39,39,,,39,39,,20,39,,,,,,2,,49,,,,2,,,62,20',
'2,62,,,,,62,,,,,20,20,25,25,25,25,,,,39,,45,20,39,39,39,39,39,,,,20',
',20,20,,,,45,,,,,,,,20,20,,,,19,,,86,19,,,,16,19,,86,,,16,,,,33,,,,',
',,,,,62,20,,62,,,,,,,,16,,20,,,,20,,,45,,,,45,45,20,,25,25,,39,39,39',
'39,39,,,39,39,39,,16,,86,,62,45,39,,62,,,62,,,,,,,20,,,,,,20,,,,,20',
',,20,45,,45,16,,20,,62,,,,16,,,20,,,,,,,,,39,,62,,,62,39,,,39,,39,,',
',,39,,22,,,62,,45,22,,,,,19,19,,,,,,,,39,,,,,25,25,,,,,22,22,22,19,',
'39,39,,,,,,,,,,,,,,,,16,,,,,,,19,,22,,,,,,,,16,,19,19,,,,,,,,,,,19,',
',,,,,,,,39,19,19,,22,,,,,,,,22,,19,,,,,,,,,,,,,,,,,39,,,,,45,16,,,45',
',16,,,45,,,19,,,,,,,,,,,,19,,,,16,,,,25,,,,,19,,,,,,39,,,,,,,,,,,,,',
',,22,39,,25,,,,,,,,,19,45,39,,,22,19,,,,,19,,,19,,,,39,,19,,39,,,,,39',
',39,25,16,,,,,25,,,,,39,,,,,,39,,,,,,,,,,,,,,,,,,,22,10,10,,22,22,39',
'39,,,,,39,,,,,,45,45,10,,10,10,10,10,10,22,,,,,,,,,,,,,,45,,,,,,,,,',
',,,,22,39,22,,,,,,,,,,45,,,,,,,,,,,,45,45,,,,25,,,,,,16,45,,,16,39,',
',,16,39,22,45,45,,,,39,39,,,,,,,45,,,,,,,,,,,,,,,39,,,,,,,,,39,10,,',
',,,,,,45,,,,,,,39,,,,,45,16,,,45,,,39,39,,,,,45,,,,25,,39,,,,,,,,,39',
',39,39,,25,,,,,,,,24,24,39,39,,,45,10,,,,,45,,,,,45,,,45,,,,22,,45,',
'22,,,,,22,,,39,,,,,,,16,16,,,,39,,,,,24,,24,,,,,,39,,,,,16,,,,,,,,,',
',,,,,,,,,,,,,,,,16,,,39,22,,,,,39,,,16,16,39,,,39,,,,,,39,16,,,,,,,',
'39,,,16,16,10,,,,,,,,,,,16,,,,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,10',
',,,22,22,,,,10,24,16,10,,,16,,,,10,10,,,,16,,22,22,,,,,,,10,,,,,,,,',
',,,,,,,,,,22,,,,,16,,,,,,16,22,22,24,,16,24,,16,24,10,,,22,16,,,,24',
',,,,,22,22,,,,,,,,,,,,22,,,,,,,,,,,,,,,,,24,,,24,,,24,,,,,,,,,,,22,',
',,,,,,,,,,22,,,,22,10,,,,,,,,22,,,,,,,,,,,,,,10,,,,,24,,,10,10,,,,,',
'10,,10,,,22,,,,,,22,,,24,,22,,24,22,,,10,,,22,,,,,,,24,,,,,,,,,,,24',
',,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,10,10,,,,,10,',
',,10,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,24,,,,,24,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,',
',,24,10,24,,,,,,,,,,,,,,,,,,10,24,,,10,,,,,,,,,,,,,,,,,,,,,,,24,,,24',
',,,,,,,,,,,,,,24,,,,,,,,,,,,,,24,,,24,,,,,,,,,,,,,,,,,,24,,,,,,,,,,',
',,,24' ]
        racc_goto_check = arr = Array.new(2314, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   181,    91,  -289,   179,  -468,  -562,  -546,   nil,    18,
  1350,    36,   165,     8,   159,    -3,  1000,   130,   -53,   499,
   242,   -37,  1136,  -152,  1415,   851,    50,   143,   -21,   -11,
   nil,    87,  -236,   141,    34,  -244,  -366,  -346,  -606,   862,
    21,    10,   nil,    57,    -1,   773,  -460,  -246,   -57,    62,
   nil,   nil,    20,    -7,  -279,    -6,    -9,    62,  -184,    22,
   -22,  -402,   240,    69,  -365,  -175,   nil,  -375,  -453,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    -5,    10,    15,   nil,
  -279,  -588,  -450,  -314,   -55,  -425,   255,  -483,    33,  -229,
    54,  -187,    50,  -509,    56,  -507,  -388,  -683,    61,  -518,
  -197,  -519,  -681,    66,  -386,  -201,  -386,  -627,   nil,  -179,
  -430,   nil,   nil,  -121,  -451,  -120,  -448,  -486,  -703,  -357,
  -466,  -575,   nil,   nil,    79,    78,    28,    76,  -191,  -265,
    81,  -510,  -365,  -365,    84,  -481,  -485,   nil,  -587,  -680,
  -586,  -493,  -577,  -699,   nil,   nil,  -159,  -391 ]

racc_goto_default = [
   nil,   nil,   480,   nil,   nil,   nil,   731,   nil,     5,   nil,
     6,     7,   316,   nil,   nil,   nil,   206,    19,    14,   207,
   290,   nil,   205,   nil,   248,    18,   nil,   nil,    22,    23,
    24,   nil,    28,   606,   nil,   nil,   nil,   nil,   nil,   281,
    32,   nil,    34,    37,    36,   203,   514,   nil,   117,   388,
   116,   119,    71,    72,   nil,   nil,    45,   300,   nil,   301,
   553,   554,   433,   572,   nil,   nil,   258,   nil,   nil,   435,
    46,    47,    48,    49,    50,    51,    52,   nil,   259,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   496,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   239,   nil,
   nil,   392,   260,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    70,    73,    74,   nil,   nil,   nil,   nil,   531,
   nil,   nil,   nil,   nil,   nil,   nil,   653,   654,   655,   656,
   nil,   819,   662,   663,   666,   669,   nil,   252 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 145, :_reduce_103,
  1, 145, :_reduce_none,
  1, 146, :_reduce_105,
  0, 186, :_reduce_106,
  4, 146, :_reduce_107,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_175,
  5, 160, :_reduce_176,
  3, 160, :_reduce_177,
  6, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  5, 160, :_reduce_181,
  5, 160, :_reduce_182,
  4, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  3, 160, :_reduce_191,
  3, 160, :_reduce_192,
  4, 160, :_reduce_193,
  4, 160, :_reduce_194,
  2, 160, :_reduce_195,
  2, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  3, 160, :_reduce_208,
  3, 160, :_reduce_209,
  2, 160, :_reduce_210,
  2, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  3, 160, :_reduce_215,
  3, 160, :_reduce_216,
  5, 160, :_reduce_217,
  1, 160, :_reduce_none,
  1, 156, :_reduce_219,
  1, 153, :_reduce_none,
  2, 153, :_reduce_221,
  2, 153, :_reduce_222,
  5, 153, :_reduce_223,
  2, 153, :_reduce_224,
  3, 153, :_reduce_225,
  3, 192, :_reduce_226,
  4, 192, :_reduce_227,
  4, 192, :_reduce_228,
  6, 192, :_reduce_229,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 163, :_reduce_232,
  2, 163, :_reduce_233,
  5, 163, :_reduce_234,
  2, 163, :_reduce_235,
  5, 163, :_reduce_236,
  4, 163, :_reduce_237,
  7, 163, :_reduce_238,
  3, 163, :_reduce_239,
  1, 163, :_reduce_none,
  4, 196, :_reduce_241,
  3, 196, :_reduce_242,
  5, 196, :_reduce_243,
  7, 196, :_reduce_244,
  2, 196, :_reduce_245,
  5, 196, :_reduce_246,
  4, 196, :_reduce_247,
  6, 196, :_reduce_248,
  7, 196, :_reduce_249,
  9, 196, :_reduce_250,
  3, 196, :_reduce_251,
  1, 196, :_reduce_none,
  0, 198, :_reduce_253,
  2, 166, :_reduce_254,
  1, 197, :_reduce_none,
  0, 199, :_reduce_256,
  3, 197, :_reduce_257,
  0, 200, :_reduce_258,
  4, 197, :_reduce_259,
  2, 195, :_reduce_260,
  2, 194, :_reduce_261,
  1, 194, :_reduce_none,
  1, 189, :_reduce_263,
  3, 189, :_reduce_264,
  3, 155, :_reduce_265,
  4, 155, :_reduce_266,
  2, 155, :_reduce_267,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_276,
  0, 222, :_reduce_277,
  4, 188, :_reduce_278,
  0, 223, :_reduce_279,
  5, 188, :_reduce_280,
  3, 188, :_reduce_281,
  3, 188, :_reduce_282,
  2, 188, :_reduce_283,
  4, 188, :_reduce_284,
  3, 188, :_reduce_285,
  3, 188, :_reduce_286,
  1, 188, :_reduce_287,
  4, 188, :_reduce_288,
  3, 188, :_reduce_289,
  1, 188, :_reduce_290,
  5, 188, :_reduce_291,
  2, 188, :_reduce_292,
  1, 188, :_reduce_none,
  2, 188, :_reduce_294,
  6, 188, :_reduce_295,
  6, 188, :_reduce_296,
  0, 224, :_reduce_297,
  0, 225, :_reduce_298,
  7, 188, :_reduce_299,
  0, 226, :_reduce_300,
  0, 227, :_reduce_301,
  7, 188, :_reduce_302,
  5, 188, :_reduce_303,
  4, 188, :_reduce_304,
  5, 188, :_reduce_305,
  0, 228, :_reduce_306,
  0, 229, :_reduce_307,
  9, 188, :_reduce_308,
  0, 230, :_reduce_309,
  0, 231, :_reduce_310,
  7, 188, :_reduce_311,
  0, 232, :_reduce_312,
  0, 233, :_reduce_313,
  0, 234, :_reduce_314,
  9, 188, :_reduce_315,
  0, 235, :_reduce_316,
  0, 236, :_reduce_317,
  6, 188, :_reduce_318,
  0, 237, :_reduce_319,
  6, 188, :_reduce_320,
  0, 238, :_reduce_321,
  0, 239, :_reduce_322,
  9, 188, :_reduce_323,
  1, 188, :_reduce_324,
  1, 188, :_reduce_325,
  1, 188, :_reduce_326,
  1, 188, :_reduce_327,
  1, 152, :_reduce_328,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  2, 212, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 213, :_reduce_none,
  5, 213, :_reduce_337,
  1, 138, :_reduce_none,
  2, 138, :_reduce_339,
  1, 216, :_reduce_none,
  1, 216, :_reduce_341,
  1, 168, :_reduce_none,
  2, 168, :_reduce_343,
  1, 168, :_reduce_344,
  3, 168, :_reduce_345,
  0, 241, :_reduce_346,
  0, 242, :_reduce_347,
  6, 240, :_reduce_348,
  2, 164, :_reduce_349,
  4, 164, :_reduce_350,
  4, 164, :_reduce_351,
  0, 244, :_reduce_352,
  3, 211, :_reduce_353,
  4, 211, :_reduce_354,
  4, 211, :_reduce_355,
  3, 211, :_reduce_356,
  2, 211, :_reduce_357,
  1, 211, :_reduce_358,
  0, 245, :_reduce_359,
  0, 246, :_reduce_360,
  6, 210, :_reduce_361,
  0, 247, :_reduce_362,
  0, 248, :_reduce_363,
  6, 210, :_reduce_364,
  0, 251, :_reduce_365,
  6, 215, :_reduce_366,
  1, 249, :_reduce_none,
  4, 249, :_reduce_368,
  2, 249, :_reduce_369,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  6, 137, :_reduce_372,
  0, 137, :_reduce_373,
  1, 252, :_reduce_374,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 253, :_reduce_377,
  1, 253, :_reduce_none,
  2, 139, :_reduce_379,
  1, 139, :_reduce_none,
  1, 202, :_reduce_381,
  1, 202, :_reduce_382,
  1, 202, :_reduce_none,
  1, 203, :_reduce_384,
  1, 255, :_reduce_none,
  2, 255, :_reduce_386,
  3, 256, :_reduce_387,
  1, 256, :_reduce_388,
  3, 204, :_reduce_389,
  3, 205, :_reduce_390,
  3, 206, :_reduce_391,
  3, 206, :_reduce_392,
  1, 259, :_reduce_393,
  3, 259, :_reduce_394,
  1, 260, :_reduce_none,
  2, 260, :_reduce_396,
  3, 207, :_reduce_397,
  3, 207, :_reduce_398,
  1, 262, :_reduce_399,
  3, 262, :_reduce_400,
  1, 257, :_reduce_401,
  2, 257, :_reduce_402,
  1, 258, :_reduce_403,
  2, 258, :_reduce_404,
  1, 261, :_reduce_405,
  0, 264, :_reduce_406,
  3, 261, :_reduce_407,
  0, 265, :_reduce_408,
  4, 261, :_reduce_409,
  1, 263, :_reduce_410,
  1, 263, :_reduce_411,
  1, 263, :_reduce_412,
  1, 263, :_reduce_none,
  2, 184, :_reduce_414,
  1, 184, :_reduce_415,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  3, 185, :_reduce_420,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 254, :_reduce_423,
  2, 254, :_reduce_424,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_430,
  1, 177, :_reduce_431,
  1, 177, :_reduce_432,
  1, 177, :_reduce_433,
  1, 177, :_reduce_434,
  1, 177, :_reduce_435,
  1, 208, :_reduce_436,
  1, 151, :_reduce_437,
  1, 154, :_reduce_438,
  1, 154, :_reduce_439,
  1, 217, :_reduce_440,
  0, 267, :_reduce_441,
  4, 217, :_reduce_442,
  2, 217, :_reduce_443,
  4, 219, :_reduce_444,
  2, 219, :_reduce_445,
  6, 268, :_reduce_446,
  4, 268, :_reduce_447,
  4, 268, :_reduce_448,
  2, 268, :_reduce_449,
  4, 268, :_reduce_450,
  2, 268, :_reduce_451,
  2, 268, :_reduce_452,
  1, 268, :_reduce_453,
  0, 268, :_reduce_454,
  1, 274, :_reduce_455,
  1, 274, :_reduce_456,
  1, 274, :_reduce_457,
  1, 274, :_reduce_458,
  1, 269, :_reduce_459,
  3, 269, :_reduce_460,
  3, 275, :_reduce_461,
  1, 270, :_reduce_462,
  3, 270, :_reduce_463,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  2, 271, :_reduce_466,
  1, 271, :_reduce_467,
  1, 277, :_reduce_none,
  1, 277, :_reduce_none,
  2, 273, :_reduce_470,
  2, 272, :_reduce_471,
  0, 272, :_reduce_472,
  1, 220, :_reduce_none,
  0, 278, :_reduce_474,
  5, 220, :_reduce_475,
  1, 209, :_reduce_476,
  2, 209, :_reduce_477,
  2, 209, :_reduce_478,
  1, 191, :_reduce_none,
  3, 191, :_reduce_480,
  3, 279, :_reduce_481,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  0, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 218, :_reduce_501,
  1, 218, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_504,
  0, 142, :_reduce_505,
  0, 201, :_reduce_506 ]

racc_reduce_n = 507

racc_shift_n = 903

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tNL => 122,
  :tEH => 123,
  :tCOLON => 124,
  :tCOMMA => 125,
  :tSPACE => 126,
  :tSEMI => 127,
  :tLAST_TOKEN => 128,
  :tEQL => 129,
  :tLOWEST => 130,
  "[" => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "\"[\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_45(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_46(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_80(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_106(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

def _reduce_175(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_176(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], s(:resbody, s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_177(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_180(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_181(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_182(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_184(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_185(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_186(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :+, s(:arglist, val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :-, s(:arglist, val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :*, s(:arglist, val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :"/", s(:arglist, val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call val[0], :%, s(:arglist, val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call val[0], :**, s(:arglist, val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_195(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[1], :"-@", s(:arglist)
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"|", s(:arglist, val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"^", s(:arglist, val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :"&", s(:arglist, val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :"<=>", s(:arglist, val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :">", s(:arglist, val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :">=", s(:arglist, val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"<", s(:arglist, val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"<=", s(:arglist, val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_call val[0], :"==", s(:arglist, val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = new_call val[0], :"===", s(:arglist, val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                    
    result
end

def _reduce_208(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_209(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_210(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_211(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
                    
    result
end

def _reduce_212(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 220 omitted

def _reduce_221(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_225(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_226(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_227(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_228(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_229(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 230 omitted

# reduce 231 omitted

def _reduce_232(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = self.arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_238(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat val[0], val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_239(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      args = self.list_prepend val[0], val[2]
                      result = self.arg_blk_pass args, val[3]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = self.arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = self.arg_concat s(:array, val[0]), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = self.arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = self.arg_blk_pass result, val[5]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = self.arg_blk_pass result, val[8]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_254(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_257(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_259(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

def _reduce_276(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_277(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_278(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_279(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_280(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_284(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_285(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_297(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_case nil, val[3]
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_309(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_310(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_class val
                      self.env.unextend
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_313(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_314(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_module val
                      self.env.unextend
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_defn val
                      self.env.unextend
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_322(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_323(val, _values, result)
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 342 omitted

def _reduce_343(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_344(val, _values, result)
                      result = 0
                      self.lexer.command_start = true
                    
    result
end

def _reduce_345(val, _values, result)
                      result = val[1]
                      self.lexer.command_start = true
                    
    result
end

def _reduce_346(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_347(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_348(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_349(val, _values, result)
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_353(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_357(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_359(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_360(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_361(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_363(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_364(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_366(val, _values, result)
                      result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 367 omitted

def _reduce_368(val, _values, result)
                      result = self.list_append val[0], s(:when, val[3], nil)
                    
    result
end

def _reduce_369(val, _values, result)
                      result = s(:array, s(:when, val[1], nil))
                    
    result
end

# reduce 370 omitted

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_373(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_374(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 375 omitted

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_382(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_392(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_393(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_394(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_399(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_402(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_404(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_405(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_406(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_407(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_408(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
end

def _reduce_409(val, _values, result)
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
end

def _reduce_410(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_411(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_412(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 413 omitted

def _reduce_414(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_415(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 416 omitted

# reduce 417 omitted

# reduce 418 omitted

# reduce 419 omitted

def _reduce_420(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 421 omitted

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_424(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

def _reduce_430(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_431(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_432(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_433(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_434(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_435(val, _values, result)
 result = s(:lit, lexer.src.current_line) 
    result
end

def _reduce_436(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_437(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_438(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_439(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_440(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_441(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_443(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = args val[0], val[2], val[4], val[5]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = args val[0], val[2],    nil, val[3]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = args val[0],    nil, val[2], val[3]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = args val[0],    nil,    nil, val[1]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = args    nil, val[0], val[2], val[3]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = args    nil, val[0],    nil, val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = args    nil,    nil, val[0], val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = args    nil,    nil,    nil, val[0]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = args    nil,    nil,    nil,    nil
                    
    result
end

def _reduce_455(val, _values, result)
                      yyerror "formal argument cannot be a constant: #{val[0]}"
                    
    result
end

def _reduce_456(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_457(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_458(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_460(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 464 omitted

# reduce 465 omitted

def _reduce_466(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_467(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 468 omitted

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = nil
                    
    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_477(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_478(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 479 omitted

def _reduce_480(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_481(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

def _reduce_501(val, _values, result)
 yyerrok 
    result
end

# reduce 502 omitted

# reduce 503 omitted

def _reduce_504(val, _values, result)
 yyerrok 
    result
end

def _reduce_505(val, _values, result)
 result = nil 
    result
end

def _reduce_506(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
